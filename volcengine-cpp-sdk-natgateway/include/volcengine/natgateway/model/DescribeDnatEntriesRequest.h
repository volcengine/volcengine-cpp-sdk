/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_NATGATEWAY_DESCRIBEDNATENTRIESREQUEST_H
#define VOLCENGINE_NATGATEWAY_DESCRIBEDNATENTRIESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace natgateway{
        class DescribeDnatEntriesRequest {
        public:
            DescribeDnatEntriesRequest();
            ~DescribeDnatEntriesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::vector<std::string> &getDnatEntryIds()const { return  v_dnatEntryIds; }
            bool DnatEntryIdsHasBeenSet() const { return v_dnatEntryIdsHasBeenSet; }
            void setDnatEntryIds(const std::vector<std::string> &s_dnatEntryIds ) {
                v_dnatEntryIds = s_dnatEntryIds;
                v_dnatEntryIdsHasBeenSet = true;
            }
            const std::string &getDnatEntryName()const { return  v_dnatEntryName; }
            bool DnatEntryNameHasBeenSet() const { return v_dnatEntryNameHasBeenSet; }
            void setDnatEntryName(const std::string &s_dnatEntryName ) {
                v_dnatEntryName = s_dnatEntryName;
                v_dnatEntryNameHasBeenSet = true;
            }
            const std::string &getExternalIp()const { return  v_externalIp; }
            bool ExternalIpHasBeenSet() const { return v_externalIpHasBeenSet; }
            void setExternalIp(const std::string &s_externalIp ) {
                v_externalIp = s_externalIp;
                v_externalIpHasBeenSet = true;
            }
            const std::string &getExternalPort()const { return  v_externalPort; }
            bool ExternalPortHasBeenSet() const { return v_externalPortHasBeenSet; }
            void setExternalPort(const std::string &s_externalPort ) {
                v_externalPort = s_externalPort;
                v_externalPortHasBeenSet = true;
            }
            const std::string &getInternalIp()const { return  v_internalIp; }
            bool InternalIpHasBeenSet() const { return v_internalIpHasBeenSet; }
            void setInternalIp(const std::string &s_internalIp ) {
                v_internalIp = s_internalIp;
                v_internalIpHasBeenSet = true;
            }
            const std::string &getInternalPort()const { return  v_internalPort; }
            bool InternalPortHasBeenSet() const { return v_internalPortHasBeenSet; }
            void setInternalPort(const std::string &s_internalPort ) {
                v_internalPort = s_internalPort;
                v_internalPortHasBeenSet = true;
            }
            const std::string &getNatGatewayId()const { return  v_natGatewayId; }
            bool NatGatewayIdHasBeenSet() const { return v_natGatewayIdHasBeenSet; }
            void setNatGatewayId(const std::string &s_natGatewayId ) {
                v_natGatewayId = s_natGatewayId;
                v_natGatewayIdHasBeenSet = true;
            }
            int getPageNumber()const { return  v_pageNumber; }
            bool PageNumberHasBeenSet() const { return v_pageNumberHasBeenSet; }
            void setPageNumber(const int s_pageNumber ) {
                v_pageNumber = s_pageNumber;
                v_pageNumberHasBeenSet = true;
            }
            int getPageSize()const { return  v_pageSize; }
            bool PageSizeHasBeenSet() const { return v_pageSizeHasBeenSet; }
            void setPageSize(const int s_pageSize ) {
                v_pageSize = s_pageSize;
                v_pageSizeHasBeenSet = true;
            }
            const std::string &getProtocol()const { return  v_protocol; }
            bool ProtocolHasBeenSet() const { return v_protocolHasBeenSet; }
            void setProtocol(const std::string &s_protocol ) {
                v_protocol = s_protocol;
                v_protocolHasBeenSet = true;
            }
        private:
            std::vector<std::string> v_dnatEntryIds;
            bool v_dnatEntryIdsHasBeenSet;

            std::string v_dnatEntryName;
            bool v_dnatEntryNameHasBeenSet;

            std::string v_externalIp;
            bool v_externalIpHasBeenSet;

            std::string v_externalPort;
            bool v_externalPortHasBeenSet;

            std::string v_internalIp;
            bool v_internalIpHasBeenSet;

            std::string v_internalPort;
            bool v_internalPortHasBeenSet;

            std::string v_natGatewayId;
            bool v_natGatewayIdHasBeenSet;

            int v_pageNumber;
            bool v_pageNumberHasBeenSet;

            int v_pageSize;
            bool v_pageSizeHasBeenSet;

            std::string v_protocol;
            bool v_protocolHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_NATGATEWAY_DESCRIBEDNATENTRIESREQUEST_H