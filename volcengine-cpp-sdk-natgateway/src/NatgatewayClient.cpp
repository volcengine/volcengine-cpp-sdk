/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#pragma once
#include <volcengine/core/VolcengineClient.h>
#include "volcengine/natgateway/NatgatewayClient.h"

using namespace volcengine;
using namespace volcengine::natgateway;

NatgatewayClient::NatgatewayClient(const std::shared_ptr<VolcengineClientConfig> &config) {
    client_ = std::make_shared<VolcengineClient>(config);
}


ResultData<VolcengineMetadata, CreateDnatEntryResult> NatgatewayClient::CreateDnatEntry(const CreateDnatEntryRequest &input) const{
    ResultData<VolcengineMetadata, CreateDnatEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateDnatEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateNatGatewayResult> NatgatewayClient::CreateNatGateway(const CreateNatGatewayRequest &input) const{
    ResultData<VolcengineMetadata, CreateNatGatewayResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateNatGatewayResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateSnatEntryResult> NatgatewayClient::CreateSnatEntry(const CreateSnatEntryRequest &input) const{
    ResultData<VolcengineMetadata, CreateSnatEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateSnatEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteDnatEntryResult> NatgatewayClient::DeleteDnatEntry(const DeleteDnatEntryRequest &input) const{
    ResultData<VolcengineMetadata, DeleteDnatEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteDnatEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteNatGatewayResult> NatgatewayClient::DeleteNatGateway(const DeleteNatGatewayRequest &input) const{
    ResultData<VolcengineMetadata, DeleteNatGatewayResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteNatGatewayResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteSnatEntryResult> NatgatewayClient::DeleteSnatEntry(const DeleteSnatEntryRequest &input) const{
    ResultData<VolcengineMetadata, DeleteSnatEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteSnatEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeDnatEntriesResult> NatgatewayClient::DescribeDnatEntries(const DescribeDnatEntriesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeDnatEntriesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeDnatEntriesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeDnatEntryAttributesResult> NatgatewayClient::DescribeDnatEntryAttributes(const DescribeDnatEntryAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeDnatEntryAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeDnatEntryAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeNatGatewayAttributesResult> NatgatewayClient::DescribeNatGatewayAttributes(const DescribeNatGatewayAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeNatGatewayAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeNatGatewayAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeNatGatewaysResult> NatgatewayClient::DescribeNatGateways(const DescribeNatGatewaysRequest &input) const{
    ResultData<VolcengineMetadata, DescribeNatGatewaysResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeNatGatewaysResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeSnatEntriesResult> NatgatewayClient::DescribeSnatEntries(const DescribeSnatEntriesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeSnatEntriesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeSnatEntriesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeSnatEntryAttributesResult> NatgatewayClient::DescribeSnatEntryAttributes(const DescribeSnatEntryAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeSnatEntryAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeSnatEntryAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ListNatGatewayAvailableZonesResult> NatgatewayClient::ListNatGatewayAvailableZones(const ListNatGatewayAvailableZonesRequest &input) const{
    ResultData<VolcengineMetadata, ListNatGatewayAvailableZonesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ListNatGatewayAvailableZonesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyDnatEntryAttributesResult> NatgatewayClient::ModifyDnatEntryAttributes(const ModifyDnatEntryAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyDnatEntryAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyDnatEntryAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyNatGatewayAttributesResult> NatgatewayClient::ModifyNatGatewayAttributes(const ModifyNatGatewayAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyNatGatewayAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyNatGatewayAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifySnatEntryAttributesResult> NatgatewayClient::ModifySnatEntryAttributes(const ModifySnatEntryAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifySnatEntryAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifySnatEntryAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}
