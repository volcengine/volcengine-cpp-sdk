/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_DESCRIBEINSTANCESREQUEST_H
#define VOLCENGINE_ECS_DESCRIBEINSTANCESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/ecs/model/TagFilterForDescribeInstancesInput.h"

namespace volcengine{
    namespace ecs{
        class DescribeInstancesRequest {
        public:
            DescribeInstancesRequest();
            ~DescribeInstancesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::vector<std::string> &getDeploymentSetIds()const { return  v_deploymentSetIds; }
            bool DeploymentSetIdsHasBeenSet() const { return v_deploymentSetIdsHasBeenSet; }
            void setDeploymentSetIds(const std::vector<std::string> &s_deploymentSetIds ) {
                v_deploymentSetIds = s_deploymentSetIds;
                v_deploymentSetIdsHasBeenSet = true;
            }
            const std::string &getHpcClusterId()const { return  v_hpcClusterId; }
            bool HpcClusterIdHasBeenSet() const { return v_hpcClusterIdHasBeenSet; }
            void setHpcClusterId(const std::string &s_hpcClusterId ) {
                v_hpcClusterId = s_hpcClusterId;
                v_hpcClusterIdHasBeenSet = true;
            }
            const std::string &getInstanceChargeType()const { return  v_instanceChargeType; }
            bool InstanceChargeTypeHasBeenSet() const { return v_instanceChargeTypeHasBeenSet; }
            void setInstanceChargeType(const std::string &s_instanceChargeType ) {
                v_instanceChargeType = s_instanceChargeType;
                v_instanceChargeTypeHasBeenSet = true;
            }
            const std::vector<std::string> &getInstanceIds()const { return  v_instanceIds; }
            bool InstanceIdsHasBeenSet() const { return v_instanceIdsHasBeenSet; }
            void setInstanceIds(const std::vector<std::string> &s_instanceIds ) {
                v_instanceIds = s_instanceIds;
                v_instanceIdsHasBeenSet = true;
            }
            const std::string &getInstanceName()const { return  v_instanceName; }
            bool InstanceNameHasBeenSet() const { return v_instanceNameHasBeenSet; }
            void setInstanceName(const std::string &s_instanceName ) {
                v_instanceName = s_instanceName;
                v_instanceNameHasBeenSet = true;
            }
            const std::vector<std::string> &getInstanceTypeFamilies()const { return  v_instanceTypeFamilies; }
            bool InstanceTypeFamiliesHasBeenSet() const { return v_instanceTypeFamiliesHasBeenSet; }
            void setInstanceTypeFamilies(const std::vector<std::string> &s_instanceTypeFamilies ) {
                v_instanceTypeFamilies = s_instanceTypeFamilies;
                v_instanceTypeFamiliesHasBeenSet = true;
            }
            const std::vector<std::string> &getInstanceTypeIds()const { return  v_instanceTypeIds; }
            bool InstanceTypeIdsHasBeenSet() const { return v_instanceTypeIdsHasBeenSet; }
            void setInstanceTypeIds(const std::vector<std::string> &s_instanceTypeIds ) {
                v_instanceTypeIds = s_instanceTypeIds;
                v_instanceTypeIdsHasBeenSet = true;
            }
            const std::vector<std::string> &getInstanceTypes()const { return  v_instanceTypes; }
            bool InstanceTypesHasBeenSet() const { return v_instanceTypesHasBeenSet; }
            void setInstanceTypes(const std::vector<std::string> &s_instanceTypes ) {
                v_instanceTypes = s_instanceTypes;
                v_instanceTypesHasBeenSet = true;
            }
            const std::string &getKeyPairName()const { return  v_keyPairName; }
            bool KeyPairNameHasBeenSet() const { return v_keyPairNameHasBeenSet; }
            void setKeyPairName(const std::string &s_keyPairName ) {
                v_keyPairName = s_keyPairName;
                v_keyPairNameHasBeenSet = true;
            }
            int getMaxResults()const { return  v_maxResults; }
            bool MaxResultsHasBeenSet() const { return v_maxResultsHasBeenSet; }
            void setMaxResults(const int s_maxResults ) {
                v_maxResults = s_maxResults;
                v_maxResultsHasBeenSet = true;
            }
            const std::string &getNextToken()const { return  v_nextToken; }
            bool NextTokenHasBeenSet() const { return v_nextTokenHasBeenSet; }
            void setNextToken(const std::string &s_nextToken ) {
                v_nextToken = s_nextToken;
                v_nextTokenHasBeenSet = true;
            }
            const std::string &getPrimaryIpAddress()const { return  v_primaryIpAddress; }
            bool PrimaryIpAddressHasBeenSet() const { return v_primaryIpAddressHasBeenSet; }
            void setPrimaryIpAddress(const std::string &s_primaryIpAddress ) {
                v_primaryIpAddress = s_primaryIpAddress;
                v_primaryIpAddressHasBeenSet = true;
            }
            const std::string &getProjectName()const { return  v_projectName; }
            bool ProjectNameHasBeenSet() const { return v_projectNameHasBeenSet; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
                v_projectNameHasBeenSet = true;
            }
            const std::string &getStatus()const { return  v_status; }
            bool StatusHasBeenSet() const { return v_statusHasBeenSet; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
                v_statusHasBeenSet = true;
            }
            const std::vector<TagFilterForDescribeInstancesInput> &getTagFilters()const { return  v_tagFilters; }
            bool TagFiltersHasBeenSet() const { return v_tagFiltersHasBeenSet; }
            void setTagFilters(const std::vector<TagFilterForDescribeInstancesInput> &s_tagFilters ) {
                v_tagFilters = s_tagFilters;
                v_tagFiltersHasBeenSet = true;
            }
            const std::string &getVpcId()const { return  v_vpcId; }
            bool VpcIdHasBeenSet() const { return v_vpcIdHasBeenSet; }
            void setVpcId(const std::string &s_vpcId ) {
                v_vpcId = s_vpcId;
                v_vpcIdHasBeenSet = true;
            }
            const std::string &getZoneId()const { return  v_zoneId; }
            bool ZoneIdHasBeenSet() const { return v_zoneIdHasBeenSet; }
            void setZoneId(const std::string &s_zoneId ) {
                v_zoneId = s_zoneId;
                v_zoneIdHasBeenSet = true;
            }
        private:
            std::vector<std::string> v_deploymentSetIds;
            bool v_deploymentSetIdsHasBeenSet;

            std::string v_hpcClusterId;
            bool v_hpcClusterIdHasBeenSet;

            std::string v_instanceChargeType;
            bool v_instanceChargeTypeHasBeenSet;

            std::vector<std::string> v_instanceIds;
            bool v_instanceIdsHasBeenSet;

            std::string v_instanceName;
            bool v_instanceNameHasBeenSet;

            std::vector<std::string> v_instanceTypeFamilies;
            bool v_instanceTypeFamiliesHasBeenSet;

            std::vector<std::string> v_instanceTypeIds;
            bool v_instanceTypeIdsHasBeenSet;

            std::vector<std::string> v_instanceTypes;
            bool v_instanceTypesHasBeenSet;

            std::string v_keyPairName;
            bool v_keyPairNameHasBeenSet;

            int v_maxResults;
            bool v_maxResultsHasBeenSet;

            std::string v_nextToken;
            bool v_nextTokenHasBeenSet;

            std::string v_primaryIpAddress;
            bool v_primaryIpAddressHasBeenSet;

            std::string v_projectName;
            bool v_projectNameHasBeenSet;

            std::string v_status;
            bool v_statusHasBeenSet;

            std::vector<TagFilterForDescribeInstancesInput> v_tagFilters;
            bool v_tagFiltersHasBeenSet;

            std::string v_vpcId;
            bool v_vpcIdHasBeenSet;

            std::string v_zoneId;
            bool v_zoneIdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_DESCRIBEINSTANCESREQUEST_H