/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_RUNINSTANCESREQUEST_H
#define VOLCENGINE_ECS_RUNINSTANCESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/ecs/model/NetworkInterfaceForRunInstancesInput.h"
#include "volcengine/ecs/model/TagForRunInstancesInput.h"
#include "volcengine/ecs/model/VolumeForRunInstancesInput.h"

namespace volcengine{
    namespace ecs{
        class RunInstancesRequest {
        public:
            RunInstancesRequest();
            ~RunInstancesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            bool isAutoRenew()const { return  v_autoRenew; }
            bool AutoRenewHasBeenSet() const { return v_autoRenewHasBeenSet; }
            void setAutoRenew(const bool s_autoRenew ) {
                v_autoRenew = s_autoRenew;
                v_autoRenewHasBeenSet = true;
            }
            int getAutoRenewPeriod()const { return  v_autoRenewPeriod; }
            bool AutoRenewPeriodHasBeenSet() const { return v_autoRenewPeriodHasBeenSet; }
            void setAutoRenewPeriod(const int s_autoRenewPeriod ) {
                v_autoRenewPeriod = s_autoRenewPeriod;
                v_autoRenewPeriodHasBeenSet = true;
            }
            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            int getCount()const { return  v_count; }
            bool CountHasBeenSet() const { return v_countHasBeenSet; }
            void setCount(const int s_count ) {
                v_count = s_count;
                v_countHasBeenSet = true;
            }
            const std::string &getCreditSpecification()const { return  v_creditSpecification; }
            bool CreditSpecificationHasBeenSet() const { return v_creditSpecificationHasBeenSet; }
            void setCreditSpecification(const std::string &s_creditSpecification ) {
                v_creditSpecification = s_creditSpecification;
                v_creditSpecificationHasBeenSet = true;
            }
            const std::string &getDeploymentSetId()const { return  v_deploymentSetId; }
            bool DeploymentSetIdHasBeenSet() const { return v_deploymentSetIdHasBeenSet; }
            void setDeploymentSetId(const std::string &s_deploymentSetId ) {
                v_deploymentSetId = s_deploymentSetId;
                v_deploymentSetIdHasBeenSet = true;
            }
            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            bool isDryRun()const { return  v_dryRun; }
            bool DryRunHasBeenSet() const { return v_dryRunHasBeenSet; }
            void setDryRun(const bool s_dryRun ) {
                v_dryRun = s_dryRun;
                v_dryRunHasBeenSet = true;
            }
            const std::string &getHostName()const { return  v_hostName; }
            bool HostNameHasBeenSet() const { return v_hostNameHasBeenSet; }
            void setHostName(const std::string &s_hostName ) {
                v_hostName = s_hostName;
                v_hostNameHasBeenSet = true;
            }
            const std::string &getHostname()const { return  v_hostname; }
            bool HostnameHasBeenSet() const { return v_hostnameHasBeenSet; }
            void setHostname(const std::string &s_hostname ) {
                v_hostname = s_hostname;
                v_hostnameHasBeenSet = true;
            }
            const std::string &getHpcClusterId()const { return  v_hpcClusterId; }
            bool HpcClusterIdHasBeenSet() const { return v_hpcClusterIdHasBeenSet; }
            void setHpcClusterId(const std::string &s_hpcClusterId ) {
                v_hpcClusterId = s_hpcClusterId;
                v_hpcClusterIdHasBeenSet = true;
            }
            const std::string &getImageId()const { return  v_imageId; }
            bool ImageIdHasBeenSet() const { return v_imageIdHasBeenSet; }
            void setImageId(const std::string &s_imageId ) {
                v_imageId = s_imageId;
                v_imageIdHasBeenSet = true;
            }
            const std::string &getInstanceChargeType()const { return  v_instanceChargeType; }
            bool InstanceChargeTypeHasBeenSet() const { return v_instanceChargeTypeHasBeenSet; }
            void setInstanceChargeType(const std::string &s_instanceChargeType ) {
                v_instanceChargeType = s_instanceChargeType;
                v_instanceChargeTypeHasBeenSet = true;
            }
            const std::string &getInstanceName()const { return  v_instanceName; }
            bool InstanceNameHasBeenSet() const { return v_instanceNameHasBeenSet; }
            void setInstanceName(const std::string &s_instanceName ) {
                v_instanceName = s_instanceName;
                v_instanceNameHasBeenSet = true;
            }
            const std::string &getInstanceType()const { return  v_instanceType; }
            bool InstanceTypeHasBeenSet() const { return v_instanceTypeHasBeenSet; }
            void setInstanceType(const std::string &s_instanceType ) {
                v_instanceType = s_instanceType;
                v_instanceTypeHasBeenSet = true;
            }
            const std::string &getInstanceTypeId()const { return  v_instanceTypeId; }
            bool InstanceTypeIdHasBeenSet() const { return v_instanceTypeIdHasBeenSet; }
            void setInstanceTypeId(const std::string &s_instanceTypeId ) {
                v_instanceTypeId = s_instanceTypeId;
                v_instanceTypeIdHasBeenSet = true;
            }
            bool isKeepImageCredential()const { return  v_keepImageCredential; }
            bool KeepImageCredentialHasBeenSet() const { return v_keepImageCredentialHasBeenSet; }
            void setKeepImageCredential(const bool s_keepImageCredential ) {
                v_keepImageCredential = s_keepImageCredential;
                v_keepImageCredentialHasBeenSet = true;
            }
            const std::string &getKeyPairName()const { return  v_keyPairName; }
            bool KeyPairNameHasBeenSet() const { return v_keyPairNameHasBeenSet; }
            void setKeyPairName(const std::string &s_keyPairName ) {
                v_keyPairName = s_keyPairName;
                v_keyPairNameHasBeenSet = true;
            }
            int getMinCount()const { return  v_minCount; }
            bool MinCountHasBeenSet() const { return v_minCountHasBeenSet; }
            void setMinCount(const int s_minCount ) {
                v_minCount = s_minCount;
                v_minCountHasBeenSet = true;
            }
            const std::vector<NetworkInterfaceForRunInstancesInput> &getNetworkInterfaces()const { return  v_networkInterfaces; }
            bool NetworkInterfacesHasBeenSet() const { return v_networkInterfacesHasBeenSet; }
            void setNetworkInterfaces(const std::vector<NetworkInterfaceForRunInstancesInput> &s_networkInterfaces ) {
                v_networkInterfaces = s_networkInterfaces;
                v_networkInterfacesHasBeenSet = true;
            }
            const std::string &getPassword()const { return  v_password; }
            bool PasswordHasBeenSet() const { return v_passwordHasBeenSet; }
            void setPassword(const std::string &s_password ) {
                v_password = s_password;
                v_passwordHasBeenSet = true;
            }
            int getPeriod()const { return  v_period; }
            bool PeriodHasBeenSet() const { return v_periodHasBeenSet; }
            void setPeriod(const int s_period ) {
                v_period = s_period;
                v_periodHasBeenSet = true;
            }
            const std::string &getPeriodUnit()const { return  v_periodUnit; }
            bool PeriodUnitHasBeenSet() const { return v_periodUnitHasBeenSet; }
            void setPeriodUnit(const std::string &s_periodUnit ) {
                v_periodUnit = s_periodUnit;
                v_periodUnitHasBeenSet = true;
            }
            const std::string &getProjectName()const { return  v_projectName; }
            bool ProjectNameHasBeenSet() const { return v_projectNameHasBeenSet; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
                v_projectNameHasBeenSet = true;
            }
            const std::string &getSecurityEnhancementStrategy()const { return  v_securityEnhancementStrategy; }
            bool SecurityEnhancementStrategyHasBeenSet() const { return v_securityEnhancementStrategyHasBeenSet; }
            void setSecurityEnhancementStrategy(const std::string &s_securityEnhancementStrategy ) {
                v_securityEnhancementStrategy = s_securityEnhancementStrategy;
                v_securityEnhancementStrategyHasBeenSet = true;
            }
            const std::string &getSpotStrategy()const { return  v_spotStrategy; }
            bool SpotStrategyHasBeenSet() const { return v_spotStrategyHasBeenSet; }
            void setSpotStrategy(const std::string &s_spotStrategy ) {
                v_spotStrategy = s_spotStrategy;
                v_spotStrategyHasBeenSet = true;
            }
            int getSuffixIndex()const { return  v_suffixIndex; }
            bool SuffixIndexHasBeenSet() const { return v_suffixIndexHasBeenSet; }
            void setSuffixIndex(const int s_suffixIndex ) {
                v_suffixIndex = s_suffixIndex;
                v_suffixIndexHasBeenSet = true;
            }
            const std::vector<TagForRunInstancesInput> &getTags()const { return  v_tags; }
            bool TagsHasBeenSet() const { return v_tagsHasBeenSet; }
            void setTags(const std::vector<TagForRunInstancesInput> &s_tags ) {
                v_tags = s_tags;
                v_tagsHasBeenSet = true;
            }
            bool isUniqueSuffix()const { return  v_uniqueSuffix; }
            bool UniqueSuffixHasBeenSet() const { return v_uniqueSuffixHasBeenSet; }
            void setUniqueSuffix(const bool s_uniqueSuffix ) {
                v_uniqueSuffix = s_uniqueSuffix;
                v_uniqueSuffixHasBeenSet = true;
            }
            const std::string &getUserData()const { return  v_userData; }
            bool UserDataHasBeenSet() const { return v_userDataHasBeenSet; }
            void setUserData(const std::string &s_userData ) {
                v_userData = s_userData;
                v_userDataHasBeenSet = true;
            }
            const std::vector<VolumeForRunInstancesInput> &getVolumes()const { return  v_volumes; }
            bool VolumesHasBeenSet() const { return v_volumesHasBeenSet; }
            void setVolumes(const std::vector<VolumeForRunInstancesInput> &s_volumes ) {
                v_volumes = s_volumes;
                v_volumesHasBeenSet = true;
            }
            const std::string &getZoneId()const { return  v_zoneId; }
            bool ZoneIdHasBeenSet() const { return v_zoneIdHasBeenSet; }
            void setZoneId(const std::string &s_zoneId ) {
                v_zoneId = s_zoneId;
                v_zoneIdHasBeenSet = true;
            }
        private:
            bool v_autoRenew;
            bool v_autoRenewHasBeenSet;

            int v_autoRenewPeriod;
            bool v_autoRenewPeriodHasBeenSet;

            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            int v_count;
            bool v_countHasBeenSet;

            std::string v_creditSpecification;
            bool v_creditSpecificationHasBeenSet;

            std::string v_deploymentSetId;
            bool v_deploymentSetIdHasBeenSet;

            std::string v_description;
            bool v_descriptionHasBeenSet;

            bool v_dryRun;
            bool v_dryRunHasBeenSet;

            std::string v_hostName;
            bool v_hostNameHasBeenSet;

            std::string v_hostname;
            bool v_hostnameHasBeenSet;

            std::string v_hpcClusterId;
            bool v_hpcClusterIdHasBeenSet;

            std::string v_imageId;
            bool v_imageIdHasBeenSet;

            std::string v_instanceChargeType;
            bool v_instanceChargeTypeHasBeenSet;

            std::string v_instanceName;
            bool v_instanceNameHasBeenSet;

            std::string v_instanceType;
            bool v_instanceTypeHasBeenSet;

            std::string v_instanceTypeId;
            bool v_instanceTypeIdHasBeenSet;

            bool v_keepImageCredential;
            bool v_keepImageCredentialHasBeenSet;

            std::string v_keyPairName;
            bool v_keyPairNameHasBeenSet;

            int v_minCount;
            bool v_minCountHasBeenSet;

            std::vector<NetworkInterfaceForRunInstancesInput> v_networkInterfaces;
            bool v_networkInterfacesHasBeenSet;

            std::string v_password;
            bool v_passwordHasBeenSet;

            int v_period;
            bool v_periodHasBeenSet;

            std::string v_periodUnit;
            bool v_periodUnitHasBeenSet;

            std::string v_projectName;
            bool v_projectNameHasBeenSet;

            std::string v_securityEnhancementStrategy;
            bool v_securityEnhancementStrategyHasBeenSet;

            std::string v_spotStrategy;
            bool v_spotStrategyHasBeenSet;

            int v_suffixIndex;
            bool v_suffixIndexHasBeenSet;

            std::vector<TagForRunInstancesInput> v_tags;
            bool v_tagsHasBeenSet;

            bool v_uniqueSuffix;
            bool v_uniqueSuffixHasBeenSet;

            std::string v_userData;
            bool v_userDataHasBeenSet;

            std::vector<VolumeForRunInstancesInput> v_volumes;
            bool v_volumesHasBeenSet;

            std::string v_zoneId;
            bool v_zoneIdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_RUNINSTANCESREQUEST_H