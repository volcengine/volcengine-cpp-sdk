/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_INSTANCEFORDESCRIBEINSTANCESOUTPUT_H
#define VOLCENGINE_ECS_INSTANCEFORDESCRIBEINSTANCESOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/ecs/model/CpuOptionsForDescribeInstancesOutput.h"
#include "volcengine/ecs/model/EipAddressForDescribeInstancesOutput.h"
#include "volcengine/ecs/model/LocalVolumeForDescribeInstancesOutput.h"
#include "volcengine/ecs/model/NetworkInterfaceForDescribeInstancesOutput.h"
#include "volcengine/ecs/model/TagForDescribeInstancesOutput.h"
namespace volcengine{
    namespace ecs{
        class InstanceForDescribeInstancesOutput {
        public:
            InstanceForDescribeInstancesOutput() = default;
            ~InstanceForDescribeInstancesOutput() = default;
            void fromJsonString(const std::string &input);
            const std::shared_ptr<CpuOptionsForDescribeInstancesOutput> &getCpuOptions() const { return  v_cpuOptions; }
            void setCpuOptions(const std::shared_ptr<CpuOptionsForDescribeInstancesOutput> &s_cpuOptions ) {
                v_cpuOptions = s_cpuOptions;
            }
            const int getCpus() const { return  v_cpus; }
            void setCpus(const int s_cpus ) {
                v_cpus = s_cpus;
            }
            const std::string &getCreatedAt() const { return  v_createdAt; }
            void setCreatedAt(const std::string &s_createdAt ) {
                v_createdAt = s_createdAt;
            }
            const std::string &getDeploymentSetId() const { return  v_deploymentSetId; }
            void setDeploymentSetId(const std::string &s_deploymentSetId ) {
                v_deploymentSetId = s_deploymentSetId;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::shared_ptr<EipAddressForDescribeInstancesOutput> &getEipAddress() const { return  v_eipAddress; }
            void setEipAddress(const std::shared_ptr<EipAddressForDescribeInstancesOutput> &s_eipAddress ) {
                v_eipAddress = s_eipAddress;
            }
            const std::string &getExpiredAt() const { return  v_expiredAt; }
            void setExpiredAt(const std::string &s_expiredAt ) {
                v_expiredAt = s_expiredAt;
            }
            const std::string &getHostName() const { return  v_hostName; }
            void setHostName(const std::string &s_hostName ) {
                v_hostName = s_hostName;
            }
            const std::string &getHostname() const { return  v_hostname; }
            void setHostname(const std::string &s_hostname ) {
                v_hostname = s_hostname;
            }
            const std::string &getImageId() const { return  v_imageId; }
            void setImageId(const std::string &s_imageId ) {
                v_imageId = s_imageId;
            }
            const std::string &getInstanceChargeType() const { return  v_instanceChargeType; }
            void setInstanceChargeType(const std::string &s_instanceChargeType ) {
                v_instanceChargeType = s_instanceChargeType;
            }
            const std::string &getInstanceId() const { return  v_instanceId; }
            void setInstanceId(const std::string &s_instanceId ) {
                v_instanceId = s_instanceId;
            }
            const std::string &getInstanceName() const { return  v_instanceName; }
            void setInstanceName(const std::string &s_instanceName ) {
                v_instanceName = s_instanceName;
            }
            const std::string &getInstanceTypeId() const { return  v_instanceTypeId; }
            void setInstanceTypeId(const std::string &s_instanceTypeId ) {
                v_instanceTypeId = s_instanceTypeId;
            }
            const std::string &getKeyPairId() const { return  v_keyPairId; }
            void setKeyPairId(const std::string &s_keyPairId ) {
                v_keyPairId = s_keyPairId;
            }
            const std::string &getKeyPairName() const { return  v_keyPairName; }
            void setKeyPairName(const std::string &s_keyPairName ) {
                v_keyPairName = s_keyPairName;
            }
            const std::vector<LocalVolumeForDescribeInstancesOutput> &getLocalVolumes() const { return  v_localVolumes; }
            void setLocalVolumes(const std::vector<LocalVolumeForDescribeInstancesOutput> &s_localVolumes ) {
                v_localVolumes = s_localVolumes;
            }
            const int getMemorySize() const { return  v_memorySize; }
            void setMemorySize(const int s_memorySize ) {
                v_memorySize = s_memorySize;
            }
            const std::vector<NetworkInterfaceForDescribeInstancesOutput> &getNetworkInterfaces() const { return  v_networkInterfaces; }
            void setNetworkInterfaces(const std::vector<NetworkInterfaceForDescribeInstancesOutput> &s_networkInterfaces ) {
                v_networkInterfaces = s_networkInterfaces;
            }
            const std::string &getOsName() const { return  v_osName; }
            void setOsName(const std::string &s_osName ) {
                v_osName = s_osName;
            }
            const std::string &getOsType() const { return  v_osType; }
            void setOsType(const std::string &s_osType ) {
                v_osType = s_osType;
            }
            const std::string &getProjectName() const { return  v_projectName; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
            }
            const std::vector<std::string> &getRdmaIpAddresses() const { return  v_rdmaIpAddresses; }
            void setRdmaIpAddresses(const std::vector<std::string> &s_rdmaIpAddresses ) {
                v_rdmaIpAddresses = s_rdmaIpAddresses;
            }
            const std::string &getSpotStrategy() const { return  v_spotStrategy; }
            void setSpotStrategy(const std::string &s_spotStrategy ) {
                v_spotStrategy = s_spotStrategy;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::string &getStoppedMode() const { return  v_stoppedMode; }
            void setStoppedMode(const std::string &s_stoppedMode ) {
                v_stoppedMode = s_stoppedMode;
            }
            const std::vector<TagForDescribeInstancesOutput> &getTags() const { return  v_tags; }
            void setTags(const std::vector<TagForDescribeInstancesOutput> &s_tags ) {
                v_tags = s_tags;
            }
            const std::string &getUpdatedAt() const { return  v_updatedAt; }
            void setUpdatedAt(const std::string &s_updatedAt ) {
                v_updatedAt = s_updatedAt;
            }
            const std::string &getUuid() const { return  v_uuid; }
            void setUuid(const std::string &s_uuid ) {
                v_uuid = s_uuid;
            }
            const std::string &getVpcId() const { return  v_vpcId; }
            void setVpcId(const std::string &s_vpcId ) {
                v_vpcId = s_vpcId;
            }
            const std::string &getZoneId() const { return  v_zoneId; }
            void setZoneId(const std::string &s_zoneId ) {
                v_zoneId = s_zoneId;
            }
        private:
            std::shared_ptr<CpuOptionsForDescribeInstancesOutput> v_cpuOptions;
            int v_cpus{};
            std::string v_createdAt;
            std::string v_deploymentSetId;
            std::string v_description;
            std::shared_ptr<EipAddressForDescribeInstancesOutput> v_eipAddress;
            std::string v_expiredAt;
            std::string v_hostName;
            std::string v_hostname;
            std::string v_imageId;
            std::string v_instanceChargeType;
            std::string v_instanceId;
            std::string v_instanceName;
            std::string v_instanceTypeId;
            std::string v_keyPairId;
            std::string v_keyPairName;
            std::vector<LocalVolumeForDescribeInstancesOutput> v_localVolumes;
            int v_memorySize{};
            std::vector<NetworkInterfaceForDescribeInstancesOutput> v_networkInterfaces;
            std::string v_osName;
            std::string v_osType;
            std::string v_projectName;
            std::vector<std::string> v_rdmaIpAddresses;
            std::string v_spotStrategy;
            std::string v_status;
            std::string v_stoppedMode;
            std::vector<TagForDescribeInstancesOutput> v_tags;
            std::string v_updatedAt;
            std::string v_uuid;
            std::string v_vpcId;
            std::string v_zoneId;
        };
    }
}
#endif // !VOLCENGINE_ECS_INSTANCEFORDESCRIBEINSTANCESOUTPUT_H