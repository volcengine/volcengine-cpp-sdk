/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_DESCRIBESPOTADVICEREQUEST_H
#define VOLCENGINE_ECS_DESCRIBESPOTADVICEREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/ecs/model/GpuForDescribeSpotAdviceInput.h"

namespace volcengine{
    namespace ecs{
        class DescribeSpotAdviceRequest {
        public:
            DescribeSpotAdviceRequest();
            ~DescribeSpotAdviceRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            int getCpus()const { return  v_cpus; }
            bool CpusHasBeenSet() const { return v_cpusHasBeenSet; }
            void setCpus(const int s_cpus ) {
                v_cpus = s_cpus;
                v_cpusHasBeenSet = true;
            }
            const std::shared_ptr<GpuForDescribeSpotAdviceInput> &getGpu()const { return  v_gpu; }
            bool GpuHasBeenSet() const { return v_gpuHasBeenSet; }
            void setGpu(const std::shared_ptr<GpuForDescribeSpotAdviceInput> &s_gpu ) {
                v_gpu = s_gpu;
                v_gpuHasBeenSet = true;
            }
            const std::string &getInstanceTypeFamily()const { return  v_instanceTypeFamily; }
            bool InstanceTypeFamilyHasBeenSet() const { return v_instanceTypeFamilyHasBeenSet; }
            void setInstanceTypeFamily(const std::string &s_instanceTypeFamily ) {
                v_instanceTypeFamily = s_instanceTypeFamily;
                v_instanceTypeFamilyHasBeenSet = true;
            }
            const std::vector<std::string> &getInstanceTypeIds()const { return  v_instanceTypeIds; }
            bool InstanceTypeIdsHasBeenSet() const { return v_instanceTypeIdsHasBeenSet; }
            void setInstanceTypeIds(const std::vector<std::string> &s_instanceTypeIds ) {
                v_instanceTypeIds = s_instanceTypeIds;
                v_instanceTypeIdsHasBeenSet = true;
            }
            int getMaxResults()const { return  v_maxResults; }
            bool MaxResultsHasBeenSet() const { return v_maxResultsHasBeenSet; }
            void setMaxResults(const int s_maxResults ) {
                v_maxResults = s_maxResults;
                v_maxResultsHasBeenSet = true;
            }
            int getMemorySize()const { return  v_memorySize; }
            bool MemorySizeHasBeenSet() const { return v_memorySizeHasBeenSet; }
            void setMemorySize(const int s_memorySize ) {
                v_memorySize = s_memorySize;
                v_memorySizeHasBeenSet = true;
            }
            int getMinCpus()const { return  v_minCpus; }
            bool MinCpusHasBeenSet() const { return v_minCpusHasBeenSet; }
            void setMinCpus(const int s_minCpus ) {
                v_minCpus = s_minCpus;
                v_minCpusHasBeenSet = true;
            }
            int getMinMemorySize()const { return  v_minMemorySize; }
            bool MinMemorySizeHasBeenSet() const { return v_minMemorySizeHasBeenSet; }
            void setMinMemorySize(const int s_minMemorySize ) {
                v_minMemorySize = s_minMemorySize;
                v_minMemorySizeHasBeenSet = true;
            }
            const std::string &getNextToken()const { return  v_nextToken; }
            bool NextTokenHasBeenSet() const { return v_nextTokenHasBeenSet; }
            void setNextToken(const std::string &s_nextToken ) {
                v_nextToken = s_nextToken;
                v_nextTokenHasBeenSet = true;
            }
        private:
            int v_cpus;
            bool v_cpusHasBeenSet;

            std::shared_ptr<GpuForDescribeSpotAdviceInput> v_gpu;
            bool v_gpuHasBeenSet;

            std::string v_instanceTypeFamily;
            bool v_instanceTypeFamilyHasBeenSet;

            std::vector<std::string> v_instanceTypeIds;
            bool v_instanceTypeIdsHasBeenSet;

            int v_maxResults;
            bool v_maxResultsHasBeenSet;

            int v_memorySize;
            bool v_memorySizeHasBeenSet;

            int v_minCpus;
            bool v_minCpusHasBeenSet;

            int v_minMemorySize;
            bool v_minMemorySizeHasBeenSet;

            std::string v_nextToken;
            bool v_nextTokenHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_DESCRIBESPOTADVICEREQUEST_H