/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_DESCRIBESUBSCRIPTIONSREQUEST_H
#define VOLCENGINE_ECS_DESCRIBESUBSCRIPTIONSREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace ecs{
        class DescribeSubscriptionsRequest {
        public:
            DescribeSubscriptionsRequest();
            ~DescribeSubscriptionsRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getMaxResults()const { return  v_maxResults; }
            bool MaxResultsHasBeenSet() const { return v_maxResultsHasBeenSet; }
            void setMaxResults(const std::string &s_maxResults ) {
                v_maxResults = s_maxResults;
                v_maxResultsHasBeenSet = true;
            }
            const std::string &getNextToken()const { return  v_nextToken; }
            bool NextTokenHasBeenSet() const { return v_nextTokenHasBeenSet; }
            void setNextToken(const std::string &s_nextToken ) {
                v_nextToken = s_nextToken;
                v_nextTokenHasBeenSet = true;
            }
            const std::vector<std::string> &getSubscriptionIds()const { return  v_subscriptionIds; }
            bool SubscriptionIdsHasBeenSet() const { return v_subscriptionIdsHasBeenSet; }
            void setSubscriptionIds(const std::vector<std::string> &s_subscriptionIds ) {
                v_subscriptionIds = s_subscriptionIds;
                v_subscriptionIdsHasBeenSet = true;
            }
            const std::string &getType()const { return  v_type; }
            bool TypeHasBeenSet() const { return v_typeHasBeenSet; }
            void setType(const std::string &s_type ) {
                v_type = s_type;
                v_typeHasBeenSet = true;
            }
        private:
            std::string v_maxResults;
            bool v_maxResultsHasBeenSet;

            std::string v_nextToken;
            bool v_nextTokenHasBeenSet;

            std::vector<std::string> v_subscriptionIds;
            bool v_subscriptionIdsHasBeenSet;

            std::string v_type;
            bool v_typeHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_DESCRIBESUBSCRIPTIONSREQUEST_H