/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_DESCRIBEIMAGESREQUEST_H
#define VOLCENGINE_ECS_DESCRIBEIMAGESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/ecs/model/TagFilterForDescribeImagesInput.h"

namespace volcengine{
    namespace ecs{
        class DescribeImagesRequest {
        public:
            DescribeImagesRequest();
            ~DescribeImagesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::vector<std::string> &getImageIds()const { return  v_imageIds; }
            bool ImageIdsHasBeenSet() const { return v_imageIdsHasBeenSet; }
            void setImageIds(const std::vector<std::string> &s_imageIds ) {
                v_imageIds = s_imageIds;
                v_imageIdsHasBeenSet = true;
            }
            const std::string &getImageStatus()const { return  v_imageStatus; }
            bool ImageStatusHasBeenSet() const { return v_imageStatusHasBeenSet; }
            void setImageStatus(const std::string &s_imageStatus ) {
                v_imageStatus = s_imageStatus;
                v_imageStatusHasBeenSet = true;
            }
            const std::string &getInstanceTypeId()const { return  v_instanceTypeId; }
            bool InstanceTypeIdHasBeenSet() const { return v_instanceTypeIdHasBeenSet; }
            void setInstanceTypeId(const std::string &s_instanceTypeId ) {
                v_instanceTypeId = s_instanceTypeId;
                v_instanceTypeIdHasBeenSet = true;
            }
            bool isIsSupportCloudInit()const { return  v_isSupportCloudInit; }
            bool IsSupportCloudInitHasBeenSet() const { return v_isSupportCloudInitHasBeenSet; }
            void setIsSupportCloudInit(const bool s_isSupportCloudInit ) {
                v_isSupportCloudInit = s_isSupportCloudInit;
                v_isSupportCloudInitHasBeenSet = true;
            }
            int getMaxResults()const { return  v_maxResults; }
            bool MaxResultsHasBeenSet() const { return v_maxResultsHasBeenSet; }
            void setMaxResults(const int s_maxResults ) {
                v_maxResults = s_maxResults;
                v_maxResultsHasBeenSet = true;
            }
            const std::string &getNextToken()const { return  v_nextToken; }
            bool NextTokenHasBeenSet() const { return v_nextTokenHasBeenSet; }
            void setNextToken(const std::string &s_nextToken ) {
                v_nextToken = s_nextToken;
                v_nextTokenHasBeenSet = true;
            }
            const std::string &getOsType()const { return  v_osType; }
            bool OsTypeHasBeenSet() const { return v_osTypeHasBeenSet; }
            void setOsType(const std::string &s_osType ) {
                v_osType = s_osType;
                v_osTypeHasBeenSet = true;
            }
            const std::string &getProjectName()const { return  v_projectName; }
            bool ProjectNameHasBeenSet() const { return v_projectNameHasBeenSet; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
                v_projectNameHasBeenSet = true;
            }
            const std::vector<std::string> &getStatus()const { return  v_status; }
            bool StatusHasBeenSet() const { return v_statusHasBeenSet; }
            void setStatus(const std::vector<std::string> &s_status ) {
                v_status = s_status;
                v_statusHasBeenSet = true;
            }
            const std::vector<TagFilterForDescribeImagesInput> &getTagFilters()const { return  v_tagFilters; }
            bool TagFiltersHasBeenSet() const { return v_tagFiltersHasBeenSet; }
            void setTagFilters(const std::vector<TagFilterForDescribeImagesInput> &s_tagFilters ) {
                v_tagFilters = s_tagFilters;
                v_tagFiltersHasBeenSet = true;
            }
            const std::string &getVisibility()const { return  v_visibility; }
            bool VisibilityHasBeenSet() const { return v_visibilityHasBeenSet; }
            void setVisibility(const std::string &s_visibility ) {
                v_visibility = s_visibility;
                v_visibilityHasBeenSet = true;
            }
        private:
            std::vector<std::string> v_imageIds;
            bool v_imageIdsHasBeenSet;

            std::string v_imageStatus;
            bool v_imageStatusHasBeenSet;

            std::string v_instanceTypeId;
            bool v_instanceTypeIdHasBeenSet;

            bool v_isSupportCloudInit;
            bool v_isSupportCloudInitHasBeenSet;

            int v_maxResults;
            bool v_maxResultsHasBeenSet;

            std::string v_nextToken;
            bool v_nextTokenHasBeenSet;

            std::string v_osType;
            bool v_osTypeHasBeenSet;

            std::string v_projectName;
            bool v_projectNameHasBeenSet;

            std::vector<std::string> v_status;
            bool v_statusHasBeenSet;

            std::vector<TagFilterForDescribeImagesInput> v_tagFilters;
            bool v_tagFiltersHasBeenSet;

            std::string v_visibility;
            bool v_visibilityHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_DESCRIBEIMAGESREQUEST_H