/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_DESCRIBESYSTEMEVENTSREQUEST_H
#define VOLCENGINE_ECS_DESCRIBESYSTEMEVENTSREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace ecs{
        class DescribeSystemEventsRequest {
        public:
            DescribeSystemEventsRequest();
            ~DescribeSystemEventsRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getCreatedAtEnd()const { return  v_createdAtEnd; }
            bool CreatedAtEndHasBeenSet() const { return v_createdAtEndHasBeenSet; }
            void setCreatedAtEnd(const std::string &s_createdAtEnd ) {
                v_createdAtEnd = s_createdAtEnd;
                v_createdAtEndHasBeenSet = true;
            }
            const std::string &getCreatedAtStart()const { return  v_createdAtStart; }
            bool CreatedAtStartHasBeenSet() const { return v_createdAtStartHasBeenSet; }
            void setCreatedAtStart(const std::string &s_createdAtStart ) {
                v_createdAtStart = s_createdAtStart;
                v_createdAtStartHasBeenSet = true;
            }
            const std::vector<std::string> &getEventIds()const { return  v_eventIds; }
            bool EventIdsHasBeenSet() const { return v_eventIdsHasBeenSet; }
            void setEventIds(const std::vector<std::string> &s_eventIds ) {
                v_eventIds = s_eventIds;
                v_eventIdsHasBeenSet = true;
            }
            const std::string &getMaxResults()const { return  v_maxResults; }
            bool MaxResultsHasBeenSet() const { return v_maxResultsHasBeenSet; }
            void setMaxResults(const std::string &s_maxResults ) {
                v_maxResults = s_maxResults;
                v_maxResultsHasBeenSet = true;
            }
            const std::string &getNextToken()const { return  v_nextToken; }
            bool NextTokenHasBeenSet() const { return v_nextTokenHasBeenSet; }
            void setNextToken(const std::string &s_nextToken ) {
                v_nextToken = s_nextToken;
                v_nextTokenHasBeenSet = true;
            }
            const std::vector<std::string> &getResourceIds()const { return  v_resourceIds; }
            bool ResourceIdsHasBeenSet() const { return v_resourceIdsHasBeenSet; }
            void setResourceIds(const std::vector<std::string> &s_resourceIds ) {
                v_resourceIds = s_resourceIds;
                v_resourceIdsHasBeenSet = true;
            }
            const std::vector<std::string> &getStatus()const { return  v_status; }
            bool StatusHasBeenSet() const { return v_statusHasBeenSet; }
            void setStatus(const std::vector<std::string> &s_status ) {
                v_status = s_status;
                v_statusHasBeenSet = true;
            }
            const std::vector<std::string> &getTypes()const { return  v_types; }
            bool TypesHasBeenSet() const { return v_typesHasBeenSet; }
            void setTypes(const std::vector<std::string> &s_types ) {
                v_types = s_types;
                v_typesHasBeenSet = true;
            }
        private:
            std::string v_createdAtEnd;
            bool v_createdAtEndHasBeenSet;

            std::string v_createdAtStart;
            bool v_createdAtStartHasBeenSet;

            std::vector<std::string> v_eventIds;
            bool v_eventIdsHasBeenSet;

            std::string v_maxResults;
            bool v_maxResultsHasBeenSet;

            std::string v_nextToken;
            bool v_nextTokenHasBeenSet;

            std::vector<std::string> v_resourceIds;
            bool v_resourceIdsHasBeenSet;

            std::vector<std::string> v_status;
            bool v_statusHasBeenSet;

            std::vector<std::string> v_types;
            bool v_typesHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_DESCRIBESYSTEMEVENTSREQUEST_H