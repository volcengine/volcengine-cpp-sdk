/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_VOLUMEFORRUNINSTANCESINPUT_H
#define VOLCENGINE_ECS_VOLUMEFORRUNINSTANCESINPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace ecs{
        class VolumeForRunInstancesInput {
        public:
            VolumeForRunInstancesInput();
            ~VolumeForRunInstancesInput() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getDeleteWithInstance()const { return  v_deleteWithInstance; }
            bool DeleteWithInstanceHasBeenSet() const { return v_deleteWithInstanceHasBeenSet; }
            void setDeleteWithInstance(const std::string &s_deleteWithInstance ) {
                v_deleteWithInstance = s_deleteWithInstance;
                v_deleteWithInstanceHasBeenSet = true;
            }
            int getSize()const { return  v_size; }
            bool SizeHasBeenSet() const { return v_sizeHasBeenSet; }
            void setSize(const int s_size ) {
                v_size = s_size;
                v_sizeHasBeenSet = true;
            }
            const std::string &getVolumeType()const { return  v_volumeType; }
            bool VolumeTypeHasBeenSet() const { return v_volumeTypeHasBeenSet; }
            void setVolumeType(const std::string &s_volumeType ) {
                v_volumeType = s_volumeType;
                v_volumeTypeHasBeenSet = true;
            }
        private:
            std::string v_deleteWithInstance;
            bool v_deleteWithInstanceHasBeenSet;

            int v_size;
            bool v_sizeHasBeenSet;

            std::string v_volumeType;
            bool v_volumeTypeHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_VOLUMEFORRUNINSTANCESINPUT_H