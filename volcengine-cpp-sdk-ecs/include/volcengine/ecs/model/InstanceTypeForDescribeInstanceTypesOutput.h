/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_INSTANCETYPEFORDESCRIBEINSTANCETYPESOUTPUT_H
#define VOLCENGINE_ECS_INSTANCETYPEFORDESCRIBEINSTANCETYPESOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/ecs/model/GpuForDescribeInstanceTypesOutput.h"
#include "volcengine/ecs/model/LocalVolumeForDescribeInstanceTypesOutput.h"
#include "volcengine/ecs/model/MemoryForDescribeInstanceTypesOutput.h"
#include "volcengine/ecs/model/NetworkForDescribeInstanceTypesOutput.h"
#include "volcengine/ecs/model/ProcessorForDescribeInstanceTypesOutput.h"
#include "volcengine/ecs/model/RdmaForDescribeInstanceTypesOutput.h"
#include "volcengine/ecs/model/VolumeForDescribeInstanceTypesOutput.h"
namespace volcengine{
    namespace ecs{
        class InstanceTypeForDescribeInstanceTypesOutput {
        public:
            InstanceTypeForDescribeInstanceTypesOutput() = default;
            ~InstanceTypeForDescribeInstanceTypesOutput() = default;
            void fromJsonString(const std::string &input);
            const int getBaselineCredit() const { return  v_baselineCredit; }
            void setBaselineCredit(const int s_baselineCredit ) {
                v_baselineCredit = s_baselineCredit;
            }
            const std::shared_ptr<GpuForDescribeInstanceTypesOutput> &getGpu() const { return  v_gpu; }
            void setGpu(const std::shared_ptr<GpuForDescribeInstanceTypesOutput> &s_gpu ) {
                v_gpu = s_gpu;
            }
            const int getInitialCredit() const { return  v_initialCredit; }
            void setInitialCredit(const int s_initialCredit ) {
                v_initialCredit = s_initialCredit;
            }
            const std::string &getInstanceTypeFamily() const { return  v_instanceTypeFamily; }
            void setInstanceTypeFamily(const std::string &s_instanceTypeFamily ) {
                v_instanceTypeFamily = s_instanceTypeFamily;
            }
            const std::string &getInstanceTypeId() const { return  v_instanceTypeId; }
            void setInstanceTypeId(const std::string &s_instanceTypeId ) {
                v_instanceTypeId = s_instanceTypeId;
            }
            const std::vector<LocalVolumeForDescribeInstanceTypesOutput> &getLocalVolumes() const { return  v_localVolumes; }
            void setLocalVolumes(const std::vector<LocalVolumeForDescribeInstanceTypesOutput> &s_localVolumes ) {
                v_localVolumes = s_localVolumes;
            }
            const std::shared_ptr<MemoryForDescribeInstanceTypesOutput> &getMemory() const { return  v_memory; }
            void setMemory(const std::shared_ptr<MemoryForDescribeInstanceTypesOutput> &s_memory ) {
                v_memory = s_memory;
            }
            const std::shared_ptr<NetworkForDescribeInstanceTypesOutput> &getNetwork() const { return  v_network; }
            void setNetwork(const std::shared_ptr<NetworkForDescribeInstanceTypesOutput> &s_network ) {
                v_network = s_network;
            }
            const std::shared_ptr<ProcessorForDescribeInstanceTypesOutput> &getProcessor() const { return  v_processor; }
            void setProcessor(const std::shared_ptr<ProcessorForDescribeInstanceTypesOutput> &s_processor ) {
                v_processor = s_processor;
            }
            const std::shared_ptr<RdmaForDescribeInstanceTypesOutput> &getRdma() const { return  v_rdma; }
            void setRdma(const std::shared_ptr<RdmaForDescribeInstanceTypesOutput> &s_rdma ) {
                v_rdma = s_rdma;
            }
            const std::shared_ptr<VolumeForDescribeInstanceTypesOutput> &getVolume() const { return  v_volume; }
            void setVolume(const std::shared_ptr<VolumeForDescribeInstanceTypesOutput> &s_volume ) {
                v_volume = s_volume;
            }
        private:
            int v_baselineCredit{};
            std::shared_ptr<GpuForDescribeInstanceTypesOutput> v_gpu;
            int v_initialCredit{};
            std::string v_instanceTypeFamily;
            std::string v_instanceTypeId;
            std::vector<LocalVolumeForDescribeInstanceTypesOutput> v_localVolumes;
            std::shared_ptr<MemoryForDescribeInstanceTypesOutput> v_memory;
            std::shared_ptr<NetworkForDescribeInstanceTypesOutput> v_network;
            std::shared_ptr<ProcessorForDescribeInstanceTypesOutput> v_processor;
            std::shared_ptr<RdmaForDescribeInstanceTypesOutput> v_rdma;
            std::shared_ptr<VolumeForDescribeInstanceTypesOutput> v_volume;
        };
    }
}
#endif // !VOLCENGINE_ECS_INSTANCETYPEFORDESCRIBEINSTANCETYPESOUTPUT_H