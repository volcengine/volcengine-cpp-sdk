/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_ECS_REPLACESYSTEMVOLUMEREQUEST_H
#define VOLCENGINE_ECS_REPLACESYSTEMVOLUMEREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace ecs{
        class ReplaceSystemVolumeRequest {
        public:
            ReplaceSystemVolumeRequest();
            ~ReplaceSystemVolumeRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            bool isDryRun()const { return  v_dryRun; }
            bool DryRunHasBeenSet() const { return v_dryRunHasBeenSet; }
            void setDryRun(const bool s_dryRun ) {
                v_dryRun = s_dryRun;
                v_dryRunHasBeenSet = true;
            }
            const std::string &getImageId()const { return  v_imageId; }
            bool ImageIdHasBeenSet() const { return v_imageIdHasBeenSet; }
            void setImageId(const std::string &s_imageId ) {
                v_imageId = s_imageId;
                v_imageIdHasBeenSet = true;
            }
            const std::string &getInstanceId()const { return  v_instanceId; }
            bool InstanceIdHasBeenSet() const { return v_instanceIdHasBeenSet; }
            void setInstanceId(const std::string &s_instanceId ) {
                v_instanceId = s_instanceId;
                v_instanceIdHasBeenSet = true;
            }
            bool isKeepImageCredential()const { return  v_keepImageCredential; }
            bool KeepImageCredentialHasBeenSet() const { return v_keepImageCredentialHasBeenSet; }
            void setKeepImageCredential(const bool s_keepImageCredential ) {
                v_keepImageCredential = s_keepImageCredential;
                v_keepImageCredentialHasBeenSet = true;
            }
            const std::string &getKeyPairName()const { return  v_keyPairName; }
            bool KeyPairNameHasBeenSet() const { return v_keyPairNameHasBeenSet; }
            void setKeyPairName(const std::string &s_keyPairName ) {
                v_keyPairName = s_keyPairName;
                v_keyPairNameHasBeenSet = true;
            }
            const std::string &getPassword()const { return  v_password; }
            bool PasswordHasBeenSet() const { return v_passwordHasBeenSet; }
            void setPassword(const std::string &s_password ) {
                v_password = s_password;
                v_passwordHasBeenSet = true;
            }
            const std::string &getSize()const { return  v_size; }
            bool SizeHasBeenSet() const { return v_sizeHasBeenSet; }
            void setSize(const std::string &s_size ) {
                v_size = s_size;
                v_sizeHasBeenSet = true;
            }
            const std::string &getUserData()const { return  v_userData; }
            bool UserDataHasBeenSet() const { return v_userDataHasBeenSet; }
            void setUserData(const std::string &s_userData ) {
                v_userData = s_userData;
                v_userDataHasBeenSet = true;
            }
        private:
            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            bool v_dryRun;
            bool v_dryRunHasBeenSet;

            std::string v_imageId;
            bool v_imageIdHasBeenSet;

            std::string v_instanceId;
            bool v_instanceIdHasBeenSet;

            bool v_keepImageCredential;
            bool v_keepImageCredentialHasBeenSet;

            std::string v_keyPairName;
            bool v_keyPairNameHasBeenSet;

            std::string v_password;
            bool v_passwordHasBeenSet;

            std::string v_size;
            bool v_sizeHasBeenSet;

            std::string v_userData;
            bool v_userDataHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_ECS_REPLACESYSTEMVOLUMEREQUEST_H