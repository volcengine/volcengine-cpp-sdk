/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/ecs/model/InstanceForDescribeInstancesOutput.h"

using namespace volcengine;
using namespace volcengine::ecs;
using namespace nlohmann;

void InstanceForDescribeInstancesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("CpuOptions")){
        json cpuOptionsPres = j.at("CpuOptions");
        auto next = std::make_shared<CpuOptionsForDescribeInstancesOutput>();
        next->fromJsonString(to_string(cpuOptionsPres));
        v_cpuOptions = next;
    }
    if (j.contains("Cpus")) j.at("Cpus").get_to(v_cpus);
    if (j.contains("CreatedAt")) j.at("CreatedAt").get_to(v_createdAt);
    if (j.contains("DeploymentSetId")) j.at("DeploymentSetId").get_to(v_deploymentSetId);
    if (j.contains("Description")) j.at("Description").get_to(v_description);
    if (j.contains("EipAddress")){
        json eipAddressPres = j.at("EipAddress");
        auto next = std::make_shared<EipAddressForDescribeInstancesOutput>();
        next->fromJsonString(to_string(eipAddressPres));
        v_eipAddress = next;
    }
    if (j.contains("ExpiredAt")) j.at("ExpiredAt").get_to(v_expiredAt);
    if (j.contains("HostName")) j.at("HostName").get_to(v_hostName);
    if (j.contains("Hostname")) j.at("Hostname").get_to(v_hostname);
    if (j.contains("ImageId")) j.at("ImageId").get_to(v_imageId);
    if (j.contains("InstanceChargeType")) j.at("InstanceChargeType").get_to(v_instanceChargeType);
    if (j.contains("InstanceId")) j.at("InstanceId").get_to(v_instanceId);
    if (j.contains("InstanceName")) j.at("InstanceName").get_to(v_instanceName);
    if (j.contains("InstanceTypeId")) j.at("InstanceTypeId").get_to(v_instanceTypeId);
    if (j.contains("KeyPairId")) j.at("KeyPairId").get_to(v_keyPairId);
    if (j.contains("KeyPairName")) j.at("KeyPairName").get_to(v_keyPairName);
    if (j.contains("LocalVolumes")){
        json localVolumesPres = j.at("LocalVolumes");
        for (auto & pre : localVolumesPres) {
           LocalVolumeForDescribeInstancesOutput next;
           next.fromJsonString(to_string(pre));
           v_localVolumes.emplace_back(next);
        }
    }
    if (j.contains("MemorySize")) j.at("MemorySize").get_to(v_memorySize);
    if (j.contains("NetworkInterfaces")){
        json networkInterfacesPres = j.at("NetworkInterfaces");
        for (auto & pre : networkInterfacesPres) {
           NetworkInterfaceForDescribeInstancesOutput next;
           next.fromJsonString(to_string(pre));
           v_networkInterfaces.emplace_back(next);
        }
    }
    if (j.contains("OsName")) j.at("OsName").get_to(v_osName);
    if (j.contains("OsType")) j.at("OsType").get_to(v_osType);
    if (j.contains("ProjectName")) j.at("ProjectName").get_to(v_projectName);
    if (j.contains("RdmaIpAddresses")){
        json rdmaIpAddressesPres = j.at("RdmaIpAddresses");
        for (auto & pre : rdmaIpAddressesPres) {
           v_rdmaIpAddresses.emplace_back(pre);
        }
    }
    if (j.contains("SpotStrategy")) j.at("SpotStrategy").get_to(v_spotStrategy);
    if (j.contains("Status")) j.at("Status").get_to(v_status);
    if (j.contains("StoppedMode")) j.at("StoppedMode").get_to(v_stoppedMode);
    if (j.contains("Tags")){
        json tagsPres = j.at("Tags");
        for (auto & pre : tagsPres) {
           TagForDescribeInstancesOutput next;
           next.fromJsonString(to_string(pre));
           v_tags.emplace_back(next);
        }
    }
    if (j.contains("UpdatedAt")) j.at("UpdatedAt").get_to(v_updatedAt);
    if (j.contains("Uuid")) j.at("Uuid").get_to(v_uuid);
    if (j.contains("VpcId")) j.at("VpcId").get_to(v_vpcId);
    if (j.contains("ZoneId")) j.at("ZoneId").get_to(v_zoneId);
}
