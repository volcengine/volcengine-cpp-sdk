/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/ecs/model/DescribeInstancesRequest.h"

using namespace volcengine;
using namespace volcengine::ecs;
DescribeInstancesRequest::DescribeInstancesRequest(){
    v_maxResults = 0;
    v_maxResultsHasBeenSet = false;
}

RequestBuilder DescribeInstancesRequest::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {
    rb.withQuery("Action","DescribeInstances");
    rb.withQuery("Version","2020-04-01");

    if(v_deploymentSetIdsHasBeenSet){
      unsigned v_deploymentSetIdsCount = 1;
      for(auto& item : v_deploymentSetIds){
        std::stringstream ss;
        ss << chain << "DeploymentSetIds." << v_deploymentSetIdsCount;
        rb.withQuery(ss.str(), item);
        v_deploymentSetIdsCount ++;
      }
    }

    if(v_hpcClusterIdHasBeenSet){
        rb.withQuery(chain + "HpcClusterId", v_hpcClusterId);

    }

    if(v_instanceChargeTypeHasBeenSet){
        rb.withQuery(chain + "InstanceChargeType", v_instanceChargeType);

    }

    if(v_instanceIdsHasBeenSet){
      unsigned v_instanceIdsCount = 1;
      for(auto& item : v_instanceIds){
        std::stringstream ss;
        ss << chain << "InstanceIds." << v_instanceIdsCount;
        rb.withQuery(ss.str(), item);
        v_instanceIdsCount ++;
      }
    }

    if(v_instanceNameHasBeenSet){
        rb.withQuery(chain + "InstanceName", v_instanceName);

    }

    if(v_instanceTypeFamiliesHasBeenSet){
      unsigned v_instanceTypeFamiliesCount = 1;
      for(auto& item : v_instanceTypeFamilies){
        std::stringstream ss;
        ss << chain << "InstanceTypeFamilies." << v_instanceTypeFamiliesCount;
        rb.withQuery(ss.str(), item);
        v_instanceTypeFamiliesCount ++;
      }
    }

    if(v_instanceTypeIdsHasBeenSet){
      unsigned v_instanceTypeIdsCount = 1;
      for(auto& item : v_instanceTypeIds){
        std::stringstream ss;
        ss << chain << "InstanceTypeIds." << v_instanceTypeIdsCount;
        rb.withQuery(ss.str(), item);
        v_instanceTypeIdsCount ++;
      }
    }

    if(v_instanceTypesHasBeenSet){
      unsigned v_instanceTypesCount = 1;
      for(auto& item : v_instanceTypes){
        std::stringstream ss;
        ss << chain << "InstanceTypes." << v_instanceTypesCount;
        rb.withQuery(ss.str(), item);
        v_instanceTypesCount ++;
      }
    }

    if(v_keyPairNameHasBeenSet){
        rb.withQuery(chain + "KeyPairName", v_keyPairName);

    }

    if(v_maxResultsHasBeenSet){
        rb.withQuery(chain + "MaxResults", std::to_string(v_maxResults));

    }

    if(v_nextTokenHasBeenSet){
        rb.withQuery(chain + "NextToken", v_nextToken);

    }

    if(v_primaryIpAddressHasBeenSet){
        rb.withQuery(chain + "PrimaryIpAddress", v_primaryIpAddress);

    }

    if(v_projectNameHasBeenSet){
        rb.withQuery(chain + "ProjectName", v_projectName);

    }

    if(v_statusHasBeenSet){
        rb.withQuery(chain + "Status", v_status);

    }

    if(v_tagFiltersHasBeenSet){
      unsigned v_tagFiltersCount = 1;
      for(auto& item : v_tagFilters){
        std::stringstream ss;
        ss << chain << "TagFilters." << v_tagFiltersCount;
        rb = item.withRequestBuilder(rb, ss.str()+".");
        v_tagFiltersCount ++;
      }
    }

    if(v_vpcIdHasBeenSet){
        rb.withQuery(chain + "VpcId", v_vpcId);

    }

    if(v_zoneIdHasBeenSet){
        rb.withQuery(chain + "ZoneId", v_zoneId);

    }

    return rb;
}


