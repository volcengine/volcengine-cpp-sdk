/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/ecs/model/ModifyInstanceChargeTypeRequest.h"

using namespace volcengine;
using namespace volcengine::ecs;
ModifyInstanceChargeTypeRequest::ModifyInstanceChargeTypeRequest(){
    v_autoPay = false;
    v_autoPayHasBeenSet = false;
    v_includeDataVolumes = false;
    v_includeDataVolumesHasBeenSet = false;
    v_period = 0;
    v_periodHasBeenSet = false;
}

RequestBuilder ModifyInstanceChargeTypeRequest::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {
    rb.withQuery("Action","ModifyInstanceChargeType");
    rb.withQuery("Version","2020-04-01");

    if(v_autoPayHasBeenSet){
        rb.withQuery(chain + "AutoPay", std::to_string(v_autoPay));

    }

    if(v_clientTokenHasBeenSet){
        rb.withQuery(chain + "ClientToken", v_clientToken);

    }

    if(v_includeDataVolumesHasBeenSet){
        rb.withQuery(chain + "IncludeDataVolumes", std::to_string(v_includeDataVolumes));

    }

    if(v_instanceChargeTypeHasBeenSet){
        rb.withQuery(chain + "InstanceChargeType", v_instanceChargeType);

    }

    if(v_instanceIdsHasBeenSet){
      unsigned v_instanceIdsCount = 1;
      for(auto& item : v_instanceIds){
        std::stringstream ss;
        ss << chain << "InstanceIds." << v_instanceIdsCount;
        rb.withQuery(ss.str(), item);
        v_instanceIdsCount ++;
      }
    }

    if(v_periodHasBeenSet){
        rb.withQuery(chain + "Period", std::to_string(v_period));

    }

    if(v_periodUnitHasBeenSet){
        rb.withQuery(chain + "PeriodUnit", v_periodUnit);

    }

    return rb;
}


