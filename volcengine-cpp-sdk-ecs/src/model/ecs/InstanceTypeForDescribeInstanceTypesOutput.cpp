/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/ecs/model/InstanceTypeForDescribeInstanceTypesOutput.h"

using namespace volcengine;
using namespace volcengine::ecs;
using namespace nlohmann;

void InstanceTypeForDescribeInstanceTypesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("BaselineCredit")) j.at("BaselineCredit").get_to(v_baselineCredit);
    if (j.contains("Gpu")){
        json gpuPres = j.at("Gpu");
        auto next = std::make_shared<GpuForDescribeInstanceTypesOutput>();
        next->fromJsonString(to_string(gpuPres));
        v_gpu = next;
    }
    if (j.contains("InitialCredit")) j.at("InitialCredit").get_to(v_initialCredit);
    if (j.contains("InstanceTypeFamily")) j.at("InstanceTypeFamily").get_to(v_instanceTypeFamily);
    if (j.contains("InstanceTypeId")) j.at("InstanceTypeId").get_to(v_instanceTypeId);
    if (j.contains("LocalVolumes")){
        json localVolumesPres = j.at("LocalVolumes");
        for (auto & pre : localVolumesPres) {
           LocalVolumeForDescribeInstanceTypesOutput next;
           next.fromJsonString(to_string(pre));
           v_localVolumes.emplace_back(next);
        }
    }
    if (j.contains("Memory")){
        json memoryPres = j.at("Memory");
        auto next = std::make_shared<MemoryForDescribeInstanceTypesOutput>();
        next->fromJsonString(to_string(memoryPres));
        v_memory = next;
    }
    if (j.contains("Network")){
        json networkPres = j.at("Network");
        auto next = std::make_shared<NetworkForDescribeInstanceTypesOutput>();
        next->fromJsonString(to_string(networkPres));
        v_network = next;
    }
    if (j.contains("Processor")){
        json processorPres = j.at("Processor");
        auto next = std::make_shared<ProcessorForDescribeInstanceTypesOutput>();
        next->fromJsonString(to_string(processorPres));
        v_processor = next;
    }
    if (j.contains("Rdma")){
        json rdmaPres = j.at("Rdma");
        auto next = std::make_shared<RdmaForDescribeInstanceTypesOutput>();
        next->fromJsonString(to_string(rdmaPres));
        v_rdma = next;
    }
    if (j.contains("Volume")){
        json volumePres = j.at("Volume");
        auto next = std::make_shared<VolumeForDescribeInstanceTypesOutput>();
        next->fromJsonString(to_string(volumePres));
        v_volume = next;
    }
}
