/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/directconnect/model/DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput.h"

using namespace volcengine;
using namespace volcengine::directconnect;
using namespace nlohmann;

void DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("AccountId")) j.at("AccountId").get_to(v_accountId);
    if (j.contains("CreationTime")) j.at("CreationTime").get_to(v_creationTime);
    if (j.contains("DestinationCidrBlock")) j.at("DestinationCidrBlock").get_to(v_destinationCidrBlock);
    if (j.contains("DirectConnectGatewayId")) j.at("DirectConnectGatewayId").get_to(v_directConnectGatewayId);
    if (j.contains("DirectConnectGatewayRouteId")) j.at("DirectConnectGatewayRouteId").get_to(v_directConnectGatewayRouteId);
    if (j.contains("NextHopId")) j.at("NextHopId").get_to(v_nextHopId);
    if (j.contains("NextHopType")) j.at("NextHopType").get_to(v_nextHopType);
    if (j.contains("RouteType")) j.at("RouteType").get_to(v_routeType);
    if (j.contains("Status")) j.at("Status").get_to(v_status);
}
