/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/directconnect/model/CreateDirectConnectVirtualInterfaceRequest.h"

using namespace volcengine;
using namespace volcengine::directconnect;
CreateDirectConnectVirtualInterfaceRequest::CreateDirectConnectVirtualInterfaceRequest(){
    v_bandwidth = 0;
    v_bandwidthHasBeenSet = false;
    v_bfdDetectInterval = 0;
    v_bfdDetectIntervalHasBeenSet = false;
    v_bfdDetectMultiplier = 0;
    v_bfdDetectMultiplierHasBeenSet = false;
    v_enableBfd = false;
    v_enableBfdHasBeenSet = false;
    v_enableNqa = false;
    v_enableNqaHasBeenSet = false;
    v_nqaDetectInterval = 0;
    v_nqaDetectIntervalHasBeenSet = false;
    v_nqaDetectMultiplier = 0;
    v_nqaDetectMultiplierHasBeenSet = false;
    v_vlanId = 0;
    v_vlanIdHasBeenSet = false;
}

RequestBuilder CreateDirectConnectVirtualInterfaceRequest::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {
    rb.withQuery("Action","CreateDirectConnectVirtualInterface");
    rb.withQuery("Version","2020-04-01");

    if(v_bandwidthHasBeenSet){
        rb.withQuery(chain + "Bandwidth", std::to_string(v_bandwidth));

    }

    if(v_bfdDetectIntervalHasBeenSet){
        rb.withQuery(chain + "BfdDetectInterval", std::to_string(v_bfdDetectInterval));

    }

    if(v_bfdDetectMultiplierHasBeenSet){
        rb.withQuery(chain + "BfdDetectMultiplier", std::to_string(v_bfdDetectMultiplier));

    }

    if(v_descriptionHasBeenSet){
        rb.withQuery(chain + "Description", v_description);

    }

    if(v_directConnectConnectionIdHasBeenSet){
        rb.withQuery(chain + "DirectConnectConnectionId", v_directConnectConnectionId);

    }

    if(v_directConnectGatewayIdHasBeenSet){
        rb.withQuery(chain + "DirectConnectGatewayId", v_directConnectGatewayId);

    }

    if(v_enableBfdHasBeenSet){
        rb.withQuery(chain + "EnableBfd", std::to_string(v_enableBfd));

    }

    if(v_enableNqaHasBeenSet){
        rb.withQuery(chain + "EnableNqa", std::to_string(v_enableNqa));

    }

    if(v_localIpHasBeenSet){
        rb.withQuery(chain + "LocalIp", v_localIp);

    }

    if(v_nqaDetectIntervalHasBeenSet){
        rb.withQuery(chain + "NqaDetectInterval", std::to_string(v_nqaDetectInterval));

    }

    if(v_nqaDetectMultiplierHasBeenSet){
        rb.withQuery(chain + "NqaDetectMultiplier", std::to_string(v_nqaDetectMultiplier));

    }

    if(v_peerIpHasBeenSet){
        rb.withQuery(chain + "PeerIp", v_peerIp);

    }

    if(v_routeTypeHasBeenSet){
        rb.withQuery(chain + "RouteType", v_routeType);

    }

    if(v_tagsHasBeenSet){
      unsigned v_tagsCount = 1;
      for(auto& item : v_tags){
        std::stringstream ss;
        ss << chain << "Tags." << v_tagsCount;
        rb = item.withRequestBuilder(rb, ss.str()+".");
        v_tagsCount ++;
      }
    }

    if(v_virtualInterfaceNameHasBeenSet){
        rb.withQuery(chain + "VirtualInterfaceName", v_virtualInterfaceName);

    }

    if(v_vlanIdHasBeenSet){
        rb.withQuery(chain + "VlanId", std::to_string(v_vlanId));

    }

    return rb;
}


