/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/directconnect/model/DescribeDirectConnectConnectionAttributesResult.h"

using namespace volcengine;
using namespace volcengine::directconnect;
using namespace nlohmann;

void DescribeDirectConnectConnectionAttributesResult::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    j = j.at("Result");
    if (j.contains("AccountId")) j.at("AccountId").get_to(v_accountId);
    if (j.contains("Bandwidth")) j.at("Bandwidth").get_to(v_bandwidth);
    if (j.contains("BillingType")) j.at("BillingType").get_to(v_billingType);
    if (j.contains("BusinessStatus")) j.at("BusinessStatus").get_to(v_businessStatus);
    if (j.contains("ConnectionType")) j.at("ConnectionType").get_to(v_connectionType);
    if (j.contains("CreationTime")) j.at("CreationTime").get_to(v_creationTime);
    if (j.contains("CustomerContactEmail")) j.at("CustomerContactEmail").get_to(v_customerContactEmail);
    if (j.contains("CustomerContactPhone")) j.at("CustomerContactPhone").get_to(v_customerContactPhone);
    if (j.contains("CustomerName")) j.at("CustomerName").get_to(v_customerName);
    if (j.contains("DeletedTime")) j.at("DeletedTime").get_to(v_deletedTime);
    if (j.contains("Description")) j.at("Description").get_to(v_description);
    if (j.contains("DirectConnectAccessPointId")) j.at("DirectConnectAccessPointId").get_to(v_directConnectAccessPointId);
    if (j.contains("DirectConnectConnectionId")) j.at("DirectConnectConnectionId").get_to(v_directConnectConnectionId);
    if (j.contains("DirectConnectConnectionName")) j.at("DirectConnectConnectionName").get_to(v_directConnectConnectionName);
    if (j.contains("ExpectBandwidth")) j.at("ExpectBandwidth").get_to(v_expectBandwidth);
    if (j.contains("ExpiredTime")) j.at("ExpiredTime").get_to(v_expiredTime);
    if (j.contains("LineOperator")) j.at("LineOperator").get_to(v_lineOperator);
    if (j.contains("ParentConnectionAccountId")) j.at("ParentConnectionAccountId").get_to(v_parentConnectionAccountId);
    if (j.contains("ParentConnectionId")) j.at("ParentConnectionId").get_to(v_parentConnectionId);
    if (j.contains("PeerLocation")) j.at("PeerLocation").get_to(v_peerLocation);
    if (j.contains("PortSpec")) j.at("PortSpec").get_to(v_portSpec);
    if (j.contains("PortType")) j.at("PortType").get_to(v_portType);
    if (j.contains("RequestId")) j.at("RequestId").get_to(v_requestId);
    if (j.contains("Status")) j.at("Status").get_to(v_status);
    if (j.contains("Tags")){
        json tagsPres = j.at("Tags");
        for (auto & pre : tagsPres) {
           TagForDescribeDirectConnectConnectionAttributesOutput next;
           next.fromJsonString(to_string(pre));
           v_tags.emplace_back(next);
        }
    }
    if (j.contains("UpdateTime")) j.at("UpdateTime").get_to(v_updateTime);
    if (j.contains("VlanId")) j.at("VlanId").get_to(v_vlanId);
}
