/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTVIRTUALINTERFACESREQUEST_H
#define VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTVIRTUALINTERFACESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/directconnect/model/TagFilterForDescribeDirectConnectVirtualInterfacesInput.h"

namespace volcengine{
    namespace directconnect{
        class DescribeDirectConnectVirtualInterfacesRequest {
        public:
            DescribeDirectConnectVirtualInterfacesRequest();
            ~DescribeDirectConnectVirtualInterfacesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getDirectConnectConnectionId()const { return  v_directConnectConnectionId; }
            bool DirectConnectConnectionIdHasBeenSet() const { return v_directConnectConnectionIdHasBeenSet; }
            void setDirectConnectConnectionId(const std::string &s_directConnectConnectionId ) {
                v_directConnectConnectionId = s_directConnectConnectionId;
                v_directConnectConnectionIdHasBeenSet = true;
            }
            const std::string &getDirectConnectGatewayId()const { return  v_directConnectGatewayId; }
            bool DirectConnectGatewayIdHasBeenSet() const { return v_directConnectGatewayIdHasBeenSet; }
            void setDirectConnectGatewayId(const std::string &s_directConnectGatewayId ) {
                v_directConnectGatewayId = s_directConnectGatewayId;
                v_directConnectGatewayIdHasBeenSet = true;
            }
            const std::string &getLocalIp()const { return  v_localIp; }
            bool LocalIpHasBeenSet() const { return v_localIpHasBeenSet; }
            void setLocalIp(const std::string &s_localIp ) {
                v_localIp = s_localIp;
                v_localIpHasBeenSet = true;
            }
            int getPageNumber()const { return  v_pageNumber; }
            bool PageNumberHasBeenSet() const { return v_pageNumberHasBeenSet; }
            void setPageNumber(const int s_pageNumber ) {
                v_pageNumber = s_pageNumber;
                v_pageNumberHasBeenSet = true;
            }
            int getPageSize()const { return  v_pageSize; }
            bool PageSizeHasBeenSet() const { return v_pageSizeHasBeenSet; }
            void setPageSize(const int s_pageSize ) {
                v_pageSize = s_pageSize;
                v_pageSizeHasBeenSet = true;
            }
            const std::string &getPeerIp()const { return  v_peerIp; }
            bool PeerIpHasBeenSet() const { return v_peerIpHasBeenSet; }
            void setPeerIp(const std::string &s_peerIp ) {
                v_peerIp = s_peerIp;
                v_peerIpHasBeenSet = true;
            }
            const std::string &getRouteType()const { return  v_routeType; }
            bool RouteTypeHasBeenSet() const { return v_routeTypeHasBeenSet; }
            void setRouteType(const std::string &s_routeType ) {
                v_routeType = s_routeType;
                v_routeTypeHasBeenSet = true;
            }
            const std::string &getStatus()const { return  v_status; }
            bool StatusHasBeenSet() const { return v_statusHasBeenSet; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
                v_statusHasBeenSet = true;
            }
            const std::vector<TagFilterForDescribeDirectConnectVirtualInterfacesInput> &getTagFilters()const { return  v_tagFilters; }
            bool TagFiltersHasBeenSet() const { return v_tagFiltersHasBeenSet; }
            void setTagFilters(const std::vector<TagFilterForDescribeDirectConnectVirtualInterfacesInput> &s_tagFilters ) {
                v_tagFilters = s_tagFilters;
                v_tagFiltersHasBeenSet = true;
            }
            const std::vector<std::string> &getVirtualInterfaceIds()const { return  v_virtualInterfaceIds; }
            bool VirtualInterfaceIdsHasBeenSet() const { return v_virtualInterfaceIdsHasBeenSet; }
            void setVirtualInterfaceIds(const std::vector<std::string> &s_virtualInterfaceIds ) {
                v_virtualInterfaceIds = s_virtualInterfaceIds;
                v_virtualInterfaceIdsHasBeenSet = true;
            }
            const std::string &getVirtualInterfaceName()const { return  v_virtualInterfaceName; }
            bool VirtualInterfaceNameHasBeenSet() const { return v_virtualInterfaceNameHasBeenSet; }
            void setVirtualInterfaceName(const std::string &s_virtualInterfaceName ) {
                v_virtualInterfaceName = s_virtualInterfaceName;
                v_virtualInterfaceNameHasBeenSet = true;
            }
            int getVlanId()const { return  v_vlanId; }
            bool VlanIdHasBeenSet() const { return v_vlanIdHasBeenSet; }
            void setVlanId(const int s_vlanId ) {
                v_vlanId = s_vlanId;
                v_vlanIdHasBeenSet = true;
            }
        private:
            std::string v_directConnectConnectionId;
            bool v_directConnectConnectionIdHasBeenSet;

            std::string v_directConnectGatewayId;
            bool v_directConnectGatewayIdHasBeenSet;

            std::string v_localIp;
            bool v_localIpHasBeenSet;

            int v_pageNumber;
            bool v_pageNumberHasBeenSet;

            int v_pageSize;
            bool v_pageSizeHasBeenSet;

            std::string v_peerIp;
            bool v_peerIpHasBeenSet;

            std::string v_routeType;
            bool v_routeTypeHasBeenSet;

            std::string v_status;
            bool v_statusHasBeenSet;

            std::vector<TagFilterForDescribeDirectConnectVirtualInterfacesInput> v_tagFilters;
            bool v_tagFiltersHasBeenSet;

            std::vector<std::string> v_virtualInterfaceIds;
            bool v_virtualInterfaceIdsHasBeenSet;

            std::string v_virtualInterfaceName;
            bool v_virtualInterfaceNameHasBeenSet;

            int v_vlanId;
            bool v_vlanIdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTVIRTUALINTERFACESREQUEST_H