/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTCONNECTIONORDERREQUEST_H
#define VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTCONNECTIONORDERREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace directconnect{
        class CreateDirectConnectConnectionOrderRequest {
        public:
            CreateDirectConnectConnectionOrderRequest();
            ~CreateDirectConnectConnectionOrderRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            const std::string &getDirectConnectConnectionId()const { return  v_directConnectConnectionId; }
            bool DirectConnectConnectionIdHasBeenSet() const { return v_directConnectConnectionIdHasBeenSet; }
            void setDirectConnectConnectionId(const std::string &s_directConnectConnectionId ) {
                v_directConnectConnectionId = s_directConnectConnectionId;
                v_directConnectConnectionIdHasBeenSet = true;
            }
            int getPeriod()const { return  v_period; }
            bool PeriodHasBeenSet() const { return v_periodHasBeenSet; }
            void setPeriod(const int s_period ) {
                v_period = s_period;
                v_periodHasBeenSet = true;
            }
            const std::string &getPeriodUnit()const { return  v_periodUnit; }
            bool PeriodUnitHasBeenSet() const { return v_periodUnitHasBeenSet; }
            void setPeriodUnit(const std::string &s_periodUnit ) {
                v_periodUnit = s_periodUnit;
                v_periodUnitHasBeenSet = true;
            }
        private:
            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            std::string v_directConnectConnectionId;
            bool v_directConnectConnectionIdHasBeenSet;

            int v_period;
            bool v_periodHasBeenSet;

            std::string v_periodUnit;
            bool v_periodUnitHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTCONNECTIONORDERREQUEST_H