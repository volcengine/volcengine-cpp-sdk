/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_DESCRIBEBGPPEERATTRIBUTESRESULT_H
#define VOLCENGINE_DIRECTCONNECT_DESCRIBEBGPPEERATTRIBUTESRESULT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace directconnect{
        class DescribeBgpPeerAttributesResult {
        public:
            DescribeBgpPeerAttributesResult() = default;
            ~DescribeBgpPeerAttributesResult() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAccountId() const { return  v_accountId; }
            void setAccountId(const std::string &s_accountId ) {
                v_accountId = s_accountId;
            }
            const std::string &getAuthKey() const { return  v_authKey; }
            void setAuthKey(const std::string &s_authKey ) {
                v_authKey = s_authKey;
            }
            const std::string &getBgpPeerId() const { return  v_bgpPeerId; }
            void setBgpPeerId(const std::string &s_bgpPeerId ) {
                v_bgpPeerId = s_bgpPeerId;
            }
            const std::string &getBgpPeerName() const { return  v_bgpPeerName; }
            void setBgpPeerName(const std::string &s_bgpPeerName ) {
                v_bgpPeerName = s_bgpPeerName;
            }
            const std::string &getCreationTime() const { return  v_creationTime; }
            void setCreationTime(const std::string &s_creationTime ) {
                v_creationTime = s_creationTime;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const int getLocalAsn() const { return  v_localAsn; }
            void setLocalAsn(const int s_localAsn ) {
                v_localAsn = s_localAsn;
            }
            const int getRemoteAsn() const { return  v_remoteAsn; }
            void setRemoteAsn(const int s_remoteAsn ) {
                v_remoteAsn = s_remoteAsn;
            }
            const std::string &getRequestId() const { return  v_requestId; }
            void setRequestId(const std::string &s_requestId ) {
                v_requestId = s_requestId;
            }
            const std::string &getSessionStatus() const { return  v_sessionStatus; }
            void setSessionStatus(const std::string &s_sessionStatus ) {
                v_sessionStatus = s_sessionStatus;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::string &getUpdateTime() const { return  v_updateTime; }
            void setUpdateTime(const std::string &s_updateTime ) {
                v_updateTime = s_updateTime;
            }
            const std::string &getVirtualInterfaceId() const { return  v_virtualInterfaceId; }
            void setVirtualInterfaceId(const std::string &s_virtualInterfaceId ) {
                v_virtualInterfaceId = s_virtualInterfaceId;
            }
        private:
            std::string v_accountId;
            std::string v_authKey;
            std::string v_bgpPeerId;
            std::string v_bgpPeerName;
            std::string v_creationTime;
            std::string v_description;
            int v_localAsn{};
            int v_remoteAsn{};
            std::string v_requestId;
            std::string v_sessionStatus;
            std::string v_status;
            std::string v_updateTime;
            std::string v_virtualInterfaceId;
        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_DESCRIBEBGPPEERATTRIBUTESRESULT_H