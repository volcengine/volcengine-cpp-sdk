/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTVIRTUALINTERFACEATTRIBUTESRESULT_H
#define VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTVIRTUALINTERFACEATTRIBUTESRESULT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/directconnect/model/TagForDescribeDirectConnectVirtualInterfaceAttributesOutput.h"
namespace volcengine{
    namespace directconnect{
        class DescribeDirectConnectVirtualInterfaceAttributesResult {
        public:
            DescribeDirectConnectVirtualInterfaceAttributesResult() = default;
            ~DescribeDirectConnectVirtualInterfaceAttributesResult() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAccountId() const { return  v_accountId; }
            void setAccountId(const std::string &s_accountId ) {
                v_accountId = s_accountId;
            }
            const int getBandwidth() const { return  v_bandwidth; }
            void setBandwidth(const int s_bandwidth ) {
                v_bandwidth = s_bandwidth;
            }
            const int getBfdDetectInterval() const { return  v_bfdDetectInterval; }
            void setBfdDetectInterval(const int s_bfdDetectInterval ) {
                v_bfdDetectInterval = s_bfdDetectInterval;
            }
            const int getBfdDetectMultiplier() const { return  v_bfdDetectMultiplier; }
            void setBfdDetectMultiplier(const int s_bfdDetectMultiplier ) {
                v_bfdDetectMultiplier = s_bfdDetectMultiplier;
            }
            const std::string &getCreationTime() const { return  v_creationTime; }
            void setCreationTime(const std::string &s_creationTime ) {
                v_creationTime = s_creationTime;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::string &getDirectConnectConnectionId() const { return  v_directConnectConnectionId; }
            void setDirectConnectConnectionId(const std::string &s_directConnectConnectionId ) {
                v_directConnectConnectionId = s_directConnectConnectionId;
            }
            const std::string &getDirectConnectGatewayId() const { return  v_directConnectGatewayId; }
            void setDirectConnectGatewayId(const std::string &s_directConnectGatewayId ) {
                v_directConnectGatewayId = s_directConnectGatewayId;
            }
            const bool isEnableBfd() const { return  v_enableBfd; }
            void setEnableBfd(const bool s_enableBfd ) {
                v_enableBfd = s_enableBfd;
            }
            const bool isEnableNqa() const { return  v_enableNqa; }
            void setEnableNqa(const bool s_enableNqa ) {
                v_enableNqa = s_enableNqa;
            }
            const std::string &getLocalIp() const { return  v_localIp; }
            void setLocalIp(const std::string &s_localIp ) {
                v_localIp = s_localIp;
            }
            const int getNqaDetectInterval() const { return  v_nqaDetectInterval; }
            void setNqaDetectInterval(const int s_nqaDetectInterval ) {
                v_nqaDetectInterval = s_nqaDetectInterval;
            }
            const int getNqaDetectMultiplier() const { return  v_nqaDetectMultiplier; }
            void setNqaDetectMultiplier(const int s_nqaDetectMultiplier ) {
                v_nqaDetectMultiplier = s_nqaDetectMultiplier;
            }
            const std::string &getPeerIp() const { return  v_peerIp; }
            void setPeerIp(const std::string &s_peerIp ) {
                v_peerIp = s_peerIp;
            }
            const std::string &getRequestId() const { return  v_requestId; }
            void setRequestId(const std::string &s_requestId ) {
                v_requestId = s_requestId;
            }
            const std::string &getRouteType() const { return  v_routeType; }
            void setRouteType(const std::string &s_routeType ) {
                v_routeType = s_routeType;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::vector<TagForDescribeDirectConnectVirtualInterfaceAttributesOutput> &getTags() const { return  v_tags; }
            void setTags(const std::vector<TagForDescribeDirectConnectVirtualInterfaceAttributesOutput> &s_tags ) {
                v_tags = s_tags;
            }
            const std::string &getUpdateTime() const { return  v_updateTime; }
            void setUpdateTime(const std::string &s_updateTime ) {
                v_updateTime = s_updateTime;
            }
            const std::string &getVirtualInterfaceId() const { return  v_virtualInterfaceId; }
            void setVirtualInterfaceId(const std::string &s_virtualInterfaceId ) {
                v_virtualInterfaceId = s_virtualInterfaceId;
            }
            const std::string &getVirtualInterfaceName() const { return  v_virtualInterfaceName; }
            void setVirtualInterfaceName(const std::string &s_virtualInterfaceName ) {
                v_virtualInterfaceName = s_virtualInterfaceName;
            }
            const int getVlanId() const { return  v_vlanId; }
            void setVlanId(const int s_vlanId ) {
                v_vlanId = s_vlanId;
            }
        private:
            std::string v_accountId;
            int v_bandwidth{};
            int v_bfdDetectInterval{};
            int v_bfdDetectMultiplier{};
            std::string v_creationTime;
            std::string v_description;
            std::string v_directConnectConnectionId;
            std::string v_directConnectGatewayId;
            bool v_enableBfd{};
            bool v_enableNqa{};
            std::string v_localIp;
            int v_nqaDetectInterval{};
            int v_nqaDetectMultiplier{};
            std::string v_peerIp;
            std::string v_requestId;
            std::string v_routeType;
            std::string v_status;
            std::vector<TagForDescribeDirectConnectVirtualInterfaceAttributesOutput> v_tags;
            std::string v_updateTime;
            std::string v_virtualInterfaceId;
            std::string v_virtualInterfaceName;
            int v_vlanId{};
        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTVIRTUALINTERFACEATTRIBUTESRESULT_H