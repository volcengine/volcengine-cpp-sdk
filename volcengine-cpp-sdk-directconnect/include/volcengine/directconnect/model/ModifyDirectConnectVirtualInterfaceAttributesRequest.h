/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_MODIFYDIRECTCONNECTVIRTUALINTERFACEATTRIBUTESREQUEST_H
#define VOLCENGINE_DIRECTCONNECT_MODIFYDIRECTCONNECTVIRTUALINTERFACEATTRIBUTESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace directconnect{
        class ModifyDirectConnectVirtualInterfaceAttributesRequest {
        public:
            ModifyDirectConnectVirtualInterfaceAttributesRequest();
            ~ModifyDirectConnectVirtualInterfaceAttributesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            int getBandwidth()const { return  v_bandwidth; }
            bool BandwidthHasBeenSet() const { return v_bandwidthHasBeenSet; }
            void setBandwidth(const int s_bandwidth ) {
                v_bandwidth = s_bandwidth;
                v_bandwidthHasBeenSet = true;
            }
            int getBfdDetectInterval()const { return  v_bfdDetectInterval; }
            bool BfdDetectIntervalHasBeenSet() const { return v_bfdDetectIntervalHasBeenSet; }
            void setBfdDetectInterval(const int s_bfdDetectInterval ) {
                v_bfdDetectInterval = s_bfdDetectInterval;
                v_bfdDetectIntervalHasBeenSet = true;
            }
            int getBfdDetectMultiplier()const { return  v_bfdDetectMultiplier; }
            bool BfdDetectMultiplierHasBeenSet() const { return v_bfdDetectMultiplierHasBeenSet; }
            void setBfdDetectMultiplier(const int s_bfdDetectMultiplier ) {
                v_bfdDetectMultiplier = s_bfdDetectMultiplier;
                v_bfdDetectMultiplierHasBeenSet = true;
            }
            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            bool isEnableBfd()const { return  v_enableBfd; }
            bool EnableBfdHasBeenSet() const { return v_enableBfdHasBeenSet; }
            void setEnableBfd(const bool s_enableBfd ) {
                v_enableBfd = s_enableBfd;
                v_enableBfdHasBeenSet = true;
            }
            bool isEnableNqa()const { return  v_enableNqa; }
            bool EnableNqaHasBeenSet() const { return v_enableNqaHasBeenSet; }
            void setEnableNqa(const bool s_enableNqa ) {
                v_enableNqa = s_enableNqa;
                v_enableNqaHasBeenSet = true;
            }
            int getNqaDetectInterval()const { return  v_nqaDetectInterval; }
            bool NqaDetectIntervalHasBeenSet() const { return v_nqaDetectIntervalHasBeenSet; }
            void setNqaDetectInterval(const int s_nqaDetectInterval ) {
                v_nqaDetectInterval = s_nqaDetectInterval;
                v_nqaDetectIntervalHasBeenSet = true;
            }
            int getNqaDetectMultiplier()const { return  v_nqaDetectMultiplier; }
            bool NqaDetectMultiplierHasBeenSet() const { return v_nqaDetectMultiplierHasBeenSet; }
            void setNqaDetectMultiplier(const int s_nqaDetectMultiplier ) {
                v_nqaDetectMultiplier = s_nqaDetectMultiplier;
                v_nqaDetectMultiplierHasBeenSet = true;
            }
            const std::string &getVirtualInterfaceId()const { return  v_virtualInterfaceId; }
            bool VirtualInterfaceIdHasBeenSet() const { return v_virtualInterfaceIdHasBeenSet; }
            void setVirtualInterfaceId(const std::string &s_virtualInterfaceId ) {
                v_virtualInterfaceId = s_virtualInterfaceId;
                v_virtualInterfaceIdHasBeenSet = true;
            }
            const std::string &getVirtualInterfaceName()const { return  v_virtualInterfaceName; }
            bool VirtualInterfaceNameHasBeenSet() const { return v_virtualInterfaceNameHasBeenSet; }
            void setVirtualInterfaceName(const std::string &s_virtualInterfaceName ) {
                v_virtualInterfaceName = s_virtualInterfaceName;
                v_virtualInterfaceNameHasBeenSet = true;
            }
        private:
            int v_bandwidth;
            bool v_bandwidthHasBeenSet;

            int v_bfdDetectInterval;
            bool v_bfdDetectIntervalHasBeenSet;

            int v_bfdDetectMultiplier;
            bool v_bfdDetectMultiplierHasBeenSet;

            std::string v_description;
            bool v_descriptionHasBeenSet;

            bool v_enableBfd;
            bool v_enableBfdHasBeenSet;

            bool v_enableNqa;
            bool v_enableNqaHasBeenSet;

            int v_nqaDetectInterval;
            bool v_nqaDetectIntervalHasBeenSet;

            int v_nqaDetectMultiplier;
            bool v_nqaDetectMultiplierHasBeenSet;

            std::string v_virtualInterfaceId;
            bool v_virtualInterfaceIdHasBeenSet;

            std::string v_virtualInterfaceName;
            bool v_virtualInterfaceNameHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_MODIFYDIRECTCONNECTVIRTUALINTERFACEATTRIBUTESREQUEST_H