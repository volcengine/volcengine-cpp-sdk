/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTGATEWAYREQUEST_H
#define VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTGATEWAYREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/directconnect/model/TagForCreateDirectConnectGatewayInput.h"

namespace volcengine{
    namespace directconnect{
        class CreateDirectConnectGatewayRequest {
        public:
            CreateDirectConnectGatewayRequest();
            ~CreateDirectConnectGatewayRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            const std::string &getDirectConnectGatewayName()const { return  v_directConnectGatewayName; }
            bool DirectConnectGatewayNameHasBeenSet() const { return v_directConnectGatewayNameHasBeenSet; }
            void setDirectConnectGatewayName(const std::string &s_directConnectGatewayName ) {
                v_directConnectGatewayName = s_directConnectGatewayName;
                v_directConnectGatewayNameHasBeenSet = true;
            }
            const std::vector<TagForCreateDirectConnectGatewayInput> &getTags()const { return  v_tags; }
            bool TagsHasBeenSet() const { return v_tagsHasBeenSet; }
            void setTags(const std::vector<TagForCreateDirectConnectGatewayInput> &s_tags ) {
                v_tags = s_tags;
                v_tagsHasBeenSet = true;
            }
        private:
            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            std::string v_description;
            bool v_descriptionHasBeenSet;

            std::string v_directConnectGatewayName;
            bool v_directConnectGatewayNameHasBeenSet;

            std::vector<TagForCreateDirectConnectGatewayInput> v_tags;
            bool v_tagsHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTGATEWAYREQUEST_H