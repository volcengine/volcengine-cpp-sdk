/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTCONNECTIONREQUEST_H
#define VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTCONNECTIONREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/directconnect/model/TagForCreateDirectConnectConnectionInput.h"

namespace volcengine{
    namespace directconnect{
        class CreateDirectConnectConnectionRequest {
        public:
            CreateDirectConnectConnectionRequest();
            ~CreateDirectConnectConnectionRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            int getBandwidth()const { return  v_bandwidth; }
            bool BandwidthHasBeenSet() const { return v_bandwidthHasBeenSet; }
            void setBandwidth(const int s_bandwidth ) {
                v_bandwidth = s_bandwidth;
                v_bandwidthHasBeenSet = true;
            }
            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            const std::string &getCustomerContactEmail()const { return  v_customerContactEmail; }
            bool CustomerContactEmailHasBeenSet() const { return v_customerContactEmailHasBeenSet; }
            void setCustomerContactEmail(const std::string &s_customerContactEmail ) {
                v_customerContactEmail = s_customerContactEmail;
                v_customerContactEmailHasBeenSet = true;
            }
            const std::string &getCustomerContactPhone()const { return  v_customerContactPhone; }
            bool CustomerContactPhoneHasBeenSet() const { return v_customerContactPhoneHasBeenSet; }
            void setCustomerContactPhone(const std::string &s_customerContactPhone ) {
                v_customerContactPhone = s_customerContactPhone;
                v_customerContactPhoneHasBeenSet = true;
            }
            const std::string &getCustomerName()const { return  v_customerName; }
            bool CustomerNameHasBeenSet() const { return v_customerNameHasBeenSet; }
            void setCustomerName(const std::string &s_customerName ) {
                v_customerName = s_customerName;
                v_customerNameHasBeenSet = true;
            }
            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            const std::string &getDirectConnectAccessPointId()const { return  v_directConnectAccessPointId; }
            bool DirectConnectAccessPointIdHasBeenSet() const { return v_directConnectAccessPointIdHasBeenSet; }
            void setDirectConnectAccessPointId(const std::string &s_directConnectAccessPointId ) {
                v_directConnectAccessPointId = s_directConnectAccessPointId;
                v_directConnectAccessPointIdHasBeenSet = true;
            }
            const std::string &getDirectConnectConnectionName()const { return  v_directConnectConnectionName; }
            bool DirectConnectConnectionNameHasBeenSet() const { return v_directConnectConnectionNameHasBeenSet; }
            void setDirectConnectConnectionName(const std::string &s_directConnectConnectionName ) {
                v_directConnectConnectionName = s_directConnectConnectionName;
                v_directConnectConnectionNameHasBeenSet = true;
            }
            const std::string &getLineOperator()const { return  v_lineOperator; }
            bool LineOperatorHasBeenSet() const { return v_lineOperatorHasBeenSet; }
            void setLineOperator(const std::string &s_lineOperator ) {
                v_lineOperator = s_lineOperator;
                v_lineOperatorHasBeenSet = true;
            }
            const std::string &getPeerLocation()const { return  v_peerLocation; }
            bool PeerLocationHasBeenSet() const { return v_peerLocationHasBeenSet; }
            void setPeerLocation(const std::string &s_peerLocation ) {
                v_peerLocation = s_peerLocation;
                v_peerLocationHasBeenSet = true;
            }
            const std::string &getPortSpec()const { return  v_portSpec; }
            bool PortSpecHasBeenSet() const { return v_portSpecHasBeenSet; }
            void setPortSpec(const std::string &s_portSpec ) {
                v_portSpec = s_portSpec;
                v_portSpecHasBeenSet = true;
            }
            const std::string &getPortType()const { return  v_portType; }
            bool PortTypeHasBeenSet() const { return v_portTypeHasBeenSet; }
            void setPortType(const std::string &s_portType ) {
                v_portType = s_portType;
                v_portTypeHasBeenSet = true;
            }
            const std::vector<TagForCreateDirectConnectConnectionInput> &getTags()const { return  v_tags; }
            bool TagsHasBeenSet() const { return v_tagsHasBeenSet; }
            void setTags(const std::vector<TagForCreateDirectConnectConnectionInput> &s_tags ) {
                v_tags = s_tags;
                v_tagsHasBeenSet = true;
            }
        private:
            int v_bandwidth;
            bool v_bandwidthHasBeenSet;

            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            std::string v_customerContactEmail;
            bool v_customerContactEmailHasBeenSet;

            std::string v_customerContactPhone;
            bool v_customerContactPhoneHasBeenSet;

            std::string v_customerName;
            bool v_customerNameHasBeenSet;

            std::string v_description;
            bool v_descriptionHasBeenSet;

            std::string v_directConnectAccessPointId;
            bool v_directConnectAccessPointIdHasBeenSet;

            std::string v_directConnectConnectionName;
            bool v_directConnectConnectionNameHasBeenSet;

            std::string v_lineOperator;
            bool v_lineOperatorHasBeenSet;

            std::string v_peerLocation;
            bool v_peerLocationHasBeenSet;

            std::string v_portSpec;
            bool v_portSpecHasBeenSet;

            std::string v_portType;
            bool v_portTypeHasBeenSet;

            std::vector<TagForCreateDirectConnectConnectionInput> v_tags;
            bool v_tagsHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_CREATEDIRECTCONNECTCONNECTIONREQUEST_H