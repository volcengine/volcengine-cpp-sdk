/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTCONNECTIONATTRIBUTESRESULT_H
#define VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTCONNECTIONATTRIBUTESRESULT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/directconnect/model/TagForDescribeDirectConnectConnectionAttributesOutput.h"
namespace volcengine{
    namespace directconnect{
        class DescribeDirectConnectConnectionAttributesResult {
        public:
            DescribeDirectConnectConnectionAttributesResult() = default;
            ~DescribeDirectConnectConnectionAttributesResult() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAccountId() const { return  v_accountId; }
            void setAccountId(const std::string &s_accountId ) {
                v_accountId = s_accountId;
            }
            const int getBandwidth() const { return  v_bandwidth; }
            void setBandwidth(const int s_bandwidth ) {
                v_bandwidth = s_bandwidth;
            }
            const int getBillingType() const { return  v_billingType; }
            void setBillingType(const int s_billingType ) {
                v_billingType = s_billingType;
            }
            const std::string &getBusinessStatus() const { return  v_businessStatus; }
            void setBusinessStatus(const std::string &s_businessStatus ) {
                v_businessStatus = s_businessStatus;
            }
            const std::string &getConnectionType() const { return  v_connectionType; }
            void setConnectionType(const std::string &s_connectionType ) {
                v_connectionType = s_connectionType;
            }
            const std::string &getCreationTime() const { return  v_creationTime; }
            void setCreationTime(const std::string &s_creationTime ) {
                v_creationTime = s_creationTime;
            }
            const std::string &getCustomerContactEmail() const { return  v_customerContactEmail; }
            void setCustomerContactEmail(const std::string &s_customerContactEmail ) {
                v_customerContactEmail = s_customerContactEmail;
            }
            const std::string &getCustomerContactPhone() const { return  v_customerContactPhone; }
            void setCustomerContactPhone(const std::string &s_customerContactPhone ) {
                v_customerContactPhone = s_customerContactPhone;
            }
            const std::string &getCustomerName() const { return  v_customerName; }
            void setCustomerName(const std::string &s_customerName ) {
                v_customerName = s_customerName;
            }
            const std::string &getDeletedTime() const { return  v_deletedTime; }
            void setDeletedTime(const std::string &s_deletedTime ) {
                v_deletedTime = s_deletedTime;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::string &getDirectConnectAccessPointId() const { return  v_directConnectAccessPointId; }
            void setDirectConnectAccessPointId(const std::string &s_directConnectAccessPointId ) {
                v_directConnectAccessPointId = s_directConnectAccessPointId;
            }
            const std::string &getDirectConnectConnectionId() const { return  v_directConnectConnectionId; }
            void setDirectConnectConnectionId(const std::string &s_directConnectConnectionId ) {
                v_directConnectConnectionId = s_directConnectConnectionId;
            }
            const std::string &getDirectConnectConnectionName() const { return  v_directConnectConnectionName; }
            void setDirectConnectConnectionName(const std::string &s_directConnectConnectionName ) {
                v_directConnectConnectionName = s_directConnectConnectionName;
            }
            const int getExpectBandwidth() const { return  v_expectBandwidth; }
            void setExpectBandwidth(const int s_expectBandwidth ) {
                v_expectBandwidth = s_expectBandwidth;
            }
            const std::string &getExpiredTime() const { return  v_expiredTime; }
            void setExpiredTime(const std::string &s_expiredTime ) {
                v_expiredTime = s_expiredTime;
            }
            const std::string &getLineOperator() const { return  v_lineOperator; }
            void setLineOperator(const std::string &s_lineOperator ) {
                v_lineOperator = s_lineOperator;
            }
            const std::string &getParentConnectionAccountId() const { return  v_parentConnectionAccountId; }
            void setParentConnectionAccountId(const std::string &s_parentConnectionAccountId ) {
                v_parentConnectionAccountId = s_parentConnectionAccountId;
            }
            const std::string &getParentConnectionId() const { return  v_parentConnectionId; }
            void setParentConnectionId(const std::string &s_parentConnectionId ) {
                v_parentConnectionId = s_parentConnectionId;
            }
            const std::string &getPeerLocation() const { return  v_peerLocation; }
            void setPeerLocation(const std::string &s_peerLocation ) {
                v_peerLocation = s_peerLocation;
            }
            const std::string &getPortSpec() const { return  v_portSpec; }
            void setPortSpec(const std::string &s_portSpec ) {
                v_portSpec = s_portSpec;
            }
            const std::string &getPortType() const { return  v_portType; }
            void setPortType(const std::string &s_portType ) {
                v_portType = s_portType;
            }
            const std::string &getRequestId() const { return  v_requestId; }
            void setRequestId(const std::string &s_requestId ) {
                v_requestId = s_requestId;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::vector<TagForDescribeDirectConnectConnectionAttributesOutput> &getTags() const { return  v_tags; }
            void setTags(const std::vector<TagForDescribeDirectConnectConnectionAttributesOutput> &s_tags ) {
                v_tags = s_tags;
            }
            const std::string &getUpdateTime() const { return  v_updateTime; }
            void setUpdateTime(const std::string &s_updateTime ) {
                v_updateTime = s_updateTime;
            }
            const int getVlanId() const { return  v_vlanId; }
            void setVlanId(const int s_vlanId ) {
                v_vlanId = s_vlanId;
            }
        private:
            std::string v_accountId;
            int v_bandwidth{};
            int v_billingType{};
            std::string v_businessStatus;
            std::string v_connectionType;
            std::string v_creationTime;
            std::string v_customerContactEmail;
            std::string v_customerContactPhone;
            std::string v_customerName;
            std::string v_deletedTime;
            std::string v_description;
            std::string v_directConnectAccessPointId;
            std::string v_directConnectConnectionId;
            std::string v_directConnectConnectionName;
            int v_expectBandwidth{};
            std::string v_expiredTime;
            std::string v_lineOperator;
            std::string v_parentConnectionAccountId;
            std::string v_parentConnectionId;
            std::string v_peerLocation;
            std::string v_portSpec;
            std::string v_portType;
            std::string v_requestId;
            std::string v_status;
            std::vector<TagForDescribeDirectConnectConnectionAttributesOutput> v_tags;
            std::string v_updateTime;
            int v_vlanId{};
        };
    }
}
#endif // !VOLCENGINE_DIRECTCONNECT_DESCRIBEDIRECTCONNECTCONNECTIONATTRIBUTESRESULT_H