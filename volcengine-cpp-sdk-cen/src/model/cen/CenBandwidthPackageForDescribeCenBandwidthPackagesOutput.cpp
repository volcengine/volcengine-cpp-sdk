/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/cen/model/CenBandwidthPackageForDescribeCenBandwidthPackagesOutput.h"

using namespace volcengine;
using namespace volcengine::cen;
using namespace nlohmann;

void CenBandwidthPackageForDescribeCenBandwidthPackagesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("AccountId")) j.at("AccountId").get_to(v_accountId);
    if (j.contains("Bandwidth")) j.at("Bandwidth").get_to(v_bandwidth);
    if (j.contains("BillingType")) j.at("BillingType").get_to(v_billingType);
    if (j.contains("CenBandwidthPackageId")) j.at("CenBandwidthPackageId").get_to(v_cenBandwidthPackageId);
    if (j.contains("CenBandwidthPackageName")) j.at("CenBandwidthPackageName").get_to(v_cenBandwidthPackageName);
    if (j.contains("CenIds")){
        json cenIdsPres = j.at("CenIds");
        for (auto & pre : cenIdsPres) {
           v_cenIds.emplace_back(pre);
        }
    }
    if (j.contains("CreationTime")) j.at("CreationTime").get_to(v_creationTime);
    if (j.contains("DeletedTime")) j.at("DeletedTime").get_to(v_deletedTime);
    if (j.contains("Description")) j.at("Description").get_to(v_description);
    if (j.contains("ExpiredTime")) j.at("ExpiredTime").get_to(v_expiredTime);
    if (j.contains("LocalGeographicRegionSetId")) j.at("LocalGeographicRegionSetId").get_to(v_localGeographicRegionSetId);
    if (j.contains("PeerGeographicRegionSetId")) j.at("PeerGeographicRegionSetId").get_to(v_peerGeographicRegionSetId);
    if (j.contains("ProjectName")) j.at("ProjectName").get_to(v_projectName);
    if (j.contains("RemainingBandwidth")) j.at("RemainingBandwidth").get_to(v_remainingBandwidth);
    if (j.contains("Status")) j.at("Status").get_to(v_status);
    if (j.contains("Tags")){
        json tagsPres = j.at("Tags");
        for (auto & pre : tagsPres) {
           TagForDescribeCenBandwidthPackagesOutput next;
           next.fromJsonString(to_string(pre));
           v_tags.emplace_back(next);
        }
    }
}
