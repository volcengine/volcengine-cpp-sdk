/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#pragma once
#include <volcengine/core/VolcengineClient.h>
#include "volcengine/cen/CenClient.h"

using namespace volcengine;
using namespace volcengine::cen;

CenClient::CenClient(const std::shared_ptr<VolcengineClientConfig> &config) {
    client_ = std::make_shared<VolcengineClient>(config);
}


ResultData<VolcengineMetadata, AssociateCenBandwidthPackageResult> CenClient::AssociateCenBandwidthPackage(const AssociateCenBandwidthPackageRequest &input) const{
    ResultData<VolcengineMetadata, AssociateCenBandwidthPackageResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssociateCenBandwidthPackageResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AttachInstanceToCenResult> CenClient::AttachInstanceToCen(const AttachInstanceToCenRequest &input) const{
    ResultData<VolcengineMetadata, AttachInstanceToCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AttachInstanceToCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateCenResult> CenClient::CreateCen(const CreateCenRequest &input) const{
    ResultData<VolcengineMetadata, CreateCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateCenBandwidthPackageResult> CenClient::CreateCenBandwidthPackage(const CreateCenBandwidthPackageRequest &input) const{
    ResultData<VolcengineMetadata, CreateCenBandwidthPackageResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateCenBandwidthPackageResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateCenInterRegionBandwidthResult> CenClient::CreateCenInterRegionBandwidth(const CreateCenInterRegionBandwidthRequest &input) const{
    ResultData<VolcengineMetadata, CreateCenInterRegionBandwidthResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateCenInterRegionBandwidthResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateCenServiceRouteEntryResult> CenClient::CreateCenServiceRouteEntry(const CreateCenServiceRouteEntryRequest &input) const{
    ResultData<VolcengineMetadata, CreateCenServiceRouteEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateCenServiceRouteEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateCenSummaryRouteEntryResult> CenClient::CreateCenSummaryRouteEntry(const CreateCenSummaryRouteEntryRequest &input) const{
    ResultData<VolcengineMetadata, CreateCenSummaryRouteEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateCenSummaryRouteEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteCenResult> CenClient::DeleteCen(const DeleteCenRequest &input) const{
    ResultData<VolcengineMetadata, DeleteCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteCenBandwidthPackageResult> CenClient::DeleteCenBandwidthPackage(const DeleteCenBandwidthPackageRequest &input) const{
    ResultData<VolcengineMetadata, DeleteCenBandwidthPackageResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteCenBandwidthPackageResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteCenInterRegionBandwidthResult> CenClient::DeleteCenInterRegionBandwidth(const DeleteCenInterRegionBandwidthRequest &input) const{
    ResultData<VolcengineMetadata, DeleteCenInterRegionBandwidthResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteCenInterRegionBandwidthResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteCenSummaryRouteEntryResult> CenClient::DeleteCenSummaryRouteEntry(const DeleteCenSummaryRouteEntryRequest &input) const{
    ResultData<VolcengineMetadata, DeleteCenSummaryRouteEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteCenSummaryRouteEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenAttachedInstanceAttributesResult> CenClient::DescribeCenAttachedInstanceAttributes(const DescribeCenAttachedInstanceAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenAttachedInstanceAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenAttachedInstanceAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenAttachedInstancesResult> CenClient::DescribeCenAttachedInstances(const DescribeCenAttachedInstancesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenAttachedInstancesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenAttachedInstancesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenAttributesResult> CenClient::DescribeCenAttributes(const DescribeCenAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenBandwidthPackageAttributesResult> CenClient::DescribeCenBandwidthPackageAttributes(const DescribeCenBandwidthPackageAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenBandwidthPackageAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenBandwidthPackageAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenBandwidthPackagesResult> CenClient::DescribeCenBandwidthPackages(const DescribeCenBandwidthPackagesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenBandwidthPackagesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenBandwidthPackagesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenInterRegionBandwidthAttributesResult> CenClient::DescribeCenInterRegionBandwidthAttributes(const DescribeCenInterRegionBandwidthAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenInterRegionBandwidthAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenInterRegionBandwidthAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenInterRegionBandwidthsResult> CenClient::DescribeCenInterRegionBandwidths(const DescribeCenInterRegionBandwidthsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenInterRegionBandwidthsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenInterRegionBandwidthsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenRouteEntriesResult> CenClient::DescribeCenRouteEntries(const DescribeCenRouteEntriesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenRouteEntriesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenRouteEntriesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCenSummaryRouteEntriesResult> CenClient::DescribeCenSummaryRouteEntries(const DescribeCenSummaryRouteEntriesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCenSummaryRouteEntriesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCenSummaryRouteEntriesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeCensResult> CenClient::DescribeCens(const DescribeCensRequest &input) const{
    ResultData<VolcengineMetadata, DescribeCensResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeCensResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeGrantRulesToCenResult> CenClient::DescribeGrantRulesToCen(const DescribeGrantRulesToCenRequest &input) const{
    ResultData<VolcengineMetadata, DescribeGrantRulesToCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeGrantRulesToCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeInstanceGrantedRulesResult> CenClient::DescribeInstanceGrantedRules(const DescribeInstanceGrantedRulesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeInstanceGrantedRulesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeInstanceGrantedRulesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DetachInstanceFromCenResult> CenClient::DetachInstanceFromCen(const DetachInstanceFromCenRequest &input) const{
    ResultData<VolcengineMetadata, DetachInstanceFromCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DetachInstanceFromCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DisassociateCenBandwidthPackageResult> CenClient::DisassociateCenBandwidthPackage(const DisassociateCenBandwidthPackageRequest &input) const{
    ResultData<VolcengineMetadata, DisassociateCenBandwidthPackageResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DisassociateCenBandwidthPackageResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, GrantInstanceToCenResult> CenClient::GrantInstanceToCen(const GrantInstanceToCenRequest &input) const{
    ResultData<VolcengineMetadata, GrantInstanceToCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<GrantInstanceToCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ListTagsForResourcesResult> CenClient::ListTagsForResources(const ListTagsForResourcesRequest &input) const{
    ResultData<VolcengineMetadata, ListTagsForResourcesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ListTagsForResourcesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyCenAttributesResult> CenClient::ModifyCenAttributes(const ModifyCenAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyCenAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyCenAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyCenBandwidthPackageAttributesResult> CenClient::ModifyCenBandwidthPackageAttributes(const ModifyCenBandwidthPackageAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyCenBandwidthPackageAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyCenBandwidthPackageAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyCenInterRegionBandwidthAttributesResult> CenClient::ModifyCenInterRegionBandwidthAttributes(const ModifyCenInterRegionBandwidthAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyCenInterRegionBandwidthAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyCenInterRegionBandwidthAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, RevokeInstanceFromCenResult> CenClient::RevokeInstanceFromCen(const RevokeInstanceFromCenRequest &input) const{
    ResultData<VolcengineMetadata, RevokeInstanceFromCenResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<RevokeInstanceFromCenResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, TagResourcesResult> CenClient::TagResources(const TagResourcesRequest &input) const{
    ResultData<VolcengineMetadata, TagResourcesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<TagResourcesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, UntagResourcesResult> CenClient::UntagResources(const UntagResourcesRequest &input) const{
    ResultData<VolcengineMetadata, UntagResourcesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<UntagResourcesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}
