/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_CEN_LISTTAGSFORRESOURCESREQUEST_H
#define VOLCENGINE_CEN_LISTTAGSFORRESOURCESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/cen/model/TagFilterForListTagsForResourcesInput.h"

namespace volcengine{
    namespace cen{
        class ListTagsForResourcesRequest {
        public:
            ListTagsForResourcesRequest();
            ~ListTagsForResourcesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            int getMaxResults()const { return  v_maxResults; }
            bool MaxResultsHasBeenSet() const { return v_maxResultsHasBeenSet; }
            void setMaxResults(const int s_maxResults ) {
                v_maxResults = s_maxResults;
                v_maxResultsHasBeenSet = true;
            }
            const std::string &getNextToken()const { return  v_nextToken; }
            bool NextTokenHasBeenSet() const { return v_nextTokenHasBeenSet; }
            void setNextToken(const std::string &s_nextToken ) {
                v_nextToken = s_nextToken;
                v_nextTokenHasBeenSet = true;
            }
            const std::vector<std::string> &getResourceIds()const { return  v_resourceIds; }
            bool ResourceIdsHasBeenSet() const { return v_resourceIdsHasBeenSet; }
            void setResourceIds(const std::vector<std::string> &s_resourceIds ) {
                v_resourceIds = s_resourceIds;
                v_resourceIdsHasBeenSet = true;
            }
            const std::string &getResourceType()const { return  v_resourceType; }
            bool ResourceTypeHasBeenSet() const { return v_resourceTypeHasBeenSet; }
            void setResourceType(const std::string &s_resourceType ) {
                v_resourceType = s_resourceType;
                v_resourceTypeHasBeenSet = true;
            }
            const std::vector<TagFilterForListTagsForResourcesInput> &getTagFilters()const { return  v_tagFilters; }
            bool TagFiltersHasBeenSet() const { return v_tagFiltersHasBeenSet; }
            void setTagFilters(const std::vector<TagFilterForListTagsForResourcesInput> &s_tagFilters ) {
                v_tagFilters = s_tagFilters;
                v_tagFiltersHasBeenSet = true;
            }
            const std::string &getTagType()const { return  v_tagType; }
            bool TagTypeHasBeenSet() const { return v_tagTypeHasBeenSet; }
            void setTagType(const std::string &s_tagType ) {
                v_tagType = s_tagType;
                v_tagTypeHasBeenSet = true;
            }
        private:
            int v_maxResults;
            bool v_maxResultsHasBeenSet;

            std::string v_nextToken;
            bool v_nextTokenHasBeenSet;

            std::vector<std::string> v_resourceIds;
            bool v_resourceIdsHasBeenSet;

            std::string v_resourceType;
            bool v_resourceTypeHasBeenSet;

            std::vector<TagFilterForListTagsForResourcesInput> v_tagFilters;
            bool v_tagFiltersHasBeenSet;

            std::string v_tagType;
            bool v_tagTypeHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_CEN_LISTTAGSFORRESOURCESREQUEST_H