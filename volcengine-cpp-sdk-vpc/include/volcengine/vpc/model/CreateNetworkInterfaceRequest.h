/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPC_CREATENETWORKINTERFACEREQUEST_H
#define VOLCENGINE_VPC_CREATENETWORKINTERFACEREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/vpc/model/TagForCreateNetworkInterfaceInput.h"

namespace volcengine{
    namespace vpc{
        class CreateNetworkInterfaceRequest {
        public:
            CreateNetworkInterfaceRequest();
            ~CreateNetworkInterfaceRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            const std::string &getNetworkInterfaceName()const { return  v_networkInterfaceName; }
            bool NetworkInterfaceNameHasBeenSet() const { return v_networkInterfaceNameHasBeenSet; }
            void setNetworkInterfaceName(const std::string &s_networkInterfaceName ) {
                v_networkInterfaceName = s_networkInterfaceName;
                v_networkInterfaceNameHasBeenSet = true;
            }
            bool isPortSecurityEnabled()const { return  v_portSecurityEnabled; }
            bool PortSecurityEnabledHasBeenSet() const { return v_portSecurityEnabledHasBeenSet; }
            void setPortSecurityEnabled(const bool s_portSecurityEnabled ) {
                v_portSecurityEnabled = s_portSecurityEnabled;
                v_portSecurityEnabledHasBeenSet = true;
            }
            const std::string &getPrimaryIpAddress()const { return  v_primaryIpAddress; }
            bool PrimaryIpAddressHasBeenSet() const { return v_primaryIpAddressHasBeenSet; }
            void setPrimaryIpAddress(const std::string &s_primaryIpAddress ) {
                v_primaryIpAddress = s_primaryIpAddress;
                v_primaryIpAddressHasBeenSet = true;
            }
            const std::vector<std::string> &getPrivateIpAddress()const { return  v_privateIpAddress; }
            bool PrivateIpAddressHasBeenSet() const { return v_privateIpAddressHasBeenSet; }
            void setPrivateIpAddress(const std::vector<std::string> &s_privateIpAddress ) {
                v_privateIpAddress = s_privateIpAddress;
                v_privateIpAddressHasBeenSet = true;
            }
            const std::string &getProjectName()const { return  v_projectName; }
            bool ProjectNameHasBeenSet() const { return v_projectNameHasBeenSet; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
                v_projectNameHasBeenSet = true;
            }
            int getSecondaryPrivateIpAddressCount()const { return  v_secondaryPrivateIpAddressCount; }
            bool SecondaryPrivateIpAddressCountHasBeenSet() const { return v_secondaryPrivateIpAddressCountHasBeenSet; }
            void setSecondaryPrivateIpAddressCount(const int s_secondaryPrivateIpAddressCount ) {
                v_secondaryPrivateIpAddressCount = s_secondaryPrivateIpAddressCount;
                v_secondaryPrivateIpAddressCountHasBeenSet = true;
            }
            const std::vector<std::string> &getSecurityGroupIds()const { return  v_securityGroupIds; }
            bool SecurityGroupIdsHasBeenSet() const { return v_securityGroupIdsHasBeenSet; }
            void setSecurityGroupIds(const std::vector<std::string> &s_securityGroupIds ) {
                v_securityGroupIds = s_securityGroupIds;
                v_securityGroupIdsHasBeenSet = true;
            }
            const std::string &getSubnetId()const { return  v_subnetId; }
            bool SubnetIdHasBeenSet() const { return v_subnetIdHasBeenSet; }
            void setSubnetId(const std::string &s_subnetId ) {
                v_subnetId = s_subnetId;
                v_subnetIdHasBeenSet = true;
            }
            const std::vector<TagForCreateNetworkInterfaceInput> &getTags()const { return  v_tags; }
            bool TagsHasBeenSet() const { return v_tagsHasBeenSet; }
            void setTags(const std::vector<TagForCreateNetworkInterfaceInput> &s_tags ) {
                v_tags = s_tags;
                v_tagsHasBeenSet = true;
            }
        private:
            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            std::string v_description;
            bool v_descriptionHasBeenSet;

            std::string v_networkInterfaceName;
            bool v_networkInterfaceNameHasBeenSet;

            bool v_portSecurityEnabled;
            bool v_portSecurityEnabledHasBeenSet;

            std::string v_primaryIpAddress;
            bool v_primaryIpAddressHasBeenSet;

            std::vector<std::string> v_privateIpAddress;
            bool v_privateIpAddressHasBeenSet;

            std::string v_projectName;
            bool v_projectNameHasBeenSet;

            int v_secondaryPrivateIpAddressCount;
            bool v_secondaryPrivateIpAddressCountHasBeenSet;

            std::vector<std::string> v_securityGroupIds;
            bool v_securityGroupIdsHasBeenSet;

            std::string v_subnetId;
            bool v_subnetIdHasBeenSet;

            std::vector<TagForCreateNetworkInterfaceInput> v_tags;
            bool v_tagsHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VPC_CREATENETWORKINTERFACEREQUEST_H