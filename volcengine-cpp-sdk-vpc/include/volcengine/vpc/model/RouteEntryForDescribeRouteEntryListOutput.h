/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPC_ROUTEENTRYFORDESCRIBEROUTEENTRYLISTOUTPUT_H
#define VOLCENGINE_VPC_ROUTEENTRYFORDESCRIBEROUTEENTRYLISTOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace vpc{
        class RouteEntryForDescribeRouteEntryListOutput {
        public:
            RouteEntryForDescribeRouteEntryListOutput() = default;
            ~RouteEntryForDescribeRouteEntryListOutput() = default;
            void fromJsonString(const std::string &input);
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::string &getDestinationCidrBlock() const { return  v_destinationCidrBlock; }
            void setDestinationCidrBlock(const std::string &s_destinationCidrBlock ) {
                v_destinationCidrBlock = s_destinationCidrBlock;
            }
            const std::string &getNextHopId() const { return  v_nextHopId; }
            void setNextHopId(const std::string &s_nextHopId ) {
                v_nextHopId = s_nextHopId;
            }
            const std::string &getNextHopName() const { return  v_nextHopName; }
            void setNextHopName(const std::string &s_nextHopName ) {
                v_nextHopName = s_nextHopName;
            }
            const std::string &getNextHopType() const { return  v_nextHopType; }
            void setNextHopType(const std::string &s_nextHopType ) {
                v_nextHopType = s_nextHopType;
            }
            const std::string &getRouteEntryId() const { return  v_routeEntryId; }
            void setRouteEntryId(const std::string &s_routeEntryId ) {
                v_routeEntryId = s_routeEntryId;
            }
            const std::string &getRouteEntryName() const { return  v_routeEntryName; }
            void setRouteEntryName(const std::string &s_routeEntryName ) {
                v_routeEntryName = s_routeEntryName;
            }
            const std::string &getRouteTableId() const { return  v_routeTableId; }
            void setRouteTableId(const std::string &s_routeTableId ) {
                v_routeTableId = s_routeTableId;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::string &getType() const { return  v_type; }
            void setType(const std::string &s_type ) {
                v_type = s_type;
            }
            const std::string &getVpcId() const { return  v_vpcId; }
            void setVpcId(const std::string &s_vpcId ) {
                v_vpcId = s_vpcId;
            }
        private:
            std::string v_description;
            std::string v_destinationCidrBlock;
            std::string v_nextHopId;
            std::string v_nextHopName;
            std::string v_nextHopType;
            std::string v_routeEntryId;
            std::string v_routeEntryName;
            std::string v_routeTableId;
            std::string v_status;
            std::string v_type;
            std::string v_vpcId;
        };
    }
}
#endif // !VOLCENGINE_VPC_ROUTEENTRYFORDESCRIBEROUTEENTRYLISTOUTPUT_H