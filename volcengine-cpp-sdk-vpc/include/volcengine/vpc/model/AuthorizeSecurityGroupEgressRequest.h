/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPC_AUTHORIZESECURITYGROUPEGRESSREQUEST_H
#define VOLCENGINE_VPC_AUTHORIZESECURITYGROUPEGRESSREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace vpc{
        class AuthorizeSecurityGroupEgressRequest {
        public:
            AuthorizeSecurityGroupEgressRequest();
            ~AuthorizeSecurityGroupEgressRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getCidrIp()const { return  v_cidrIp; }
            bool CidrIpHasBeenSet() const { return v_cidrIpHasBeenSet; }
            void setCidrIp(const std::string &s_cidrIp ) {
                v_cidrIp = s_cidrIp;
                v_cidrIpHasBeenSet = true;
            }
            const std::string &getClientToken()const { return  v_clientToken; }
            bool ClientTokenHasBeenSet() const { return v_clientTokenHasBeenSet; }
            void setClientToken(const std::string &s_clientToken ) {
                v_clientToken = s_clientToken;
                v_clientTokenHasBeenSet = true;
            }
            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            const std::string &getPolicy()const { return  v_policy; }
            bool PolicyHasBeenSet() const { return v_policyHasBeenSet; }
            void setPolicy(const std::string &s_policy ) {
                v_policy = s_policy;
                v_policyHasBeenSet = true;
            }
            int getPortEnd()const { return  v_portEnd; }
            bool PortEndHasBeenSet() const { return v_portEndHasBeenSet; }
            void setPortEnd(const int s_portEnd ) {
                v_portEnd = s_portEnd;
                v_portEndHasBeenSet = true;
            }
            int getPortStart()const { return  v_portStart; }
            bool PortStartHasBeenSet() const { return v_portStartHasBeenSet; }
            void setPortStart(const int s_portStart ) {
                v_portStart = s_portStart;
                v_portStartHasBeenSet = true;
            }
            int getPriority()const { return  v_priority; }
            bool PriorityHasBeenSet() const { return v_priorityHasBeenSet; }
            void setPriority(const int s_priority ) {
                v_priority = s_priority;
                v_priorityHasBeenSet = true;
            }
            const std::string &getProtocol()const { return  v_protocol; }
            bool ProtocolHasBeenSet() const { return v_protocolHasBeenSet; }
            void setProtocol(const std::string &s_protocol ) {
                v_protocol = s_protocol;
                v_protocolHasBeenSet = true;
            }
            const std::string &getSecurityGroupId()const { return  v_securityGroupId; }
            bool SecurityGroupIdHasBeenSet() const { return v_securityGroupIdHasBeenSet; }
            void setSecurityGroupId(const std::string &s_securityGroupId ) {
                v_securityGroupId = s_securityGroupId;
                v_securityGroupIdHasBeenSet = true;
            }
            const std::string &getSourceGroupId()const { return  v_sourceGroupId; }
            bool SourceGroupIdHasBeenSet() const { return v_sourceGroupIdHasBeenSet; }
            void setSourceGroupId(const std::string &s_sourceGroupId ) {
                v_sourceGroupId = s_sourceGroupId;
                v_sourceGroupIdHasBeenSet = true;
            }
        private:
            std::string v_cidrIp;
            bool v_cidrIpHasBeenSet;

            std::string v_clientToken;
            bool v_clientTokenHasBeenSet;

            std::string v_description;
            bool v_descriptionHasBeenSet;

            std::string v_policy;
            bool v_policyHasBeenSet;

            int v_portEnd;
            bool v_portEndHasBeenSet;

            int v_portStart;
            bool v_portStartHasBeenSet;

            int v_priority;
            bool v_priorityHasBeenSet;

            std::string v_protocol;
            bool v_protocolHasBeenSet;

            std::string v_securityGroupId;
            bool v_securityGroupIdHasBeenSet;

            std::string v_sourceGroupId;
            bool v_sourceGroupIdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VPC_AUTHORIZESECURITYGROUPEGRESSREQUEST_H