/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPC_HAVIPFORDESCRIBEHAVIPSOUTPUT_H
#define VOLCENGINE_VPC_HAVIPFORDESCRIBEHAVIPSOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace vpc{
        class HaVipForDescribeHaVipsOutput {
        public:
            HaVipForDescribeHaVipsOutput() = default;
            ~HaVipForDescribeHaVipsOutput() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAccountId() const { return  v_accountId; }
            void setAccountId(const std::string &s_accountId ) {
                v_accountId = s_accountId;
            }
            const std::string &getAssociatedEipAddress() const { return  v_associatedEipAddress; }
            void setAssociatedEipAddress(const std::string &s_associatedEipAddress ) {
                v_associatedEipAddress = s_associatedEipAddress;
            }
            const std::string &getAssociatedEipId() const { return  v_associatedEipId; }
            void setAssociatedEipId(const std::string &s_associatedEipId ) {
                v_associatedEipId = s_associatedEipId;
            }
            const std::vector<std::string> &getAssociatedInstanceIds() const { return  v_associatedInstanceIds; }
            void setAssociatedInstanceIds(const std::vector<std::string> &s_associatedInstanceIds ) {
                v_associatedInstanceIds = s_associatedInstanceIds;
            }
            const std::string &getAssociatedInstanceType() const { return  v_associatedInstanceType; }
            void setAssociatedInstanceType(const std::string &s_associatedInstanceType ) {
                v_associatedInstanceType = s_associatedInstanceType;
            }
            const std::string &getCreatedAt() const { return  v_createdAt; }
            void setCreatedAt(const std::string &s_createdAt ) {
                v_createdAt = s_createdAt;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::string &getHaVipId() const { return  v_haVipId; }
            void setHaVipId(const std::string &s_haVipId ) {
                v_haVipId = s_haVipId;
            }
            const std::string &getHaVipName() const { return  v_haVipName; }
            void setHaVipName(const std::string &s_haVipName ) {
                v_haVipName = s_haVipName;
            }
            const std::string &getIpAddress() const { return  v_ipAddress; }
            void setIpAddress(const std::string &s_ipAddress ) {
                v_ipAddress = s_ipAddress;
            }
            const std::string &getMasterInstanceId() const { return  v_masterInstanceId; }
            void setMasterInstanceId(const std::string &s_masterInstanceId ) {
                v_masterInstanceId = s_masterInstanceId;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::string &getSubnetId() const { return  v_subnetId; }
            void setSubnetId(const std::string &s_subnetId ) {
                v_subnetId = s_subnetId;
            }
            const std::string &getUpdatedAt() const { return  v_updatedAt; }
            void setUpdatedAt(const std::string &s_updatedAt ) {
                v_updatedAt = s_updatedAt;
            }
            const std::string &getVpcId() const { return  v_vpcId; }
            void setVpcId(const std::string &s_vpcId ) {
                v_vpcId = s_vpcId;
            }
        private:
            std::string v_accountId;
            std::string v_associatedEipAddress;
            std::string v_associatedEipId;
            std::vector<std::string> v_associatedInstanceIds;
            std::string v_associatedInstanceType;
            std::string v_createdAt;
            std::string v_description;
            std::string v_haVipId;
            std::string v_haVipName;
            std::string v_ipAddress;
            std::string v_masterInstanceId;
            std::string v_status;
            std::string v_subnetId;
            std::string v_updatedAt;
            std::string v_vpcId;
        };
    }
}
#endif // !VOLCENGINE_VPC_HAVIPFORDESCRIBEHAVIPSOUTPUT_H