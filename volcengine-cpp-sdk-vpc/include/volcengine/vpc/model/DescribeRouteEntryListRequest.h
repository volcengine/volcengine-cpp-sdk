/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPC_DESCRIBEROUTEENTRYLISTREQUEST_H
#define VOLCENGINE_VPC_DESCRIBEROUTEENTRYLISTREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace vpc{
        class DescribeRouteEntryListRequest {
        public:
            DescribeRouteEntryListRequest();
            ~DescribeRouteEntryListRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getDestinationCidrBlock()const { return  v_destinationCidrBlock; }
            bool DestinationCidrBlockHasBeenSet() const { return v_destinationCidrBlockHasBeenSet; }
            void setDestinationCidrBlock(const std::string &s_destinationCidrBlock ) {
                v_destinationCidrBlock = s_destinationCidrBlock;
                v_destinationCidrBlockHasBeenSet = true;
            }
            const std::string &getNextHopId()const { return  v_nextHopId; }
            bool NextHopIdHasBeenSet() const { return v_nextHopIdHasBeenSet; }
            void setNextHopId(const std::string &s_nextHopId ) {
                v_nextHopId = s_nextHopId;
                v_nextHopIdHasBeenSet = true;
            }
            const std::string &getNextHopType()const { return  v_nextHopType; }
            bool NextHopTypeHasBeenSet() const { return v_nextHopTypeHasBeenSet; }
            void setNextHopType(const std::string &s_nextHopType ) {
                v_nextHopType = s_nextHopType;
                v_nextHopTypeHasBeenSet = true;
            }
            int getPageNumber()const { return  v_pageNumber; }
            bool PageNumberHasBeenSet() const { return v_pageNumberHasBeenSet; }
            void setPageNumber(const int s_pageNumber ) {
                v_pageNumber = s_pageNumber;
                v_pageNumberHasBeenSet = true;
            }
            int getPageSize()const { return  v_pageSize; }
            bool PageSizeHasBeenSet() const { return v_pageSizeHasBeenSet; }
            void setPageSize(const int s_pageSize ) {
                v_pageSize = s_pageSize;
                v_pageSizeHasBeenSet = true;
            }
            const std::string &getRouteEntryId()const { return  v_routeEntryId; }
            bool RouteEntryIdHasBeenSet() const { return v_routeEntryIdHasBeenSet; }
            void setRouteEntryId(const std::string &s_routeEntryId ) {
                v_routeEntryId = s_routeEntryId;
                v_routeEntryIdHasBeenSet = true;
            }
            const std::string &getRouteEntryName()const { return  v_routeEntryName; }
            bool RouteEntryNameHasBeenSet() const { return v_routeEntryNameHasBeenSet; }
            void setRouteEntryName(const std::string &s_routeEntryName ) {
                v_routeEntryName = s_routeEntryName;
                v_routeEntryNameHasBeenSet = true;
            }
            const std::string &getRouteEntryType()const { return  v_routeEntryType; }
            bool RouteEntryTypeHasBeenSet() const { return v_routeEntryTypeHasBeenSet; }
            void setRouteEntryType(const std::string &s_routeEntryType ) {
                v_routeEntryType = s_routeEntryType;
                v_routeEntryTypeHasBeenSet = true;
            }
            const std::string &getRouteTableId()const { return  v_routeTableId; }
            bool RouteTableIdHasBeenSet() const { return v_routeTableIdHasBeenSet; }
            void setRouteTableId(const std::string &s_routeTableId ) {
                v_routeTableId = s_routeTableId;
                v_routeTableIdHasBeenSet = true;
            }
        private:
            std::string v_destinationCidrBlock;
            bool v_destinationCidrBlockHasBeenSet;

            std::string v_nextHopId;
            bool v_nextHopIdHasBeenSet;

            std::string v_nextHopType;
            bool v_nextHopTypeHasBeenSet;

            int v_pageNumber;
            bool v_pageNumberHasBeenSet;

            int v_pageSize;
            bool v_pageSizeHasBeenSet;

            std::string v_routeEntryId;
            bool v_routeEntryIdHasBeenSet;

            std::string v_routeEntryName;
            bool v_routeEntryNameHasBeenSet;

            std::string v_routeEntryType;
            bool v_routeEntryTypeHasBeenSet;

            std::string v_routeTableId;
            bool v_routeTableIdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VPC_DESCRIBEROUTEENTRYLISTREQUEST_H