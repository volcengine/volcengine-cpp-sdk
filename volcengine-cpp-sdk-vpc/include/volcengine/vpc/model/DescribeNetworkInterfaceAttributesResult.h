/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPC_DESCRIBENETWORKINTERFACEATTRIBUTESRESULT_H
#define VOLCENGINE_VPC_DESCRIBENETWORKINTERFACEATTRIBUTESRESULT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/vpc/model/AssociatedElasticIpForDescribeNetworkInterfaceAttributesOutput.h"
#include "volcengine/vpc/model/PrivateIpSetsForDescribeNetworkInterfaceAttributesOutput.h"
#include "volcengine/vpc/model/TagForDescribeNetworkInterfaceAttributesOutput.h"
namespace volcengine{
    namespace vpc{
        class DescribeNetworkInterfaceAttributesResult {
        public:
            DescribeNetworkInterfaceAttributesResult() = default;
            ~DescribeNetworkInterfaceAttributesResult() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAccountId() const { return  v_accountId; }
            void setAccountId(const std::string &s_accountId ) {
                v_accountId = s_accountId;
            }
            const std::shared_ptr<AssociatedElasticIpForDescribeNetworkInterfaceAttributesOutput> &getAssociatedElasticIp() const { return  v_associatedElasticIp; }
            void setAssociatedElasticIp(const std::shared_ptr<AssociatedElasticIpForDescribeNetworkInterfaceAttributesOutput> &s_associatedElasticIp ) {
                v_associatedElasticIp = s_associatedElasticIp;
            }
            const std::string &getCreatedAt() const { return  v_createdAt; }
            void setCreatedAt(const std::string &s_createdAt ) {
                v_createdAt = s_createdAt;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::string &getDeviceId() const { return  v_deviceId; }
            void setDeviceId(const std::string &s_deviceId ) {
                v_deviceId = s_deviceId;
            }
            const std::string &getMacAddress() const { return  v_macAddress; }
            void setMacAddress(const std::string &s_macAddress ) {
                v_macAddress = s_macAddress;
            }
            const std::string &getNetworkInterfaceId() const { return  v_networkInterfaceId; }
            void setNetworkInterfaceId(const std::string &s_networkInterfaceId ) {
                v_networkInterfaceId = s_networkInterfaceId;
            }
            const std::string &getNetworkInterfaceName() const { return  v_networkInterfaceName; }
            void setNetworkInterfaceName(const std::string &s_networkInterfaceName ) {
                v_networkInterfaceName = s_networkInterfaceName;
            }
            const bool isPortSecurityEnabled() const { return  v_portSecurityEnabled; }
            void setPortSecurityEnabled(const bool s_portSecurityEnabled ) {
                v_portSecurityEnabled = s_portSecurityEnabled;
            }
            const std::string &getPrimaryIpAddress() const { return  v_primaryIpAddress; }
            void setPrimaryIpAddress(const std::string &s_primaryIpAddress ) {
                v_primaryIpAddress = s_primaryIpAddress;
            }
            const std::shared_ptr<PrivateIpSetsForDescribeNetworkInterfaceAttributesOutput> &getPrivateIpSets() const { return  v_privateIpSets; }
            void setPrivateIpSets(const std::shared_ptr<PrivateIpSetsForDescribeNetworkInterfaceAttributesOutput> &s_privateIpSets ) {
                v_privateIpSets = s_privateIpSets;
            }
            const std::string &getProjectName() const { return  v_projectName; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
            }
            const std::string &getRequestId() const { return  v_requestId; }
            void setRequestId(const std::string &s_requestId ) {
                v_requestId = s_requestId;
            }
            const std::vector<std::string> &getSecurityGroupIds() const { return  v_securityGroupIds; }
            void setSecurityGroupIds(const std::vector<std::string> &s_securityGroupIds ) {
                v_securityGroupIds = s_securityGroupIds;
            }
            const bool isServiceManaged() const { return  v_serviceManaged; }
            void setServiceManaged(const bool s_serviceManaged ) {
                v_serviceManaged = s_serviceManaged;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::string &getSubnetId() const { return  v_subnetId; }
            void setSubnetId(const std::string &s_subnetId ) {
                v_subnetId = s_subnetId;
            }
            const std::vector<TagForDescribeNetworkInterfaceAttributesOutput> &getTags() const { return  v_tags; }
            void setTags(const std::vector<TagForDescribeNetworkInterfaceAttributesOutput> &s_tags ) {
                v_tags = s_tags;
            }
            const std::string &getType() const { return  v_type; }
            void setType(const std::string &s_type ) {
                v_type = s_type;
            }
            const std::string &getUpdatedAt() const { return  v_updatedAt; }
            void setUpdatedAt(const std::string &s_updatedAt ) {
                v_updatedAt = s_updatedAt;
            }
            const std::string &getVpcId() const { return  v_vpcId; }
            void setVpcId(const std::string &s_vpcId ) {
                v_vpcId = s_vpcId;
            }
            const std::string &getVpcName() const { return  v_vpcName; }
            void setVpcName(const std::string &s_vpcName ) {
                v_vpcName = s_vpcName;
            }
            const std::string &getZoneId() const { return  v_zoneId; }
            void setZoneId(const std::string &s_zoneId ) {
                v_zoneId = s_zoneId;
            }
        private:
            std::string v_accountId;
            std::shared_ptr<AssociatedElasticIpForDescribeNetworkInterfaceAttributesOutput> v_associatedElasticIp;
            std::string v_createdAt;
            std::string v_description;
            std::string v_deviceId;
            std::string v_macAddress;
            std::string v_networkInterfaceId;
            std::string v_networkInterfaceName;
            bool v_portSecurityEnabled{};
            std::string v_primaryIpAddress;
            std::shared_ptr<PrivateIpSetsForDescribeNetworkInterfaceAttributesOutput> v_privateIpSets;
            std::string v_projectName;
            std::string v_requestId;
            std::vector<std::string> v_securityGroupIds;
            bool v_serviceManaged{};
            std::string v_status;
            std::string v_subnetId;
            std::vector<TagForDescribeNetworkInterfaceAttributesOutput> v_tags;
            std::string v_type;
            std::string v_updatedAt;
            std::string v_vpcId;
            std::string v_vpcName;
            std::string v_zoneId;
        };
    }
}
#endif // !VOLCENGINE_VPC_DESCRIBENETWORKINTERFACEATTRIBUTESRESULT_H