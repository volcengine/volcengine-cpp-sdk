/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#pragma once
#include <volcengine/core/VolcengineClient.h>
#include "volcengine/vpc/VpcClient.h"

using namespace volcengine;
using namespace volcengine::vpc;

VpcClient::VpcClient(const std::shared_ptr<VolcengineClientConfig> &config) {
    client_ = std::make_shared<VolcengineClient>(config);
}


ResultData<VolcengineMetadata, AddBandwidthPackageIpResult> VpcClient::AddBandwidthPackageIp(const AddBandwidthPackageIpRequest &input) const{
    ResultData<VolcengineMetadata, AddBandwidthPackageIpResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AddBandwidthPackageIpResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AllocateEipAddressResult> VpcClient::AllocateEipAddress(const AllocateEipAddressRequest &input) const{
    ResultData<VolcengineMetadata, AllocateEipAddressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AllocateEipAddressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AssignPrivateIpAddressesResult> VpcClient::AssignPrivateIpAddresses(const AssignPrivateIpAddressesRequest &input) const{
    ResultData<VolcengineMetadata, AssignPrivateIpAddressesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssignPrivateIpAddressesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AssociateEipAddressResult> VpcClient::AssociateEipAddress(const AssociateEipAddressRequest &input) const{
    ResultData<VolcengineMetadata, AssociateEipAddressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssociateEipAddressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AssociateHaVipResult> VpcClient::AssociateHaVip(const AssociateHaVipRequest &input) const{
    ResultData<VolcengineMetadata, AssociateHaVipResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssociateHaVipResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AssociateNetworkAclResult> VpcClient::AssociateNetworkAcl(const AssociateNetworkAclRequest &input) const{
    ResultData<VolcengineMetadata, AssociateNetworkAclResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssociateNetworkAclResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AssociateRouteTableResult> VpcClient::AssociateRouteTable(const AssociateRouteTableRequest &input) const{
    ResultData<VolcengineMetadata, AssociateRouteTableResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssociateRouteTableResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AssociateVpcCidrBlockResult> VpcClient::AssociateVpcCidrBlock(const AssociateVpcCidrBlockRequest &input) const{
    ResultData<VolcengineMetadata, AssociateVpcCidrBlockResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AssociateVpcCidrBlockResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AttachNetworkInterfaceResult> VpcClient::AttachNetworkInterface(const AttachNetworkInterfaceRequest &input) const{
    ResultData<VolcengineMetadata, AttachNetworkInterfaceResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AttachNetworkInterfaceResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AuthorizeSecurityGroupEgressResult> VpcClient::AuthorizeSecurityGroupEgress(const AuthorizeSecurityGroupEgressRequest &input) const{
    ResultData<VolcengineMetadata, AuthorizeSecurityGroupEgressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AuthorizeSecurityGroupEgressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, AuthorizeSecurityGroupIngressResult> VpcClient::AuthorizeSecurityGroupIngress(const AuthorizeSecurityGroupIngressRequest &input) const{
    ResultData<VolcengineMetadata, AuthorizeSecurityGroupIngressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AuthorizeSecurityGroupIngressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateBandwidthPackageResult> VpcClient::CreateBandwidthPackage(const CreateBandwidthPackageRequest &input) const{
    ResultData<VolcengineMetadata, CreateBandwidthPackageResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateBandwidthPackageResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateHaVipResult> VpcClient::CreateHaVip(const CreateHaVipRequest &input) const{
    ResultData<VolcengineMetadata, CreateHaVipResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateHaVipResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateNetworkAclResult> VpcClient::CreateNetworkAcl(const CreateNetworkAclRequest &input) const{
    ResultData<VolcengineMetadata, CreateNetworkAclResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateNetworkAclResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateNetworkInterfaceResult> VpcClient::CreateNetworkInterface(const CreateNetworkInterfaceRequest &input) const{
    ResultData<VolcengineMetadata, CreateNetworkInterfaceResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateNetworkInterfaceResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateRouteEntryResult> VpcClient::CreateRouteEntry(const CreateRouteEntryRequest &input) const{
    ResultData<VolcengineMetadata, CreateRouteEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateRouteEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateRouteTableResult> VpcClient::CreateRouteTable(const CreateRouteTableRequest &input) const{
    ResultData<VolcengineMetadata, CreateRouteTableResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateRouteTableResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateSecurityGroupResult> VpcClient::CreateSecurityGroup(const CreateSecurityGroupRequest &input) const{
    ResultData<VolcengineMetadata, CreateSecurityGroupResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateSecurityGroupResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateSubnetResult> VpcClient::CreateSubnet(const CreateSubnetRequest &input) const{
    ResultData<VolcengineMetadata, CreateSubnetResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateSubnetResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateVpcResult> VpcClient::CreateVpc(const CreateVpcRequest &input) const{
    ResultData<VolcengineMetadata, CreateVpcResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateVpcResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteBandwidthPackageResult> VpcClient::DeleteBandwidthPackage(const DeleteBandwidthPackageRequest &input) const{
    ResultData<VolcengineMetadata, DeleteBandwidthPackageResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteBandwidthPackageResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteHaVipResult> VpcClient::DeleteHaVip(const DeleteHaVipRequest &input) const{
    ResultData<VolcengineMetadata, DeleteHaVipResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteHaVipResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteNetworkAclResult> VpcClient::DeleteNetworkAcl(const DeleteNetworkAclRequest &input) const{
    ResultData<VolcengineMetadata, DeleteNetworkAclResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteNetworkAclResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteNetworkInterfaceResult> VpcClient::DeleteNetworkInterface(const DeleteNetworkInterfaceRequest &input) const{
    ResultData<VolcengineMetadata, DeleteNetworkInterfaceResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteNetworkInterfaceResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteRouteEntryResult> VpcClient::DeleteRouteEntry(const DeleteRouteEntryRequest &input) const{
    ResultData<VolcengineMetadata, DeleteRouteEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteRouteEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteRouteTableResult> VpcClient::DeleteRouteTable(const DeleteRouteTableRequest &input) const{
    ResultData<VolcengineMetadata, DeleteRouteTableResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteRouteTableResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteSecurityGroupResult> VpcClient::DeleteSecurityGroup(const DeleteSecurityGroupRequest &input) const{
    ResultData<VolcengineMetadata, DeleteSecurityGroupResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteSecurityGroupResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteSubnetResult> VpcClient::DeleteSubnet(const DeleteSubnetRequest &input) const{
    ResultData<VolcengineMetadata, DeleteSubnetResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteSubnetResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteVpcResult> VpcClient::DeleteVpc(const DeleteVpcRequest &input) const{
    ResultData<VolcengineMetadata, DeleteVpcResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteVpcResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeBandwidthPackagesResult> VpcClient::DescribeBandwidthPackages(const DescribeBandwidthPackagesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeBandwidthPackagesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeBandwidthPackagesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeEipAddressAttributesResult> VpcClient::DescribeEipAddressAttributes(const DescribeEipAddressAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeEipAddressAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeEipAddressAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeEipAddressesResult> VpcClient::DescribeEipAddresses(const DescribeEipAddressesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeEipAddressesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeEipAddressesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeHaVipsResult> VpcClient::DescribeHaVips(const DescribeHaVipsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeHaVipsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeHaVipsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeNetworkAclAttributesResult> VpcClient::DescribeNetworkAclAttributes(const DescribeNetworkAclAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeNetworkAclAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeNetworkAclAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeNetworkAclsResult> VpcClient::DescribeNetworkAcls(const DescribeNetworkAclsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeNetworkAclsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeNetworkAclsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeNetworkInterfaceAttributesResult> VpcClient::DescribeNetworkInterfaceAttributes(const DescribeNetworkInterfaceAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeNetworkInterfaceAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeNetworkInterfaceAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeNetworkInterfacesResult> VpcClient::DescribeNetworkInterfaces(const DescribeNetworkInterfacesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeNetworkInterfacesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeNetworkInterfacesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeRouteEntryListResult> VpcClient::DescribeRouteEntryList(const DescribeRouteEntryListRequest &input) const{
    ResultData<VolcengineMetadata, DescribeRouteEntryListResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeRouteEntryListResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeRouteTableListResult> VpcClient::DescribeRouteTableList(const DescribeRouteTableListRequest &input) const{
    ResultData<VolcengineMetadata, DescribeRouteTableListResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeRouteTableListResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeSecurityGroupAttributesResult> VpcClient::DescribeSecurityGroupAttributes(const DescribeSecurityGroupAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeSecurityGroupAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeSecurityGroupAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeSecurityGroupsResult> VpcClient::DescribeSecurityGroups(const DescribeSecurityGroupsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeSecurityGroupsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeSecurityGroupsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeSubnetAttributesResult> VpcClient::DescribeSubnetAttributes(const DescribeSubnetAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeSubnetAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeSubnetAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeSubnetsResult> VpcClient::DescribeSubnets(const DescribeSubnetsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeSubnetsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeSubnetsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeVpcAttributesResult> VpcClient::DescribeVpcAttributes(const DescribeVpcAttributesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeVpcAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeVpcAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeVpcsResult> VpcClient::DescribeVpcs(const DescribeVpcsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeVpcsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeVpcsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DetachNetworkInterfaceResult> VpcClient::DetachNetworkInterface(const DetachNetworkInterfaceRequest &input) const{
    ResultData<VolcengineMetadata, DetachNetworkInterfaceResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DetachNetworkInterfaceResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DisassociateEipAddressResult> VpcClient::DisassociateEipAddress(const DisassociateEipAddressRequest &input) const{
    ResultData<VolcengineMetadata, DisassociateEipAddressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DisassociateEipAddressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DisassociateHaVipResult> VpcClient::DisassociateHaVip(const DisassociateHaVipRequest &input) const{
    ResultData<VolcengineMetadata, DisassociateHaVipResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DisassociateHaVipResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DisassociateNetworkAclResult> VpcClient::DisassociateNetworkAcl(const DisassociateNetworkAclRequest &input) const{
    ResultData<VolcengineMetadata, DisassociateNetworkAclResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DisassociateNetworkAclResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DisassociateRouteTableResult> VpcClient::DisassociateRouteTable(const DisassociateRouteTableRequest &input) const{
    ResultData<VolcengineMetadata, DisassociateRouteTableResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DisassociateRouteTableResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DisassociateVpcCidrBlockResult> VpcClient::DisassociateVpcCidrBlock(const DisassociateVpcCidrBlockRequest &input) const{
    ResultData<VolcengineMetadata, DisassociateVpcCidrBlockResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DisassociateVpcCidrBlockResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ListTagsForResourcesResult> VpcClient::ListTagsForResources(const ListTagsForResourcesRequest &input) const{
    ResultData<VolcengineMetadata, ListTagsForResourcesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ListTagsForResourcesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyBandwidthPackageAttributesResult> VpcClient::ModifyBandwidthPackageAttributes(const ModifyBandwidthPackageAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyBandwidthPackageAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyBandwidthPackageAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyBandwidthPackageSpecResult> VpcClient::ModifyBandwidthPackageSpec(const ModifyBandwidthPackageSpecRequest &input) const{
    ResultData<VolcengineMetadata, ModifyBandwidthPackageSpecResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyBandwidthPackageSpecResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyEipAddressAttributesResult> VpcClient::ModifyEipAddressAttributes(const ModifyEipAddressAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyEipAddressAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyEipAddressAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyHaVipAttributesResult> VpcClient::ModifyHaVipAttributes(const ModifyHaVipAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyHaVipAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyHaVipAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyNetworkAclAttributesResult> VpcClient::ModifyNetworkAclAttributes(const ModifyNetworkAclAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyNetworkAclAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyNetworkAclAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyNetworkInterfaceAttributesResult> VpcClient::ModifyNetworkInterfaceAttributes(const ModifyNetworkInterfaceAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyNetworkInterfaceAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyNetworkInterfaceAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyRouteEntryResult> VpcClient::ModifyRouteEntry(const ModifyRouteEntryRequest &input) const{
    ResultData<VolcengineMetadata, ModifyRouteEntryResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyRouteEntryResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyRouteTableAttributesResult> VpcClient::ModifyRouteTableAttributes(const ModifyRouteTableAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyRouteTableAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyRouteTableAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifySecurityGroupAttributesResult> VpcClient::ModifySecurityGroupAttributes(const ModifySecurityGroupAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifySecurityGroupAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifySecurityGroupAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifySecurityGroupRuleDescriptionsEgressResult> VpcClient::ModifySecurityGroupRuleDescriptionsEgress(const ModifySecurityGroupRuleDescriptionsEgressRequest &input) const{
    ResultData<VolcengineMetadata, ModifySecurityGroupRuleDescriptionsEgressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifySecurityGroupRuleDescriptionsEgressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifySecurityGroupRuleDescriptionsIngressResult> VpcClient::ModifySecurityGroupRuleDescriptionsIngress(const ModifySecurityGroupRuleDescriptionsIngressRequest &input) const{
    ResultData<VolcengineMetadata, ModifySecurityGroupRuleDescriptionsIngressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifySecurityGroupRuleDescriptionsIngressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifySubnetAttributesResult> VpcClient::ModifySubnetAttributes(const ModifySubnetAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifySubnetAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifySubnetAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyVpcAttributesResult> VpcClient::ModifyVpcAttributes(const ModifyVpcAttributesRequest &input) const{
    ResultData<VolcengineMetadata, ModifyVpcAttributesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyVpcAttributesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ReleaseEipAddressResult> VpcClient::ReleaseEipAddress(const ReleaseEipAddressRequest &input) const{
    ResultData<VolcengineMetadata, ReleaseEipAddressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ReleaseEipAddressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, RemoveBandwidthPackageIpResult> VpcClient::RemoveBandwidthPackageIp(const RemoveBandwidthPackageIpRequest &input) const{
    ResultData<VolcengineMetadata, RemoveBandwidthPackageIpResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<RemoveBandwidthPackageIpResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, RevokeSecurityGroupEgressResult> VpcClient::RevokeSecurityGroupEgress(const RevokeSecurityGroupEgressRequest &input) const{
    ResultData<VolcengineMetadata, RevokeSecurityGroupEgressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<RevokeSecurityGroupEgressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, RevokeSecurityGroupIngressResult> VpcClient::RevokeSecurityGroupIngress(const RevokeSecurityGroupIngressRequest &input) const{
    ResultData<VolcengineMetadata, RevokeSecurityGroupIngressResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<RevokeSecurityGroupIngressResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, TagResourcesResult> VpcClient::TagResources(const TagResourcesRequest &input) const{
    ResultData<VolcengineMetadata, TagResourcesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<TagResourcesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, UnassignPrivateIpAddressesResult> VpcClient::UnassignPrivateIpAddresses(const UnassignPrivateIpAddressesRequest &input) const{
    ResultData<VolcengineMetadata, UnassignPrivateIpAddressesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<UnassignPrivateIpAddressesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, UntagResourcesResult> VpcClient::UntagResources(const UntagResourcesRequest &input) const{
    ResultData<VolcengineMetadata, UntagResourcesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<UntagResourcesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, UpdateNetworkAclEntriesResult> VpcClient::UpdateNetworkAclEntries(const UpdateNetworkAclEntriesRequest &input) const{
    ResultData<VolcengineMetadata, UpdateNetworkAclEntriesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<UpdateNetworkAclEntriesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}
