/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/vpc/model/DescribeSubnetAttributesResult.h"

using namespace volcengine;
using namespace volcengine::vpc;
using namespace nlohmann;

void DescribeSubnetAttributesResult::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    j = j.at("Result");
    if (j.contains("AccountId")) j.at("AccountId").get_to(v_accountId);
    if (j.contains("AvailableIpAddressCount")) j.at("AvailableIpAddressCount").get_to(v_availableIpAddressCount);
    if (j.contains("CidrBlock")) j.at("CidrBlock").get_to(v_cidrBlock);
    if (j.contains("CreationTime")) j.at("CreationTime").get_to(v_creationTime);
    if (j.contains("Description")) j.at("Description").get_to(v_description);
    if (j.contains("IsDefault")) j.at("IsDefault").get_to(v_isDefault);
    if (j.contains("NetworkAclId")) j.at("NetworkAclId").get_to(v_networkAclId);
    if (j.contains("ProjectName")) j.at("ProjectName").get_to(v_projectName);
    if (j.contains("RequestId")) j.at("RequestId").get_to(v_requestId);
    if (j.contains("RouteTable")){
        json routeTablePres = j.at("RouteTable");
        auto next = std::make_shared<RouteTableForDescribeSubnetAttributesOutput>();
        next->fromJsonString(to_string(routeTablePres));
        v_routeTable = next;
    }
    if (j.contains("Status")) j.at("Status").get_to(v_status);
    if (j.contains("SubnetId")) j.at("SubnetId").get_to(v_subnetId);
    if (j.contains("SubnetName")) j.at("SubnetName").get_to(v_subnetName);
    if (j.contains("TotalIpv4Count")) j.at("TotalIpv4Count").get_to(v_totalIpv4Count);
    if (j.contains("UpdateTime")) j.at("UpdateTime").get_to(v_updateTime);
    if (j.contains("VpcId")) j.at("VpcId").get_to(v_vpcId);
    if (j.contains("ZoneId")) j.at("ZoneId").get_to(v_zoneId);
}
