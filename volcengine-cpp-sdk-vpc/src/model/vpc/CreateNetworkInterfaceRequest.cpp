/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/vpc/model/CreateNetworkInterfaceRequest.h"

using namespace volcengine;
using namespace volcengine::vpc;
CreateNetworkInterfaceRequest::CreateNetworkInterfaceRequest(){
    v_portSecurityEnabled = false;
    v_portSecurityEnabledHasBeenSet = false;
    v_secondaryPrivateIpAddressCount = 0;
    v_secondaryPrivateIpAddressCountHasBeenSet = false;
}

RequestBuilder CreateNetworkInterfaceRequest::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {
    rb.withQuery("Action","CreateNetworkInterface");
    rb.withQuery("Version","2020-04-01");

    if(v_clientTokenHasBeenSet){
        rb.withQuery(chain + "ClientToken", v_clientToken);

    }

    if(v_descriptionHasBeenSet){
        rb.withQuery(chain + "Description", v_description);

    }

    if(v_networkInterfaceNameHasBeenSet){
        rb.withQuery(chain + "NetworkInterfaceName", v_networkInterfaceName);

    }

    if(v_portSecurityEnabledHasBeenSet){
        rb.withQuery(chain + "PortSecurityEnabled", std::to_string(v_portSecurityEnabled));

    }

    if(v_primaryIpAddressHasBeenSet){
        rb.withQuery(chain + "PrimaryIpAddress", v_primaryIpAddress);

    }

    if(v_privateIpAddressHasBeenSet){
      unsigned v_privateIpAddressCount = 1;
      for(auto& item : v_privateIpAddress){
        std::stringstream ss;
        ss << chain << "PrivateIpAddress." << v_privateIpAddressCount;
        rb.withQuery(ss.str(), item);
        v_privateIpAddressCount ++;
      }
    }

    if(v_projectNameHasBeenSet){
        rb.withQuery(chain + "ProjectName", v_projectName);

    }

    if(v_secondaryPrivateIpAddressCountHasBeenSet){
        rb.withQuery(chain + "SecondaryPrivateIpAddressCount", std::to_string(v_secondaryPrivateIpAddressCount));

    }

    if(v_securityGroupIdsHasBeenSet){
      unsigned v_securityGroupIdsCount = 1;
      for(auto& item : v_securityGroupIds){
        std::stringstream ss;
        ss << chain << "SecurityGroupIds." << v_securityGroupIdsCount;
        rb.withQuery(ss.str(), item);
        v_securityGroupIdsCount ++;
      }
    }

    if(v_subnetIdHasBeenSet){
        rb.withQuery(chain + "SubnetId", v_subnetId);

    }

    if(v_tagsHasBeenSet){
      unsigned v_tagsCount = 1;
      for(auto& item : v_tags){
        std::stringstream ss;
        ss << chain << "Tags." << v_tagsCount;
        rb = item.withRequestBuilder(rb, ss.str()+".");
        v_tagsCount ++;
      }
    }

    return rb;
}


