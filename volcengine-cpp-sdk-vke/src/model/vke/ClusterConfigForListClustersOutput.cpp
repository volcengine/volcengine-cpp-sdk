/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/vke/model/ClusterConfigForListClustersOutput.h"

using namespace volcengine;
using namespace volcengine::vke;
using namespace nlohmann;

void ClusterConfigForListClustersOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("ApiServerEndpoints")){
        json apiServerEndpointsPres = j.at("ApiServerEndpoints");
        auto next = std::make_shared<ApiServerEndpointsForListClustersOutput>();
        next->fromJsonString(to_string(apiServerEndpointsPres));
        v_apiServerEndpoints = next;
    }
    if (j.contains("ApiServerPublicAccessConfig")){
        json apiServerPublicAccessConfigPres = j.at("ApiServerPublicAccessConfig");
        auto next = std::make_shared<ApiServerPublicAccessConfigForListClustersOutput>();
        next->fromJsonString(to_string(apiServerPublicAccessConfigPres));
        v_apiServerPublicAccessConfig = next;
    }
    if (j.contains("ApiServerPublicAccessEnabled")) j.at("ApiServerPublicAccessEnabled").get_to(v_apiServerPublicAccessEnabled);
    if (j.contains("ResourcePublicAccessDefaultEnabled")) j.at("ResourcePublicAccessDefaultEnabled").get_to(v_resourcePublicAccessDefaultEnabled);
    if (j.contains("SecurityGroupIds")){
        json securityGroupIdsPres = j.at("SecurityGroupIds");
        for (auto & pre : securityGroupIdsPres) {
           v_securityGroupIds.emplace_back(pre);
        }
    }
    if (j.contains("SubnetIds")){
        json subnetIdsPres = j.at("SubnetIds");
        for (auto & pre : subnetIdsPres) {
           v_subnetIds.emplace_back(pre);
        }
    }
    if (j.contains("VpcId")) j.at("VpcId").get_to(v_vpcId);
}
