/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/vke/model/ItemForListNodesOutput.h"

using namespace volcengine;
using namespace volcengine::vke;
using namespace nlohmann;

void ItemForListNodesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("AdditionalContainerStorageEnabled")) j.at("AdditionalContainerStorageEnabled").get_to(v_additionalContainerStorageEnabled);
    if (j.contains("ClusterId")) j.at("ClusterId").get_to(v_clusterId);
    if (j.contains("ContainerStoragePath")) j.at("ContainerStoragePath").get_to(v_containerStoragePath);
    if (j.contains("CreateClientToken")) j.at("CreateClientToken").get_to(v_createClientToken);
    if (j.contains("CreateTime")) j.at("CreateTime").get_to(v_createTime);
    if (j.contains("Id")) j.at("Id").get_to(v_id);
    if (j.contains("ImageId")) j.at("ImageId").get_to(v_imageId);
    if (j.contains("InitializeScript")) j.at("InitializeScript").get_to(v_initializeScript);
    if (j.contains("InstanceId")) j.at("InstanceId").get_to(v_instanceId);
    if (j.contains("IsVirtual")) j.at("IsVirtual").get_to(v_isVirtual);
    if (j.contains("KubernetesConfig")){
        json kubernetesConfigPres = j.at("KubernetesConfig");
        auto next = std::make_shared<KubernetesConfigForListNodesOutput>();
        next->fromJsonString(to_string(kubernetesConfigPres));
        v_kubernetesConfig = next;
    }
    if (j.contains("Name")) j.at("Name").get_to(v_name);
    if (j.contains("NodePoolId")) j.at("NodePoolId").get_to(v_nodePoolId);
    if (j.contains("Roles")){
        json rolesPres = j.at("Roles");
        for (auto & pre : rolesPres) {
           v_roles.emplace_back(pre);
        }
    }
    if (j.contains("Status")){
        json statusPres = j.at("Status");
        auto next = std::make_shared<StatusForListNodesOutput>();
        next->fromJsonString(to_string(statusPres));
        v_status = next;
    }
    if (j.contains("UpdateTime")) j.at("UpdateTime").get_to(v_updateTime);
    if (j.contains("ZoneId")) j.at("ZoneId").get_to(v_zoneId);
}
