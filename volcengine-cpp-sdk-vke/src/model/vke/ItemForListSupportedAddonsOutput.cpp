/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/vke/model/ItemForListSupportedAddonsOutput.h"

using namespace volcengine;
using namespace volcengine::vke;
using namespace nlohmann;

void ItemForListSupportedAddonsOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("Categories")){
        json categoriesPres = j.at("Categories");
        for (auto & pre : categoriesPres) {
           v_categories.emplace_back(pre);
        }
    }
    if (j.contains("DeployMode")) j.at("DeployMode").get_to(v_deployMode);
    if (j.contains("DeployNodeTypes")){
        json deployNodeTypesPres = j.at("DeployNodeTypes");
        for (auto & pre : deployNodeTypesPres) {
           v_deployNodeTypes.emplace_back(pre);
        }
    }
    if (j.contains("Name")) j.at("Name").get_to(v_name);
    if (j.contains("Necessary")) j.at("Necessary").get_to(v_necessary);
    if (j.contains("PodNetworkModes")){
        json podNetworkModesPres = j.at("PodNetworkModes");
        for (auto & pre : podNetworkModesPres) {
           v_podNetworkModes.emplace_back(pre);
        }
    }
    if (j.contains("Versions")){
        json versionsPres = j.at("Versions");
        for (auto & pre : versionsPres) {
           VersionForListSupportedAddonsOutput next;
           next.fromJsonString(to_string(pre));
           v_versions.emplace_back(next);
        }
    }
}
