/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_FILTERFORLISTSUPPORTEDADDONSINPUT_H
#define VOLCENGINE_VKE_FILTERFORLISTSUPPORTEDADDONSINPUT_H
#include <string>
#include "volcengine/core/utils/json.hpp"
#include <volcengine/core/RequestBuilder.h>
using namespace nlohmann;

namespace volcengine{
    namespace vke{
        class FilterForListSupportedAddonsInput {
        public:
            FilterForListSupportedAddonsInput();
            ~FilterForListSupportedAddonsInput() = default;

            static RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain);
            json jsonPayload() const;

            const std::vector<std::string> &getCategories()const { return  v_categories; }
            bool CategoriesHasBeenSet() const { return v_categoriesHasBeenSet; }
            void setCategories(const std::vector<std::string> &s_categories ) {
                v_categories = s_categories;
                v_categoriesHasBeenSet = true;
            }
            const std::vector<std::string> &getDeployModes()const { return  v_deployModes; }
            bool DeployModesHasBeenSet() const { return v_deployModesHasBeenSet; }
            void setDeployModes(const std::vector<std::string> &s_deployModes ) {
                v_deployModes = s_deployModes;
                v_deployModesHasBeenSet = true;
            }
            const std::vector<std::string> &getDeployNodeTypes()const { return  v_deployNodeTypes; }
            bool DeployNodeTypesHasBeenSet() const { return v_deployNodeTypesHasBeenSet; }
            void setDeployNodeTypes(const std::vector<std::string> &s_deployNodeTypes ) {
                v_deployNodeTypes = s_deployNodeTypes;
                v_deployNodeTypesHasBeenSet = true;
            }
            const std::string &getName()const { return  v_name; }
            bool NameHasBeenSet() const { return v_nameHasBeenSet; }
            void setName(const std::string &s_name ) {
                v_name = s_name;
                v_nameHasBeenSet = true;
            }
            const std::vector<std::string> &getNecessaries()const { return  v_necessaries; }
            bool NecessariesHasBeenSet() const { return v_necessariesHasBeenSet; }
            void setNecessaries(const std::vector<std::string> &s_necessaries ) {
                v_necessaries = s_necessaries;
                v_necessariesHasBeenSet = true;
            }
            const std::vector<std::string> &getPodNetworkModes()const { return  v_podNetworkModes; }
            bool PodNetworkModesHasBeenSet() const { return v_podNetworkModesHasBeenSet; }
            void setPodNetworkModes(const std::vector<std::string> &s_podNetworkModes ) {
                v_podNetworkModes = s_podNetworkModes;
                v_podNetworkModesHasBeenSet = true;
            }
            const std::vector<std::string> &getVersionsCompatibilitiesKubernetesVersions()const { return  v_versionsCompatibilitiesKubernetesVersions; }
            bool VersionsCompatibilitiesKubernetesVersionsHasBeenSet() const { return v_versionsCompatibilitiesKubernetesVersionsHasBeenSet; }
            void setVersionsCompatibilitiesKubernetesVersions(const std::vector<std::string> &s_versionsCompatibilitiesKubernetesVersions ) {
                v_versionsCompatibilitiesKubernetesVersions = s_versionsCompatibilitiesKubernetesVersions;
                v_versionsCompatibilitiesKubernetesVersionsHasBeenSet = true;
            }
        private:
            std::vector<std::string> v_categories;
            bool v_categoriesHasBeenSet;

            std::vector<std::string> v_deployModes;
            bool v_deployModesHasBeenSet;

            std::vector<std::string> v_deployNodeTypes;
            bool v_deployNodeTypesHasBeenSet;

            std::string v_name;
            bool v_nameHasBeenSet;

            std::vector<std::string> v_necessaries;
            bool v_necessariesHasBeenSet;

            std::vector<std::string> v_podNetworkModes;
            bool v_podNetworkModesHasBeenSet;

            std::vector<std::string> v_versionsCompatibilitiesKubernetesVersions;
            bool v_versionsCompatibilitiesKubernetesVersionsHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VKE_FILTERFORLISTSUPPORTEDADDONSINPUT_H