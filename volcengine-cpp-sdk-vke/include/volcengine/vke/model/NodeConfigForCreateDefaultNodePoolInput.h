/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_NODECONFIGFORCREATEDEFAULTNODEPOOLINPUT_H
#define VOLCENGINE_VKE_NODECONFIGFORCREATEDEFAULTNODEPOOLINPUT_H
#include <string>
#include "volcengine/core/utils/json.hpp"
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/vke/model/SecurityForCreateDefaultNodePoolInput.h"
#include "volcengine/vke/model/TagForCreateDefaultNodePoolInput.h"
using namespace nlohmann;

namespace volcengine{
    namespace vke{
        class NodeConfigForCreateDefaultNodePoolInput {
        public:
            NodeConfigForCreateDefaultNodePoolInput();
            ~NodeConfigForCreateDefaultNodePoolInput() = default;

            static RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain);
            json jsonPayload() const;

            const std::string &getInitializeScript()const { return  v_initializeScript; }
            bool InitializeScriptHasBeenSet() const { return v_initializeScriptHasBeenSet; }
            void setInitializeScript(const std::string &s_initializeScript ) {
                v_initializeScript = s_initializeScript;
                v_initializeScriptHasBeenSet = true;
            }
            const std::string &getNamePrefix()const { return  v_namePrefix; }
            bool NamePrefixHasBeenSet() const { return v_namePrefixHasBeenSet; }
            void setNamePrefix(const std::string &s_namePrefix ) {
                v_namePrefix = s_namePrefix;
                v_namePrefixHasBeenSet = true;
            }
            const std::shared_ptr<SecurityForCreateDefaultNodePoolInput> &getSecurity()const { return  v_security; }
            bool SecurityHasBeenSet() const { return v_securityHasBeenSet; }
            void setSecurity(const std::shared_ptr<SecurityForCreateDefaultNodePoolInput> &s_security ) {
                v_security = s_security;
                v_securityHasBeenSet = true;
            }
            const std::vector<TagForCreateDefaultNodePoolInput> &getTags()const { return  v_tags; }
            bool TagsHasBeenSet() const { return v_tagsHasBeenSet; }
            void setTags(const std::vector<TagForCreateDefaultNodePoolInput> &s_tags ) {
                v_tags = s_tags;
                v_tagsHasBeenSet = true;
            }
        private:
            std::string v_initializeScript;
            bool v_initializeScriptHasBeenSet;

            std::string v_namePrefix;
            bool v_namePrefixHasBeenSet;

            std::shared_ptr<SecurityForCreateDefaultNodePoolInput> v_security;
            bool v_securityHasBeenSet;

            std::vector<TagForCreateDefaultNodePoolInput> v_tags;
            bool v_tagsHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VKE_NODECONFIGFORCREATEDEFAULTNODEPOOLINPUT_H