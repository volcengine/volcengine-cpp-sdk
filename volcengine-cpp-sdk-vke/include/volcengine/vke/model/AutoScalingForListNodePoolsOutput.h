/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_AUTOSCALINGFORLISTNODEPOOLSOUTPUT_H
#define VOLCENGINE_VKE_AUTOSCALINGFORLISTNODEPOOLSOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace vke{
        class AutoScalingForListNodePoolsOutput {
        public:
            AutoScalingForListNodePoolsOutput() = default;
            ~AutoScalingForListNodePoolsOutput() = default;
            void fromJsonString(const std::string &input);
            const int getDesiredReplicas() const { return  v_desiredReplicas; }
            void setDesiredReplicas(const int s_desiredReplicas ) {
                v_desiredReplicas = s_desiredReplicas;
            }
            const bool isEnabled() const { return  v_enabled; }
            void setEnabled(const bool s_enabled ) {
                v_enabled = s_enabled;
            }
            const int getMaxReplicas() const { return  v_maxReplicas; }
            void setMaxReplicas(const int s_maxReplicas ) {
                v_maxReplicas = s_maxReplicas;
            }
            const int getMinReplicas() const { return  v_minReplicas; }
            void setMinReplicas(const int s_minReplicas ) {
                v_minReplicas = s_minReplicas;
            }
            const int getPriority() const { return  v_priority; }
            void setPriority(const int s_priority ) {
                v_priority = s_priority;
            }
            const std::string &getSubnetPolicy() const { return  v_subnetPolicy; }
            void setSubnetPolicy(const std::string &s_subnetPolicy ) {
                v_subnetPolicy = s_subnetPolicy;
            }
        private:
            int v_desiredReplicas{};
            bool v_enabled{};
            int v_maxReplicas{};
            int v_minReplicas{};
            int v_priority{};
            std::string v_subnetPolicy;
        };
    }
}
#endif // !VOLCENGINE_VKE_AUTOSCALINGFORLISTNODEPOOLSOUTPUT_H