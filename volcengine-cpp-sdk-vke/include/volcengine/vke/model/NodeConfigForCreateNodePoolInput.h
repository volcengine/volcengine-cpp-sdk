/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_NODECONFIGFORCREATENODEPOOLINPUT_H
#define VOLCENGINE_VKE_NODECONFIGFORCREATENODEPOOLINPUT_H
#include <string>
#include "volcengine/core/utils/json.hpp"
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/vke/model/DataVolumeForCreateNodePoolInput.h"
#include "volcengine/vke/model/SecurityForCreateNodePoolInput.h"
#include "volcengine/vke/model/SystemVolumeForCreateNodePoolInput.h"
#include "volcengine/vke/model/TagForCreateNodePoolInput.h"
using namespace nlohmann;

namespace volcengine{
    namespace vke{
        class NodeConfigForCreateNodePoolInput {
        public:
            NodeConfigForCreateNodePoolInput();
            ~NodeConfigForCreateNodePoolInput() = default;

            static RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain);
            json jsonPayload() const;

            bool isAdditionalContainerStorageEnabled()const { return  v_additionalContainerStorageEnabled; }
            bool AdditionalContainerStorageEnabledHasBeenSet() const { return v_additionalContainerStorageEnabledHasBeenSet; }
            void setAdditionalContainerStorageEnabled(const bool s_additionalContainerStorageEnabled ) {
                v_additionalContainerStorageEnabled = s_additionalContainerStorageEnabled;
                v_additionalContainerStorageEnabledHasBeenSet = true;
            }
            bool isAutoRenew()const { return  v_autoRenew; }
            bool AutoRenewHasBeenSet() const { return v_autoRenewHasBeenSet; }
            void setAutoRenew(const bool s_autoRenew ) {
                v_autoRenew = s_autoRenew;
                v_autoRenewHasBeenSet = true;
            }
            int getAutoRenewPeriod()const { return  v_autoRenewPeriod; }
            bool AutoRenewPeriodHasBeenSet() const { return v_autoRenewPeriodHasBeenSet; }
            void setAutoRenewPeriod(const int s_autoRenewPeriod ) {
                v_autoRenewPeriod = s_autoRenewPeriod;
                v_autoRenewPeriodHasBeenSet = true;
            }
            const std::vector<DataVolumeForCreateNodePoolInput> &getDataVolumes()const { return  v_dataVolumes; }
            bool DataVolumesHasBeenSet() const { return v_dataVolumesHasBeenSet; }
            void setDataVolumes(const std::vector<DataVolumeForCreateNodePoolInput> &s_dataVolumes ) {
                v_dataVolumes = s_dataVolumes;
                v_dataVolumesHasBeenSet = true;
            }
            const std::vector<std::string> &getHpcClusterIds()const { return  v_hpcClusterIds; }
            bool HpcClusterIdsHasBeenSet() const { return v_hpcClusterIdsHasBeenSet; }
            void setHpcClusterIds(const std::vector<std::string> &s_hpcClusterIds ) {
                v_hpcClusterIds = s_hpcClusterIds;
                v_hpcClusterIdsHasBeenSet = true;
            }
            const std::string &getImageId()const { return  v_imageId; }
            bool ImageIdHasBeenSet() const { return v_imageIdHasBeenSet; }
            void setImageId(const std::string &s_imageId ) {
                v_imageId = s_imageId;
                v_imageIdHasBeenSet = true;
            }
            const std::string &getInitializeScript()const { return  v_initializeScript; }
            bool InitializeScriptHasBeenSet() const { return v_initializeScriptHasBeenSet; }
            void setInitializeScript(const std::string &s_initializeScript ) {
                v_initializeScript = s_initializeScript;
                v_initializeScriptHasBeenSet = true;
            }
            const std::string &getInstanceChargeType()const { return  v_instanceChargeType; }
            bool InstanceChargeTypeHasBeenSet() const { return v_instanceChargeTypeHasBeenSet; }
            void setInstanceChargeType(const std::string &s_instanceChargeType ) {
                v_instanceChargeType = s_instanceChargeType;
                v_instanceChargeTypeHasBeenSet = true;
            }
            const std::vector<std::string> &getInstanceTypeIds()const { return  v_instanceTypeIds; }
            bool InstanceTypeIdsHasBeenSet() const { return v_instanceTypeIdsHasBeenSet; }
            void setInstanceTypeIds(const std::vector<std::string> &s_instanceTypeIds ) {
                v_instanceTypeIds = s_instanceTypeIds;
                v_instanceTypeIdsHasBeenSet = true;
            }
            const std::string &getNamePrefix()const { return  v_namePrefix; }
            bool NamePrefixHasBeenSet() const { return v_namePrefixHasBeenSet; }
            void setNamePrefix(const std::string &s_namePrefix ) {
                v_namePrefix = s_namePrefix;
                v_namePrefixHasBeenSet = true;
            }
            int getPeriod()const { return  v_period; }
            bool PeriodHasBeenSet() const { return v_periodHasBeenSet; }
            void setPeriod(const int s_period ) {
                v_period = s_period;
                v_periodHasBeenSet = true;
            }
            const std::shared_ptr<SecurityForCreateNodePoolInput> &getSecurity()const { return  v_security; }
            bool SecurityHasBeenSet() const { return v_securityHasBeenSet; }
            void setSecurity(const std::shared_ptr<SecurityForCreateNodePoolInput> &s_security ) {
                v_security = s_security;
                v_securityHasBeenSet = true;
            }
            const std::vector<std::string> &getSubnetIds()const { return  v_subnetIds; }
            bool SubnetIdsHasBeenSet() const { return v_subnetIdsHasBeenSet; }
            void setSubnetIds(const std::vector<std::string> &s_subnetIds ) {
                v_subnetIds = s_subnetIds;
                v_subnetIdsHasBeenSet = true;
            }
            const std::shared_ptr<SystemVolumeForCreateNodePoolInput> &getSystemVolume()const { return  v_systemVolume; }
            bool SystemVolumeHasBeenSet() const { return v_systemVolumeHasBeenSet; }
            void setSystemVolume(const std::shared_ptr<SystemVolumeForCreateNodePoolInput> &s_systemVolume ) {
                v_systemVolume = s_systemVolume;
                v_systemVolumeHasBeenSet = true;
            }
            const std::vector<TagForCreateNodePoolInput> &getTags()const { return  v_tags; }
            bool TagsHasBeenSet() const { return v_tagsHasBeenSet; }
            void setTags(const std::vector<TagForCreateNodePoolInput> &s_tags ) {
                v_tags = s_tags;
                v_tagsHasBeenSet = true;
            }
        private:
            bool v_additionalContainerStorageEnabled;
            bool v_additionalContainerStorageEnabledHasBeenSet;

            bool v_autoRenew;
            bool v_autoRenewHasBeenSet;

            int v_autoRenewPeriod;
            bool v_autoRenewPeriodHasBeenSet;

            std::vector<DataVolumeForCreateNodePoolInput> v_dataVolumes;
            bool v_dataVolumesHasBeenSet;

            std::vector<std::string> v_hpcClusterIds;
            bool v_hpcClusterIdsHasBeenSet;

            std::string v_imageId;
            bool v_imageIdHasBeenSet;

            std::string v_initializeScript;
            bool v_initializeScriptHasBeenSet;

            std::string v_instanceChargeType;
            bool v_instanceChargeTypeHasBeenSet;

            std::vector<std::string> v_instanceTypeIds;
            bool v_instanceTypeIdsHasBeenSet;

            std::string v_namePrefix;
            bool v_namePrefixHasBeenSet;

            int v_period;
            bool v_periodHasBeenSet;

            std::shared_ptr<SecurityForCreateNodePoolInput> v_security;
            bool v_securityHasBeenSet;

            std::vector<std::string> v_subnetIds;
            bool v_subnetIdsHasBeenSet;

            std::shared_ptr<SystemVolumeForCreateNodePoolInput> v_systemVolume;
            bool v_systemVolumeHasBeenSet;

            std::vector<TagForCreateNodePoolInput> v_tags;
            bool v_tagsHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VKE_NODECONFIGFORCREATENODEPOOLINPUT_H