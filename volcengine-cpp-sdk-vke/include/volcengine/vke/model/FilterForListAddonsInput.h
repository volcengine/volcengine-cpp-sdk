/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_FILTERFORLISTADDONSINPUT_H
#define VOLCENGINE_VKE_FILTERFORLISTADDONSINPUT_H
#include <string>
#include "volcengine/core/utils/json.hpp"
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/vke/model/StatusForListAddonsInput.h"
using namespace nlohmann;

namespace volcengine{
    namespace vke{
        class FilterForListAddonsInput {
        public:
            FilterForListAddonsInput();
            ~FilterForListAddonsInput() = default;

            static RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain);
            json jsonPayload() const;

            const std::vector<std::string> &getClusterIds()const { return  v_clusterIds; }
            bool ClusterIdsHasBeenSet() const { return v_clusterIdsHasBeenSet; }
            void setClusterIds(const std::vector<std::string> &s_clusterIds ) {
                v_clusterIds = s_clusterIds;
                v_clusterIdsHasBeenSet = true;
            }
            const std::string &getCreateClientToken()const { return  v_createClientToken; }
            bool CreateClientTokenHasBeenSet() const { return v_createClientTokenHasBeenSet; }
            void setCreateClientToken(const std::string &s_createClientToken ) {
                v_createClientToken = s_createClientToken;
                v_createClientTokenHasBeenSet = true;
            }
            const std::vector<std::string> &getDeployModes()const { return  v_deployModes; }
            bool DeployModesHasBeenSet() const { return v_deployModesHasBeenSet; }
            void setDeployModes(const std::vector<std::string> &s_deployModes ) {
                v_deployModes = s_deployModes;
                v_deployModesHasBeenSet = true;
            }
            const std::vector<std::string> &getDeployNodeTypes()const { return  v_deployNodeTypes; }
            bool DeployNodeTypesHasBeenSet() const { return v_deployNodeTypesHasBeenSet; }
            void setDeployNodeTypes(const std::vector<std::string> &s_deployNodeTypes ) {
                v_deployNodeTypes = s_deployNodeTypes;
                v_deployNodeTypesHasBeenSet = true;
            }
            const std::vector<std::string> &getNames()const { return  v_names; }
            bool NamesHasBeenSet() const { return v_namesHasBeenSet; }
            void setNames(const std::vector<std::string> &s_names ) {
                v_names = s_names;
                v_namesHasBeenSet = true;
            }
            const std::vector<StatusForListAddonsInput> &getStatuses()const { return  v_statuses; }
            bool StatusesHasBeenSet() const { return v_statusesHasBeenSet; }
            void setStatuses(const std::vector<StatusForListAddonsInput> &s_statuses ) {
                v_statuses = s_statuses;
                v_statusesHasBeenSet = true;
            }
            const std::string &getUpdateClientToken()const { return  v_updateClientToken; }
            bool UpdateClientTokenHasBeenSet() const { return v_updateClientTokenHasBeenSet; }
            void setUpdateClientToken(const std::string &s_updateClientToken ) {
                v_updateClientToken = s_updateClientToken;
                v_updateClientTokenHasBeenSet = true;
            }
        private:
            std::vector<std::string> v_clusterIds;
            bool v_clusterIdsHasBeenSet;

            std::string v_createClientToken;
            bool v_createClientTokenHasBeenSet;

            std::vector<std::string> v_deployModes;
            bool v_deployModesHasBeenSet;

            std::vector<std::string> v_deployNodeTypes;
            bool v_deployNodeTypesHasBeenSet;

            std::vector<std::string> v_names;
            bool v_namesHasBeenSet;

            std::vector<StatusForListAddonsInput> v_statuses;
            bool v_statusesHasBeenSet;

            std::string v_updateClientToken;
            bool v_updateClientTokenHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VKE_FILTERFORLISTADDONSINPUT_H