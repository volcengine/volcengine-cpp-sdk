/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_ITEMFORLISTNODESOUTPUT_H
#define VOLCENGINE_VKE_ITEMFORLISTNODESOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/vke/model/KubernetesConfigForListNodesOutput.h"
#include "volcengine/vke/model/StatusForListNodesOutput.h"
namespace volcengine{
    namespace vke{
        class ItemForListNodesOutput {
        public:
            ItemForListNodesOutput() = default;
            ~ItemForListNodesOutput() = default;
            void fromJsonString(const std::string &input);
            const bool isAdditionalContainerStorageEnabled() const { return  v_additionalContainerStorageEnabled; }
            void setAdditionalContainerStorageEnabled(const bool s_additionalContainerStorageEnabled ) {
                v_additionalContainerStorageEnabled = s_additionalContainerStorageEnabled;
            }
            const std::string &getClusterId() const { return  v_clusterId; }
            void setClusterId(const std::string &s_clusterId ) {
                v_clusterId = s_clusterId;
            }
            const std::string &getContainerStoragePath() const { return  v_containerStoragePath; }
            void setContainerStoragePath(const std::string &s_containerStoragePath ) {
                v_containerStoragePath = s_containerStoragePath;
            }
            const std::string &getCreateClientToken() const { return  v_createClientToken; }
            void setCreateClientToken(const std::string &s_createClientToken ) {
                v_createClientToken = s_createClientToken;
            }
            const std::string &getCreateTime() const { return  v_createTime; }
            void setCreateTime(const std::string &s_createTime ) {
                v_createTime = s_createTime;
            }
            const std::string &getId() const { return  v_id; }
            void setId(const std::string &s_id ) {
                v_id = s_id;
            }
            const std::string &getImageId() const { return  v_imageId; }
            void setImageId(const std::string &s_imageId ) {
                v_imageId = s_imageId;
            }
            const std::string &getInitializeScript() const { return  v_initializeScript; }
            void setInitializeScript(const std::string &s_initializeScript ) {
                v_initializeScript = s_initializeScript;
            }
            const std::string &getInstanceId() const { return  v_instanceId; }
            void setInstanceId(const std::string &s_instanceId ) {
                v_instanceId = s_instanceId;
            }
            const bool isIsVirtual() const { return  v_isVirtual; }
            void setIsVirtual(const bool s_isVirtual ) {
                v_isVirtual = s_isVirtual;
            }
            const std::shared_ptr<KubernetesConfigForListNodesOutput> &getKubernetesConfig() const { return  v_kubernetesConfig; }
            void setKubernetesConfig(const std::shared_ptr<KubernetesConfigForListNodesOutput> &s_kubernetesConfig ) {
                v_kubernetesConfig = s_kubernetesConfig;
            }
            const std::string &getName() const { return  v_name; }
            void setName(const std::string &s_name ) {
                v_name = s_name;
            }
            const std::string &getNodePoolId() const { return  v_nodePoolId; }
            void setNodePoolId(const std::string &s_nodePoolId ) {
                v_nodePoolId = s_nodePoolId;
            }
            const std::vector<std::string> &getRoles() const { return  v_roles; }
            void setRoles(const std::vector<std::string> &s_roles ) {
                v_roles = s_roles;
            }
            const std::shared_ptr<StatusForListNodesOutput> &getStatus() const { return  v_status; }
            void setStatus(const std::shared_ptr<StatusForListNodesOutput> &s_status ) {
                v_status = s_status;
            }
            const std::string &getUpdateTime() const { return  v_updateTime; }
            void setUpdateTime(const std::string &s_updateTime ) {
                v_updateTime = s_updateTime;
            }
            const std::string &getZoneId() const { return  v_zoneId; }
            void setZoneId(const std::string &s_zoneId ) {
                v_zoneId = s_zoneId;
            }
        private:
            bool v_additionalContainerStorageEnabled{};
            std::string v_clusterId;
            std::string v_containerStoragePath;
            std::string v_createClientToken;
            std::string v_createTime;
            std::string v_id;
            std::string v_imageId;
            std::string v_initializeScript;
            std::string v_instanceId;
            bool v_isVirtual{};
            std::shared_ptr<KubernetesConfigForListNodesOutput> v_kubernetesConfig;
            std::string v_name;
            std::string v_nodePoolId;
            std::vector<std::string> v_roles;
            std::shared_ptr<StatusForListNodesOutput> v_status;
            std::string v_updateTime;
            std::string v_zoneId;
        };
    }
}
#endif // !VOLCENGINE_VKE_ITEMFORLISTNODESOUTPUT_H