/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VKE_VKECLIENT_H
#define VOLCENGINE_VKE_VKECLIENT_H
#include <string>
#include <volcengine/core/ResultData.h>
#include <volcengine/core/VolcengineMetaData.h>
#include <volcengine/core/VolcengineClient.h>
#include "volcengine/vke/model/CreateAddonRequest.h"
#include "volcengine/vke/model/CreateAddonResult.h"
#include "volcengine/vke/model/CreateClusterRequest.h"
#include "volcengine/vke/model/CreateClusterResult.h"
#include "volcengine/vke/model/CreateDefaultNodePoolRequest.h"
#include "volcengine/vke/model/CreateDefaultNodePoolResult.h"
#include "volcengine/vke/model/CreateKubeconfigRequest.h"
#include "volcengine/vke/model/CreateKubeconfigResult.h"
#include "volcengine/vke/model/CreateNodePoolRequest.h"
#include "volcengine/vke/model/CreateNodePoolResult.h"
#include "volcengine/vke/model/CreateNodesRequest.h"
#include "volcengine/vke/model/CreateNodesResult.h"
#include "volcengine/vke/model/DeleteAddonRequest.h"
#include "volcengine/vke/model/DeleteAddonResult.h"
#include "volcengine/vke/model/DeleteClusterRequest.h"
#include "volcengine/vke/model/DeleteClusterResult.h"
#include "volcengine/vke/model/DeleteKubeconfigsRequest.h"
#include "volcengine/vke/model/DeleteKubeconfigsResult.h"
#include "volcengine/vke/model/DeleteNodePoolRequest.h"
#include "volcengine/vke/model/DeleteNodePoolResult.h"
#include "volcengine/vke/model/DeleteNodesRequest.h"
#include "volcengine/vke/model/DeleteNodesResult.h"
#include "volcengine/vke/model/ForwardKubernetesApiRequest.h"
#include "volcengine/vke/model/ForwardKubernetesApiResult.h"
#include "volcengine/vke/model/ListAddonsRequest.h"
#include "volcengine/vke/model/ListAddonsResult.h"
#include "volcengine/vke/model/ListClustersRequest.h"
#include "volcengine/vke/model/ListClustersResult.h"
#include "volcengine/vke/model/ListKubeconfigsRequest.h"
#include "volcengine/vke/model/ListKubeconfigsResult.h"
#include "volcengine/vke/model/ListNodePoolsRequest.h"
#include "volcengine/vke/model/ListNodePoolsResult.h"
#include "volcengine/vke/model/ListNodesRequest.h"
#include "volcengine/vke/model/ListNodesResult.h"
#include "volcengine/vke/model/ListSupportedAddonsRequest.h"
#include "volcengine/vke/model/ListSupportedAddonsResult.h"
#include "volcengine/vke/model/ListSupportedResourceTypesRequest.h"
#include "volcengine/vke/model/ListSupportedResourceTypesResult.h"
#include "volcengine/vke/model/ListTagsForResourcesRequest.h"
#include "volcengine/vke/model/ListTagsForResourcesResult.h"
#include "volcengine/vke/model/TagResourcesRequest.h"
#include "volcengine/vke/model/TagResourcesResult.h"
#include "volcengine/vke/model/UntagResourcesRequest.h"
#include "volcengine/vke/model/UntagResourcesResult.h"
#include "volcengine/vke/model/UpdateAddonConfigRequest.h"
#include "volcengine/vke/model/UpdateAddonConfigResult.h"
#include "volcengine/vke/model/UpdateAddonVersionRequest.h"
#include "volcengine/vke/model/UpdateAddonVersionResult.h"
#include "volcengine/vke/model/UpdateClusterConfigRequest.h"
#include "volcengine/vke/model/UpdateClusterConfigResult.h"
#include "volcengine/vke/model/UpdateNodePoolConfigRequest.h"
#include "volcengine/vke/model/UpdateNodePoolConfigResult.h"
namespace volcengine{
    namespace vke{
        class VkeClient {
        public:
            explicit VkeClient(const std::shared_ptr<VolcengineClientConfig> &config);

            ~VkeClient() = default;

            ResultData<VolcengineMetadata, CreateAddonResult> CreateAddon(const CreateAddonRequest &input) const;

            ResultData<VolcengineMetadata, CreateClusterResult> CreateCluster(const CreateClusterRequest &input) const;

            ResultData<VolcengineMetadata, CreateDefaultNodePoolResult> CreateDefaultNodePool(const CreateDefaultNodePoolRequest &input) const;

            ResultData<VolcengineMetadata, CreateKubeconfigResult> CreateKubeconfig(const CreateKubeconfigRequest &input) const;

            ResultData<VolcengineMetadata, CreateNodePoolResult> CreateNodePool(const CreateNodePoolRequest &input) const;

            ResultData<VolcengineMetadata, CreateNodesResult> CreateNodes(const CreateNodesRequest &input) const;

            ResultData<VolcengineMetadata, DeleteAddonResult> DeleteAddon(const DeleteAddonRequest &input) const;

            ResultData<VolcengineMetadata, DeleteClusterResult> DeleteCluster(const DeleteClusterRequest &input) const;

            ResultData<VolcengineMetadata, DeleteKubeconfigsResult> DeleteKubeconfigs(const DeleteKubeconfigsRequest &input) const;

            ResultData<VolcengineMetadata, DeleteNodePoolResult> DeleteNodePool(const DeleteNodePoolRequest &input) const;

            ResultData<VolcengineMetadata, DeleteNodesResult> DeleteNodes(const DeleteNodesRequest &input) const;

            ResultData<VolcengineMetadata, ForwardKubernetesApiResult> ForwardKubernetesApi(const ForwardKubernetesApiRequest &input) const;

            ResultData<VolcengineMetadata, ListAddonsResult> ListAddons(const ListAddonsRequest &input) const;

            ResultData<VolcengineMetadata, ListClustersResult> ListClusters(const ListClustersRequest &input) const;

            ResultData<VolcengineMetadata, ListKubeconfigsResult> ListKubeconfigs(const ListKubeconfigsRequest &input) const;

            ResultData<VolcengineMetadata, ListNodePoolsResult> ListNodePools(const ListNodePoolsRequest &input) const;

            ResultData<VolcengineMetadata, ListNodesResult> ListNodes(const ListNodesRequest &input) const;

            ResultData<VolcengineMetadata, ListSupportedAddonsResult> ListSupportedAddons(const ListSupportedAddonsRequest &input) const;

            ResultData<VolcengineMetadata, ListSupportedResourceTypesResult> ListSupportedResourceTypes(const ListSupportedResourceTypesRequest &input) const;

            ResultData<VolcengineMetadata, ListTagsForResourcesResult> ListTagsForResources(const ListTagsForResourcesRequest &input) const;

            ResultData<VolcengineMetadata, TagResourcesResult> TagResources(const TagResourcesRequest &input) const;

            ResultData<VolcengineMetadata, UntagResourcesResult> UntagResources(const UntagResourcesRequest &input) const;

            ResultData<VolcengineMetadata, UpdateAddonConfigResult> UpdateAddonConfig(const UpdateAddonConfigRequest &input) const;

            ResultData<VolcengineMetadata, UpdateAddonVersionResult> UpdateAddonVersion(const UpdateAddonVersionRequest &input) const;

            ResultData<VolcengineMetadata, UpdateClusterConfigResult> UpdateClusterConfig(const UpdateClusterConfigRequest &input) const;

            ResultData<VolcengineMetadata, UpdateNodePoolConfigResult> UpdateNodePoolConfig(const UpdateNodePoolConfigRequest &input) const;

        private:
            std::shared_ptr<VolcengineClient> client_;
            std::string svc_ = "vke";
        };
    }
}
#endif // !VOLCENGINE_VKE_VKECLIENT_H