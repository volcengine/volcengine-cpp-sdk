/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/storageebs/model/VolumeForDescribeVolumesOutput.h"

using namespace volcengine;
using namespace volcengine::storageebs;
using namespace nlohmann;

void VolumeForDescribeVolumesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("AutoSnapshotPolicyId")) j.at("AutoSnapshotPolicyId").get_to(v_autoSnapshotPolicyId);
    if (j.contains("AutoSnapshotPolicyName")) j.at("AutoSnapshotPolicyName").get_to(v_autoSnapshotPolicyName);
    if (j.contains("BillingType")) j.at("BillingType").get_to(v_billingType);
    if (j.contains("CreatedAt")) j.at("CreatedAt").get_to(v_createdAt);
    if (j.contains("DeleteWithInstance")) j.at("DeleteWithInstance").get_to(v_deleteWithInstance);
    if (j.contains("Description")) j.at("Description").get_to(v_description);
    if (j.contains("DeviceName")) j.at("DeviceName").get_to(v_deviceName);
    if (j.contains("ErrorDetail")) j.at("ErrorDetail").get_to(v_errorDetail);
    if (j.contains("ExpiredTime")) j.at("ExpiredTime").get_to(v_expiredTime);
    if (j.contains("ImageId")) j.at("ImageId").get_to(v_imageId);
    if (j.contains("InstanceId")) j.at("InstanceId").get_to(v_instanceId);
    if (j.contains("Kind")) j.at("Kind").get_to(v_kind);
    if (j.contains("OverdueReclaimTime")) j.at("OverdueReclaimTime").get_to(v_overdueReclaimTime);
    if (j.contains("OverdueTime")) j.at("OverdueTime").get_to(v_overdueTime);
    if (j.contains("PayType")) j.at("PayType").get_to(v_payType);
    if (j.contains("ProjectName")) j.at("ProjectName").get_to(v_projectName);
    if (j.contains("RenewType")) j.at("RenewType").get_to(v_renewType);
    if (j.contains("Size")) j.at("Size").get_to(v_size);
    if (j.contains("SnapshotCount")) j.at("SnapshotCount").get_to(v_snapshotCount);
    if (j.contains("SourceSnapshotId")) j.at("SourceSnapshotId").get_to(v_sourceSnapshotId);
    if (j.contains("Status")) j.at("Status").get_to(v_status);
    if (j.contains("Tags")){
        json tagsPres = j.at("Tags");
        for (auto & pre : tagsPres) {
           TagForDescribeVolumesOutput next;
           next.fromJsonString(to_string(pre));
           v_tags.emplace_back(next);
        }
    }
    if (j.contains("TradeStatus")) j.at("TradeStatus").get_to(v_tradeStatus);
    if (j.contains("UpdatedAt")) j.at("UpdatedAt").get_to(v_updatedAt);
    if (j.contains("VolumeId")) j.at("VolumeId").get_to(v_volumeId);
    if (j.contains("VolumeName")) j.at("VolumeName").get_to(v_volumeName);
    if (j.contains("VolumeType")) j.at("VolumeType").get_to(v_volumeType);
    if (j.contains("ZoneId")) j.at("ZoneId").get_to(v_zoneId);
}
