/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#pragma once
#include <volcengine/core/VolcengineClient.h>
#include "volcengine/storageebs/StorageebsClient.h"

using namespace volcengine;
using namespace volcengine::storageebs;

StorageebsClient::StorageebsClient(const std::shared_ptr<VolcengineClientConfig> &config) {
    client_ = std::make_shared<VolcengineClient>(config);
}


ResultData<VolcengineMetadata, AttachVolumeResult> StorageebsClient::AttachVolume(const AttachVolumeRequest &input) const{
    ResultData<VolcengineMetadata, AttachVolumeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<AttachVolumeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateTagsResult> StorageebsClient::CreateTags(const CreateTagsRequest &input) const{
    ResultData<VolcengineMetadata, CreateTagsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateTagsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, CreateVolumeResult> StorageebsClient::CreateVolume(const CreateVolumeRequest &input) const{
    ResultData<VolcengineMetadata, CreateVolumeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<CreateVolumeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteTagsResult> StorageebsClient::DeleteTags(const DeleteTagsRequest &input) const{
    ResultData<VolcengineMetadata, DeleteTagsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteTagsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DeleteVolumeResult> StorageebsClient::DeleteVolume(const DeleteVolumeRequest &input) const{
    ResultData<VolcengineMetadata, DeleteVolumeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DeleteVolumeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeTagsResult> StorageebsClient::DescribeTags(const DescribeTagsRequest &input) const{
    ResultData<VolcengineMetadata, DescribeTagsResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeTagsResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DescribeVolumesResult> StorageebsClient::DescribeVolumes(const DescribeVolumesRequest &input) const{
    ResultData<VolcengineMetadata, DescribeVolumesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DescribeVolumesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, DetachVolumeResult> StorageebsClient::DetachVolume(const DetachVolumeRequest &input) const{
    ResultData<VolcengineMetadata, DetachVolumeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<DetachVolumeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ExtendVolumeResult> StorageebsClient::ExtendVolume(const ExtendVolumeRequest &input) const{
    ResultData<VolcengineMetadata, ExtendVolumeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ExtendVolumeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyVolumeAttributeResult> StorageebsClient::ModifyVolumeAttribute(const ModifyVolumeAttributeRequest &input) const{
    ResultData<VolcengineMetadata, ModifyVolumeAttributeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyVolumeAttributeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, ModifyVolumeChargeTypeResult> StorageebsClient::ModifyVolumeChargeType(const ModifyVolumeChargeTypeRequest &input) const{
    ResultData<VolcengineMetadata, ModifyVolumeChargeTypeResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<ModifyVolumeChargeTypeResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}

ResultData<VolcengineMetadata, TerminateVolumesResult> StorageebsClient::TerminateVolumes(const TerminateVolumesRequest &input) const{
    ResultData<VolcengineMetadata, TerminateVolumesResult> result;
    auto rb = client_->initBuilder(svc_);
    rb = input.withRequestBuilder(rb,"");
    auto req = rb.Build(MethodGet);
    auto resp = client_->doCall(req);
    result.setMetadata(resp.getMetadata());
    if (!resp.isSuccess()) {
        result.setSuccess(false);
        return result;
    }
    auto output = std::make_shared<TerminateVolumesResult>();
    output->fromJsonString(resp.getResult()->getResponseBody());
    result.setSuccess(true);
    result.setResult(output);
    return result;
}
