/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPN_DESCRIBEVPNCONNECTIONSREQUEST_H
#define VOLCENGINE_VPN_DESCRIBEVPNCONNECTIONSREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace vpn{
        class DescribeVpnConnectionsRequest {
        public:
            DescribeVpnConnectionsRequest();
            ~DescribeVpnConnectionsRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getAttachStatus()const { return  v_attachStatus; }
            bool AttachStatusHasBeenSet() const { return v_attachStatusHasBeenSet; }
            void setAttachStatus(const std::string &s_attachStatus ) {
                v_attachStatus = s_attachStatus;
                v_attachStatusHasBeenSet = true;
            }
            const std::string &getAttachType()const { return  v_attachType; }
            bool AttachTypeHasBeenSet() const { return v_attachTypeHasBeenSet; }
            void setAttachType(const std::string &s_attachType ) {
                v_attachType = s_attachType;
                v_attachTypeHasBeenSet = true;
            }
            const std::string &getCustomerGatewayId()const { return  v_customerGatewayId; }
            bool CustomerGatewayIdHasBeenSet() const { return v_customerGatewayIdHasBeenSet; }
            void setCustomerGatewayId(const std::string &s_customerGatewayId ) {
                v_customerGatewayId = s_customerGatewayId;
                v_customerGatewayIdHasBeenSet = true;
            }
            int getPageNumber()const { return  v_pageNumber; }
            bool PageNumberHasBeenSet() const { return v_pageNumberHasBeenSet; }
            void setPageNumber(const int s_pageNumber ) {
                v_pageNumber = s_pageNumber;
                v_pageNumberHasBeenSet = true;
            }
            int getPageSize()const { return  v_pageSize; }
            bool PageSizeHasBeenSet() const { return v_pageSizeHasBeenSet; }
            void setPageSize(const int s_pageSize ) {
                v_pageSize = s_pageSize;
                v_pageSizeHasBeenSet = true;
            }
            const std::string &getProjectName()const { return  v_projectName; }
            bool ProjectNameHasBeenSet() const { return v_projectNameHasBeenSet; }
            void setProjectName(const std::string &s_projectName ) {
                v_projectName = s_projectName;
                v_projectNameHasBeenSet = true;
            }
            const std::string &getTransitRouterId()const { return  v_transitRouterId; }
            bool TransitRouterIdHasBeenSet() const { return v_transitRouterIdHasBeenSet; }
            void setTransitRouterId(const std::string &s_transitRouterId ) {
                v_transitRouterId = s_transitRouterId;
                v_transitRouterIdHasBeenSet = true;
            }
            const std::vector<std::string> &getVpnConnectionIds()const { return  v_vpnConnectionIds; }
            bool VpnConnectionIdsHasBeenSet() const { return v_vpnConnectionIdsHasBeenSet; }
            void setVpnConnectionIds(const std::vector<std::string> &s_vpnConnectionIds ) {
                v_vpnConnectionIds = s_vpnConnectionIds;
                v_vpnConnectionIdsHasBeenSet = true;
            }
            const std::string &getVpnConnectionName()const { return  v_vpnConnectionName; }
            bool VpnConnectionNameHasBeenSet() const { return v_vpnConnectionNameHasBeenSet; }
            void setVpnConnectionName(const std::string &s_vpnConnectionName ) {
                v_vpnConnectionName = s_vpnConnectionName;
                v_vpnConnectionNameHasBeenSet = true;
            }
            const std::string &getVpnGatewayId()const { return  v_vpnGatewayId; }
            bool VpnGatewayIdHasBeenSet() const { return v_vpnGatewayIdHasBeenSet; }
            void setVpnGatewayId(const std::string &s_vpnGatewayId ) {
                v_vpnGatewayId = s_vpnGatewayId;
                v_vpnGatewayIdHasBeenSet = true;
            }
        private:
            std::string v_attachStatus;
            bool v_attachStatusHasBeenSet;

            std::string v_attachType;
            bool v_attachTypeHasBeenSet;

            std::string v_customerGatewayId;
            bool v_customerGatewayIdHasBeenSet;

            int v_pageNumber;
            bool v_pageNumberHasBeenSet;

            int v_pageSize;
            bool v_pageSizeHasBeenSet;

            std::string v_projectName;
            bool v_projectNameHasBeenSet;

            std::string v_transitRouterId;
            bool v_transitRouterIdHasBeenSet;

            std::vector<std::string> v_vpnConnectionIds;
            bool v_vpnConnectionIdsHasBeenSet;

            std::string v_vpnConnectionName;
            bool v_vpnConnectionNameHasBeenSet;

            std::string v_vpnGatewayId;
            bool v_vpnGatewayIdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VPN_DESCRIBEVPNCONNECTIONSREQUEST_H