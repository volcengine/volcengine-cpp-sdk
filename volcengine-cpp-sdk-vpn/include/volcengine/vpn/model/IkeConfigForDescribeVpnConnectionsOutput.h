/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPN_IKECONFIGFORDESCRIBEVPNCONNECTIONSOUTPUT_H
#define VOLCENGINE_VPN_IKECONFIGFORDESCRIBEVPNCONNECTIONSOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace vpn{
        class IkeConfigForDescribeVpnConnectionsOutput {
        public:
            IkeConfigForDescribeVpnConnectionsOutput() = default;
            ~IkeConfigForDescribeVpnConnectionsOutput() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAuthAlg() const { return  v_authAlg; }
            void setAuthAlg(const std::string &s_authAlg ) {
                v_authAlg = s_authAlg;
            }
            const std::string &getDhGroup() const { return  v_dhGroup; }
            void setDhGroup(const std::string &s_dhGroup ) {
                v_dhGroup = s_dhGroup;
            }
            const std::string &getEncAlg() const { return  v_encAlg; }
            void setEncAlg(const std::string &s_encAlg ) {
                v_encAlg = s_encAlg;
            }
            const int getLifetime() const { return  v_lifetime; }
            void setLifetime(const int s_lifetime ) {
                v_lifetime = s_lifetime;
            }
            const std::string &getLocalId() const { return  v_localId; }
            void setLocalId(const std::string &s_localId ) {
                v_localId = s_localId;
            }
            const std::string &getMode() const { return  v_mode; }
            void setMode(const std::string &s_mode ) {
                v_mode = s_mode;
            }
            const std::string &getPsk() const { return  v_psk; }
            void setPsk(const std::string &s_psk ) {
                v_psk = s_psk;
            }
            const std::string &getRemoteId() const { return  v_remoteId; }
            void setRemoteId(const std::string &s_remoteId ) {
                v_remoteId = s_remoteId;
            }
            const std::string &getVersion() const { return  v_version; }
            void setVersion(const std::string &s_version ) {
                v_version = s_version;
            }
        private:
            std::string v_authAlg;
            std::string v_dhGroup;
            std::string v_encAlg;
            int v_lifetime{};
            std::string v_localId;
            std::string v_mode;
            std::string v_psk;
            std::string v_remoteId;
            std::string v_version;
        };
    }
}
#endif // !VOLCENGINE_VPN_IKECONFIGFORDESCRIBEVPNCONNECTIONSOUTPUT_H