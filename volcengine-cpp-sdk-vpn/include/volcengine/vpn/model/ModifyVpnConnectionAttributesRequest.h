/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_VPN_MODIFYVPNCONNECTIONATTRIBUTESREQUEST_H
#define VOLCENGINE_VPN_MODIFYVPNCONNECTIONATTRIBUTESREQUEST_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace vpn{
        class ModifyVpnConnectionAttributesRequest {
        public:
            ModifyVpnConnectionAttributesRequest();
            ~ModifyVpnConnectionAttributesRequest() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getDescription()const { return  v_description; }
            bool DescriptionHasBeenSet() const { return v_descriptionHasBeenSet; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
                v_descriptionHasBeenSet = true;
            }
            const std::string &getDpdAction()const { return  v_dpdAction; }
            bool DpdActionHasBeenSet() const { return v_dpdActionHasBeenSet; }
            void setDpdAction(const std::string &s_dpdAction ) {
                v_dpdAction = s_dpdAction;
                v_dpdActionHasBeenSet = true;
            }
            const std::string &getIkeConfig()const { return  v_ikeConfig; }
            bool IkeConfigHasBeenSet() const { return v_ikeConfigHasBeenSet; }
            void setIkeConfig(const std::string &s_ikeConfig ) {
                v_ikeConfig = s_ikeConfig;
                v_ikeConfigHasBeenSet = true;
            }
            const std::string &getIpsecConfig()const { return  v_ipsecConfig; }
            bool IpsecConfigHasBeenSet() const { return v_ipsecConfigHasBeenSet; }
            void setIpsecConfig(const std::string &s_ipsecConfig ) {
                v_ipsecConfig = s_ipsecConfig;
                v_ipsecConfigHasBeenSet = true;
            }
            const std::vector<std::string> &getLocalSubnet()const { return  v_localSubnet; }
            bool LocalSubnetHasBeenSet() const { return v_localSubnetHasBeenSet; }
            void setLocalSubnet(const std::vector<std::string> &s_localSubnet ) {
                v_localSubnet = s_localSubnet;
                v_localSubnetHasBeenSet = true;
            }
            bool isLogEnabled()const { return  v_logEnabled; }
            bool LogEnabledHasBeenSet() const { return v_logEnabledHasBeenSet; }
            void setLogEnabled(const bool s_logEnabled ) {
                v_logEnabled = s_logEnabled;
                v_logEnabledHasBeenSet = true;
            }
            bool isNatTraversal()const { return  v_natTraversal; }
            bool NatTraversalHasBeenSet() const { return v_natTraversalHasBeenSet; }
            void setNatTraversal(const bool s_natTraversal ) {
                v_natTraversal = s_natTraversal;
                v_natTraversalHasBeenSet = true;
            }
            bool isNegotiateInstantly()const { return  v_negotiateInstantly; }
            bool NegotiateInstantlyHasBeenSet() const { return v_negotiateInstantlyHasBeenSet; }
            void setNegotiateInstantly(const bool s_negotiateInstantly ) {
                v_negotiateInstantly = s_negotiateInstantly;
                v_negotiateInstantlyHasBeenSet = true;
            }
            const std::vector<std::string> &getRemoteSubnet()const { return  v_remoteSubnet; }
            bool RemoteSubnetHasBeenSet() const { return v_remoteSubnetHasBeenSet; }
            void setRemoteSubnet(const std::vector<std::string> &s_remoteSubnet ) {
                v_remoteSubnet = s_remoteSubnet;
                v_remoteSubnetHasBeenSet = true;
            }
            const std::string &getVpnConnectionId()const { return  v_vpnConnectionId; }
            bool VpnConnectionIdHasBeenSet() const { return v_vpnConnectionIdHasBeenSet; }
            void setVpnConnectionId(const std::string &s_vpnConnectionId ) {
                v_vpnConnectionId = s_vpnConnectionId;
                v_vpnConnectionIdHasBeenSet = true;
            }
            const std::string &getVpnConnectionName()const { return  v_vpnConnectionName; }
            bool VpnConnectionNameHasBeenSet() const { return v_vpnConnectionNameHasBeenSet; }
            void setVpnConnectionName(const std::string &s_vpnConnectionName ) {
                v_vpnConnectionName = s_vpnConnectionName;
                v_vpnConnectionNameHasBeenSet = true;
            }
        private:
            std::string v_description;
            bool v_descriptionHasBeenSet;

            std::string v_dpdAction;
            bool v_dpdActionHasBeenSet;

            std::string v_ikeConfig;
            bool v_ikeConfigHasBeenSet;

            std::string v_ipsecConfig;
            bool v_ipsecConfigHasBeenSet;

            std::vector<std::string> v_localSubnet;
            bool v_localSubnetHasBeenSet;

            bool v_logEnabled;
            bool v_logEnabledHasBeenSet;

            bool v_natTraversal;
            bool v_natTraversalHasBeenSet;

            bool v_negotiateInstantly;
            bool v_negotiateInstantlyHasBeenSet;

            std::vector<std::string> v_remoteSubnet;
            bool v_remoteSubnetHasBeenSet;

            std::string v_vpnConnectionId;
            bool v_vpnConnectionIdHasBeenSet;

            std::string v_vpnConnectionName;
            bool v_vpnConnectionNameHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_VPN_MODIFYVPNCONNECTIONATTRIBUTESREQUEST_H