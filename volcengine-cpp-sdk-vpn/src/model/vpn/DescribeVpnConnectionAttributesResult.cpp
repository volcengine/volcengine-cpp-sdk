/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/vpn/model/DescribeVpnConnectionAttributesResult.h"

using namespace volcengine;
using namespace volcengine::vpn;
using namespace nlohmann;

void DescribeVpnConnectionAttributesResult::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    j = j.at("Result");
    if (j.contains("AccountId")) j.at("AccountId").get_to(v_accountId);
    if (j.contains("AttachStatus")) j.at("AttachStatus").get_to(v_attachStatus);
    if (j.contains("AttachType")) j.at("AttachType").get_to(v_attachType);
    if (j.contains("BusinessStatus")) j.at("BusinessStatus").get_to(v_businessStatus);
    if (j.contains("ConnectStatus")) j.at("ConnectStatus").get_to(v_connectStatus);
    if (j.contains("CreationTime")) j.at("CreationTime").get_to(v_creationTime);
    if (j.contains("CustomerGatewayId")) j.at("CustomerGatewayId").get_to(v_customerGatewayId);
    if (j.contains("DeletedTime")) j.at("DeletedTime").get_to(v_deletedTime);
    if (j.contains("Description")) j.at("Description").get_to(v_description);
    if (j.contains("DpdAction")) j.at("DpdAction").get_to(v_dpdAction);
    if (j.contains("IkeConfig")){
        json ikeConfigPres = j.at("IkeConfig");
        auto next = std::make_shared<IkeConfigForDescribeVpnConnectionAttributesOutput>();
        next->fromJsonString(to_string(ikeConfigPres));
        v_ikeConfig = next;
    }
    if (j.contains("IpAddress")) j.at("IpAddress").get_to(v_ipAddress);
    if (j.contains("IpsecConfig")){
        json ipsecConfigPres = j.at("IpsecConfig");
        auto next = std::make_shared<IpsecConfigForDescribeVpnConnectionAttributesOutput>();
        next->fromJsonString(to_string(ipsecConfigPres));
        v_ipsecConfig = next;
    }
    if (j.contains("LocalSubnet")){
        json localSubnetPres = j.at("LocalSubnet");
        for (auto & pre : localSubnetPres) {
           v_localSubnet.emplace_back(pre);
        }
    }
    if (j.contains("LogEnabled")) j.at("LogEnabled").get_to(v_logEnabled);
    if (j.contains("NatTraversal")) j.at("NatTraversal").get_to(v_natTraversal);
    if (j.contains("NegotiateInstantly")) j.at("NegotiateInstantly").get_to(v_negotiateInstantly);
    if (j.contains("OverdueTime")) j.at("OverdueTime").get_to(v_overdueTime);
    if (j.contains("ProjectName")) j.at("ProjectName").get_to(v_projectName);
    if (j.contains("RemoteSubnet")){
        json remoteSubnetPres = j.at("RemoteSubnet");
        for (auto & pre : remoteSubnetPres) {
           v_remoteSubnet.emplace_back(pre);
        }
    }
    if (j.contains("RequestId")) j.at("RequestId").get_to(v_requestId);
    if (j.contains("Status")) j.at("Status").get_to(v_status);
    if (j.contains("TransitRouterId")) j.at("TransitRouterId").get_to(v_transitRouterId);
    if (j.contains("UpdateTime")) j.at("UpdateTime").get_to(v_updateTime);
    if (j.contains("VpnConnectionId")) j.at("VpnConnectionId").get_to(v_vpnConnectionId);
    if (j.contains("VpnConnectionName")) j.at("VpnConnectionName").get_to(v_vpnConnectionName);
    if (j.contains("VpnGatewayId")) j.at("VpnGatewayId").get_to(v_vpnGatewayId);
    if (j.contains("ZoneId")) j.at("ZoneId").get_to(v_zoneId);
}
