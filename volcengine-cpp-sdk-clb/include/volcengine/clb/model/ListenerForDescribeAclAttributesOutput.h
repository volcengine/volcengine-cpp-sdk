/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_CLB_LISTENERFORDESCRIBEACLATTRIBUTESOUTPUT_H
#define VOLCENGINE_CLB_LISTENERFORDESCRIBEACLATTRIBUTESOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace clb{
        class ListenerForDescribeAclAttributesOutput {
        public:
            ListenerForDescribeAclAttributesOutput() = default;
            ~ListenerForDescribeAclAttributesOutput() = default;
            void fromJsonString(const std::string &input);
            const std::string &getAclType() const { return  v_aclType; }
            void setAclType(const std::string &s_aclType ) {
                v_aclType = s_aclType;
            }
            const std::string &getListenerId() const { return  v_listenerId; }
            void setListenerId(const std::string &s_listenerId ) {
                v_listenerId = s_listenerId;
            }
            const std::string &getListenerName() const { return  v_listenerName; }
            void setListenerName(const std::string &s_listenerName ) {
                v_listenerName = s_listenerName;
            }
            const int getPort() const { return  v_port; }
            void setPort(const int s_port ) {
                v_port = s_port;
            }
            const std::string &getProtocol() const { return  v_protocol; }
            void setProtocol(const std::string &s_protocol ) {
                v_protocol = s_protocol;
            }
        private:
            std::string v_aclType;
            std::string v_listenerId;
            std::string v_listenerName;
            int v_port{};
            std::string v_protocol;
        };
    }
}
#endif // !VOLCENGINE_CLB_LISTENERFORDESCRIBEACLATTRIBUTESOUTPUT_H