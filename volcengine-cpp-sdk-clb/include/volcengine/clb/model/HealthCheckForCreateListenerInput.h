/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_CLB_HEALTHCHECKFORCREATELISTENERINPUT_H
#define VOLCENGINE_CLB_HEALTHCHECKFORCREATELISTENERINPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>

namespace volcengine{
    namespace clb{
        class HealthCheckForCreateListenerInput {
        public:
            HealthCheckForCreateListenerInput();
            ~HealthCheckForCreateListenerInput() = default;

            RequestBuilder withRequestBuilder(RequestBuilder rb, const std::string &chain)const;

            const std::string &getDomain()const { return  v_domain; }
            bool DomainHasBeenSet() const { return v_domainHasBeenSet; }
            void setDomain(const std::string &s_domain ) {
                v_domain = s_domain;
                v_domainHasBeenSet = true;
            }
            const std::string &getEnabled()const { return  v_enabled; }
            bool EnabledHasBeenSet() const { return v_enabledHasBeenSet; }
            void setEnabled(const std::string &s_enabled ) {
                v_enabled = s_enabled;
                v_enabledHasBeenSet = true;
            }
            int getHealthyThreshold()const { return  v_healthyThreshold; }
            bool HealthyThresholdHasBeenSet() const { return v_healthyThresholdHasBeenSet; }
            void setHealthyThreshold(const int s_healthyThreshold ) {
                v_healthyThreshold = s_healthyThreshold;
                v_healthyThresholdHasBeenSet = true;
            }
            const std::string &getHttpCode()const { return  v_httpCode; }
            bool HttpCodeHasBeenSet() const { return v_httpCodeHasBeenSet; }
            void setHttpCode(const std::string &s_httpCode ) {
                v_httpCode = s_httpCode;
                v_httpCodeHasBeenSet = true;
            }
            int getInterval()const { return  v_interval; }
            bool IntervalHasBeenSet() const { return v_intervalHasBeenSet; }
            void setInterval(const int s_interval ) {
                v_interval = s_interval;
                v_intervalHasBeenSet = true;
            }
            const std::string &getMethod()const { return  v_method; }
            bool MethodHasBeenSet() const { return v_methodHasBeenSet; }
            void setMethod(const std::string &s_method ) {
                v_method = s_method;
                v_methodHasBeenSet = true;
            }
            int getTimeout()const { return  v_timeout; }
            bool TimeoutHasBeenSet() const { return v_timeoutHasBeenSet; }
            void setTimeout(const int s_timeout ) {
                v_timeout = s_timeout;
                v_timeoutHasBeenSet = true;
            }
            const std::string &getURI()const { return  v_uRI; }
            bool URIHasBeenSet() const { return v_uRIHasBeenSet; }
            void setURI(const std::string &s_uRI ) {
                v_uRI = s_uRI;
                v_uRIHasBeenSet = true;
            }
            const std::string &getUdpExpect()const { return  v_udpExpect; }
            bool UdpExpectHasBeenSet() const { return v_udpExpectHasBeenSet; }
            void setUdpExpect(const std::string &s_udpExpect ) {
                v_udpExpect = s_udpExpect;
                v_udpExpectHasBeenSet = true;
            }
            const std::string &getUdpRequest()const { return  v_udpRequest; }
            bool UdpRequestHasBeenSet() const { return v_udpRequestHasBeenSet; }
            void setUdpRequest(const std::string &s_udpRequest ) {
                v_udpRequest = s_udpRequest;
                v_udpRequestHasBeenSet = true;
            }
            int getUnhealthyThreshold()const { return  v_unhealthyThreshold; }
            bool UnhealthyThresholdHasBeenSet() const { return v_unhealthyThresholdHasBeenSet; }
            void setUnhealthyThreshold(const int s_unhealthyThreshold ) {
                v_unhealthyThreshold = s_unhealthyThreshold;
                v_unhealthyThresholdHasBeenSet = true;
            }
        private:
            std::string v_domain;
            bool v_domainHasBeenSet;

            std::string v_enabled;
            bool v_enabledHasBeenSet;

            int v_healthyThreshold;
            bool v_healthyThresholdHasBeenSet;

            std::string v_httpCode;
            bool v_httpCodeHasBeenSet;

            int v_interval;
            bool v_intervalHasBeenSet;

            std::string v_method;
            bool v_methodHasBeenSet;

            int v_timeout;
            bool v_timeoutHasBeenSet;

            std::string v_uRI;
            bool v_uRIHasBeenSet;

            std::string v_udpExpect;
            bool v_udpExpectHasBeenSet;

            std::string v_udpRequest;
            bool v_udpRequestHasBeenSet;

            int v_unhealthyThreshold;
            bool v_unhealthyThresholdHasBeenSet;

        };
    }
}
#endif // !VOLCENGINE_CLB_HEALTHCHECKFORCREATELISTENERINPUT_H