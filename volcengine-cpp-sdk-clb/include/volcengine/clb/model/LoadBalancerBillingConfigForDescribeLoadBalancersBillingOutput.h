/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_CLB_LOADBALANCERBILLINGCONFIGFORDESCRIBELOADBALANCERSBILLINGOUTPUT_H
#define VOLCENGINE_CLB_LOADBALANCERBILLINGCONFIGFORDESCRIBELOADBALANCERSBILLINGOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace clb{
        class LoadBalancerBillingConfigForDescribeLoadBalancersBillingOutput {
        public:
            LoadBalancerBillingConfigForDescribeLoadBalancersBillingOutput() = default;
            ~LoadBalancerBillingConfigForDescribeLoadBalancersBillingOutput() = default;
            void fromJsonString(const std::string &input);
            const int getBillingType() const { return  v_billingType; }
            void setBillingType(const int s_billingType ) {
                v_billingType = s_billingType;
            }
            const std::string &getExpiredTime() const { return  v_expiredTime; }
            void setExpiredTime(const std::string &s_expiredTime ) {
                v_expiredTime = s_expiredTime;
            }
            const int getInstanceStatus() const { return  v_instanceStatus; }
            void setInstanceStatus(const int s_instanceStatus ) {
                v_instanceStatus = s_instanceStatus;
            }
            const std::string &getLoadBalancerId() const { return  v_loadBalancerId; }
            void setLoadBalancerId(const std::string &s_loadBalancerId ) {
                v_loadBalancerId = s_loadBalancerId;
            }
            const std::string &getOverdueReclaimTime() const { return  v_overdueReclaimTime; }
            void setOverdueReclaimTime(const std::string &s_overdueReclaimTime ) {
                v_overdueReclaimTime = s_overdueReclaimTime;
            }
            const std::string &getOverdueTime() const { return  v_overdueTime; }
            void setOverdueTime(const std::string &s_overdueTime ) {
                v_overdueTime = s_overdueTime;
            }
            const std::string &getReclaimTime() const { return  v_reclaimTime; }
            void setReclaimTime(const std::string &s_reclaimTime ) {
                v_reclaimTime = s_reclaimTime;
            }
            const int getRemainRenewTimes() const { return  v_remainRenewTimes; }
            void setRemainRenewTimes(const int s_remainRenewTimes ) {
                v_remainRenewTimes = s_remainRenewTimes;
            }
            const int getRenewPeriodTimes() const { return  v_renewPeriodTimes; }
            void setRenewPeriodTimes(const int s_renewPeriodTimes ) {
                v_renewPeriodTimes = s_renewPeriodTimes;
            }
            const int getRenewType() const { return  v_renewType; }
            void setRenewType(const int s_renewType ) {
                v_renewType = s_renewType;
            }
        private:
            int v_billingType{};
            std::string v_expiredTime;
            int v_instanceStatus{};
            std::string v_loadBalancerId;
            std::string v_overdueReclaimTime;
            std::string v_overdueTime;
            std::string v_reclaimTime;
            int v_remainRenewTimes{};
            int v_renewPeriodTimes{};
            int v_renewType{};
        };
    }
}
#endif // !VOLCENGINE_CLB_LOADBALANCERBILLINGCONFIGFORDESCRIBELOADBALANCERSBILLINGOUTPUT_H