/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_CLB_HEALTHCHECKFORDESCRIBELISTENERSOUTPUT_H
#define VOLCENGINE_CLB_HEALTHCHECKFORDESCRIBELISTENERSOUTPUT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
namespace volcengine{
    namespace clb{
        class HealthCheckForDescribeListenersOutput {
        public:
            HealthCheckForDescribeListenersOutput() = default;
            ~HealthCheckForDescribeListenersOutput() = default;
            void fromJsonString(const std::string &input);
            const std::string &getDomain() const { return  v_domain; }
            void setDomain(const std::string &s_domain ) {
                v_domain = s_domain;
            }
            const std::string &getEnabled() const { return  v_enabled; }
            void setEnabled(const std::string &s_enabled ) {
                v_enabled = s_enabled;
            }
            const int getHealthyThreshold() const { return  v_healthyThreshold; }
            void setHealthyThreshold(const int s_healthyThreshold ) {
                v_healthyThreshold = s_healthyThreshold;
            }
            const std::string &getHttpCode() const { return  v_httpCode; }
            void setHttpCode(const std::string &s_httpCode ) {
                v_httpCode = s_httpCode;
            }
            const int getInterval() const { return  v_interval; }
            void setInterval(const int s_interval ) {
                v_interval = s_interval;
            }
            const std::string &getMethod() const { return  v_method; }
            void setMethod(const std::string &s_method ) {
                v_method = s_method;
            }
            const int getTimeout() const { return  v_timeout; }
            void setTimeout(const int s_timeout ) {
                v_timeout = s_timeout;
            }
            const std::string &getUdpExpect() const { return  v_udpExpect; }
            void setUdpExpect(const std::string &s_udpExpect ) {
                v_udpExpect = s_udpExpect;
            }
            const std::string &getUdpRequest() const { return  v_udpRequest; }
            void setUdpRequest(const std::string &s_udpRequest ) {
                v_udpRequest = s_udpRequest;
            }
            const int getUnHealthyThreshold() const { return  v_unHealthyThreshold; }
            void setUnHealthyThreshold(const int s_unHealthyThreshold ) {
                v_unHealthyThreshold = s_unHealthyThreshold;
            }
            const std::string &getUri() const { return  v_uri; }
            void setUri(const std::string &s_uri ) {
                v_uri = s_uri;
            }
        private:
            std::string v_domain;
            std::string v_enabled;
            int v_healthyThreshold{};
            std::string v_httpCode;
            int v_interval{};
            std::string v_method;
            int v_timeout{};
            std::string v_udpExpect;
            std::string v_udpRequest;
            int v_unHealthyThreshold{};
            std::string v_uri;
        };
    }
}
#endif // !VOLCENGINE_CLB_HEALTHCHECKFORDESCRIBELISTENERSOUTPUT_H