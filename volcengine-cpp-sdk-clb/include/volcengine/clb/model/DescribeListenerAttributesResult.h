/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#ifndef VOLCENGINE_CLB_DESCRIBELISTENERATTRIBUTESRESULT_H
#define VOLCENGINE_CLB_DESCRIBELISTENERATTRIBUTESRESULT_H
#include <string>
#include <volcengine/core/RequestBuilder.h>
#include "volcengine/core/utils/json.hpp"
#include "volcengine/clb/model/HealthCheckForDescribeListenerAttributesOutput.h"
namespace volcengine{
    namespace clb{
        class DescribeListenerAttributesResult {
        public:
            DescribeListenerAttributesResult() = default;
            ~DescribeListenerAttributesResult() = default;
            void fromJsonString(const std::string &input);
            const std::vector<std::string> &getAclIds() const { return  v_aclIds; }
            void setAclIds(const std::vector<std::string> &s_aclIds ) {
                v_aclIds = s_aclIds;
            }
            const std::string &getAclStatus() const { return  v_aclStatus; }
            void setAclStatus(const std::string &s_aclStatus ) {
                v_aclStatus = s_aclStatus;
            }
            const std::string &getAclType() const { return  v_aclType; }
            void setAclType(const std::string &s_aclType ) {
                v_aclType = s_aclType;
            }
            const int getBandwidth() const { return  v_bandwidth; }
            void setBandwidth(const int s_bandwidth ) {
                v_bandwidth = s_bandwidth;
            }
            const std::string &getCertificateId() const { return  v_certificateId; }
            void setCertificateId(const std::string &s_certificateId ) {
                v_certificateId = s_certificateId;
            }
            const std::string &getCreateTime() const { return  v_createTime; }
            void setCreateTime(const std::string &s_createTime ) {
                v_createTime = s_createTime;
            }
            const std::string &getDescription() const { return  v_description; }
            void setDescription(const std::string &s_description ) {
                v_description = s_description;
            }
            const std::string &getEnabled() const { return  v_enabled; }
            void setEnabled(const std::string &s_enabled ) {
                v_enabled = s_enabled;
            }
            const int getEstablishedTimeout() const { return  v_establishedTimeout; }
            void setEstablishedTimeout(const int s_establishedTimeout ) {
                v_establishedTimeout = s_establishedTimeout;
            }
            const std::shared_ptr<HealthCheckForDescribeListenerAttributesOutput> &getHealthCheck() const { return  v_healthCheck; }
            void setHealthCheck(const std::shared_ptr<HealthCheckForDescribeListenerAttributesOutput> &s_healthCheck ) {
                v_healthCheck = s_healthCheck;
            }
            const std::string &getListenerId() const { return  v_listenerId; }
            void setListenerId(const std::string &s_listenerId ) {
                v_listenerId = s_listenerId;
            }
            const std::string &getListenerName() const { return  v_listenerName; }
            void setListenerName(const std::string &s_listenerName ) {
                v_listenerName = s_listenerName;
            }
            const std::string &getLoadBalancerId() const { return  v_loadBalancerId; }
            void setLoadBalancerId(const std::string &s_loadBalancerId ) {
                v_loadBalancerId = s_loadBalancerId;
            }
            const int getPort() const { return  v_port; }
            void setPort(const int s_port ) {
                v_port = s_port;
            }
            const std::string &getProtocol() const { return  v_protocol; }
            void setProtocol(const std::string &s_protocol ) {
                v_protocol = s_protocol;
            }
            const std::string &getRequestId() const { return  v_requestId; }
            void setRequestId(const std::string &s_requestId ) {
                v_requestId = s_requestId;
            }
            const std::string &getScheduler() const { return  v_scheduler; }
            void setScheduler(const std::string &s_scheduler ) {
                v_scheduler = s_scheduler;
            }
            const std::string &getServerGroupId() const { return  v_serverGroupId; }
            void setServerGroupId(const std::string &s_serverGroupId ) {
                v_serverGroupId = s_serverGroupId;
            }
            const std::string &getStatus() const { return  v_status; }
            void setStatus(const std::string &s_status ) {
                v_status = s_status;
            }
            const std::string &getUpdateTime() const { return  v_updateTime; }
            void setUpdateTime(const std::string &s_updateTime ) {
                v_updateTime = s_updateTime;
            }
        private:
            std::vector<std::string> v_aclIds;
            std::string v_aclStatus;
            std::string v_aclType;
            int v_bandwidth{};
            std::string v_certificateId;
            std::string v_createTime;
            std::string v_description;
            std::string v_enabled;
            int v_establishedTimeout{};
            std::shared_ptr<HealthCheckForDescribeListenerAttributesOutput> v_healthCheck;
            std::string v_listenerId;
            std::string v_listenerName;
            std::string v_loadBalancerId;
            int v_port{};
            std::string v_protocol;
            std::string v_requestId;
            std::string v_scheduler;
            std::string v_serverGroupId;
            std::string v_status;
            std::string v_updateTime;
        };
    }
}
#endif // !VOLCENGINE_CLB_DESCRIBELISTENERATTRIBUTESRESULT_H