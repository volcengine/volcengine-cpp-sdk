/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/clb/model/CreateLoadBalancerRequest.h"

using namespace volcengine;
using namespace volcengine::clb;
CreateLoadBalancerRequest::CreateLoadBalancerRequest(){
    v_loadBalancerBillingType = 0;
    v_loadBalancerBillingTypeHasBeenSet = false;
    v_period = 0;
    v_periodHasBeenSet = false;
}

RequestBuilder CreateLoadBalancerRequest::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {
    rb.withQuery("Action","CreateLoadBalancer");
    rb.withQuery("Version","2020-04-01");

    if(v_addressIpVersionHasBeenSet){
        rb.withQuery(chain + "AddressIpVersion", v_addressIpVersion);

    }

    if(v_clientTokenHasBeenSet){
        rb.withQuery(chain + "ClientToken", v_clientToken);

    }

    if(v_descriptionHasBeenSet){
        rb.withQuery(chain + "Description", v_description);

    }

    if(v_eipBillingConfigHasBeenSet){
        rb = v_eipBillingConfig->withRequestBuilder(rb, "EipBillingConfig.");
    }

    if(v_eniAddressHasBeenSet){
        rb.withQuery(chain + "EniAddress", v_eniAddress);

    }

    if(v_eniIpv6AddressHasBeenSet){
        rb.withQuery(chain + "EniIpv6Address", v_eniIpv6Address);

    }

    if(v_loadBalancerBillingTypeHasBeenSet){
        rb.withQuery(chain + "LoadBalancerBillingType", std::to_string(v_loadBalancerBillingType));

    }

    if(v_loadBalancerNameHasBeenSet){
        rb.withQuery(chain + "LoadBalancerName", v_loadBalancerName);

    }

    if(v_loadBalancerSpecHasBeenSet){
        rb.withQuery(chain + "LoadBalancerSpec", v_loadBalancerSpec);

    }

    if(v_masterZoneIdHasBeenSet){
        rb.withQuery(chain + "MasterZoneId", v_masterZoneId);

    }

    if(v_modificationProtectionReasonHasBeenSet){
        rb.withQuery(chain + "ModificationProtectionReason", v_modificationProtectionReason);

    }

    if(v_modificationProtectionStatusHasBeenSet){
        rb.withQuery(chain + "ModificationProtectionStatus", v_modificationProtectionStatus);

    }

    if(v_periodHasBeenSet){
        rb.withQuery(chain + "Period", std::to_string(v_period));

    }

    if(v_periodUnitHasBeenSet){
        rb.withQuery(chain + "PeriodUnit", v_periodUnit);

    }

    if(v_projectNameHasBeenSet){
        rb.withQuery(chain + "ProjectName", v_projectName);

    }

    if(v_regionIdHasBeenSet){
        rb.withQuery(chain + "RegionId", v_regionId);

    }

    if(v_slaveZoneIdHasBeenSet){
        rb.withQuery(chain + "SlaveZoneId", v_slaveZoneId);

    }

    if(v_subnetIdHasBeenSet){
        rb.withQuery(chain + "SubnetId", v_subnetId);

    }

    if(v_tagsHasBeenSet){
      unsigned v_tagsCount = 1;
      for(auto& item : v_tags){
        std::stringstream ss;
        ss << chain << "Tags." << v_tagsCount;
        rb = item.withRequestBuilder(rb, ss.str()+".");
        v_tagsCount ++;
      }
    }

    if(v_typeHasBeenSet){
        rb.withQuery(chain + "Type", v_type);

    }

    if(v_vpcIdHasBeenSet){
        rb.withQuery(chain + "VpcId", v_vpcId);

    }

    return rb;
}


