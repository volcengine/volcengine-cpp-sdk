/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/clb/model/ModifyListenerAttributesRequest.h"

using namespace volcengine;
using namespace volcengine::clb;
ModifyListenerAttributesRequest::ModifyListenerAttributesRequest(){
    v_bandwidth = 0;
    v_bandwidthHasBeenSet = false;
    v_establishedTimeout = 0;
    v_establishedTimeoutHasBeenSet = false;
    v_persistenceTimeout = 0;
    v_persistenceTimeoutHasBeenSet = false;
}

RequestBuilder ModifyListenerAttributesRequest::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {
    rb.withQuery("Action","ModifyListenerAttributes");
    rb.withQuery("Version","2020-04-01");

    if(v_aclIdsHasBeenSet){
      unsigned v_aclIdsCount = 1;
      for(auto& item : v_aclIds){
        std::stringstream ss;
        ss << chain << "AclIds." << v_aclIdsCount;
        rb.withQuery(ss.str(), item);
        v_aclIdsCount ++;
      }
    }

    if(v_aclStatusHasBeenSet){
        rb.withQuery(chain + "AclStatus", v_aclStatus);

    }

    if(v_aclTypeHasBeenSet){
        rb.withQuery(chain + "AclType", v_aclType);

    }

    if(v_bandwidthHasBeenSet){
        rb.withQuery(chain + "Bandwidth", std::to_string(v_bandwidth));

    }

    if(v_certificateIdHasBeenSet){
        rb.withQuery(chain + "CertificateId", v_certificateId);

    }

    if(v_descriptionHasBeenSet){
        rb.withQuery(chain + "Description", v_description);

    }

    if(v_enabledHasBeenSet){
        rb.withQuery(chain + "Enabled", v_enabled);

    }

    if(v_establishedTimeoutHasBeenSet){
        rb.withQuery(chain + "EstablishedTimeout", std::to_string(v_establishedTimeout));

    }

    if(v_healthCheckHasBeenSet){
        rb = v_healthCheck->withRequestBuilder(rb, "HealthCheck.");
    }

    if(v_listenerIdHasBeenSet){
        rb.withQuery(chain + "ListenerId", v_listenerId);

    }

    if(v_listenerNameHasBeenSet){
        rb.withQuery(chain + "ListenerName", v_listenerName);

    }

    if(v_persistenceTimeoutHasBeenSet){
        rb.withQuery(chain + "PersistenceTimeout", std::to_string(v_persistenceTimeout));

    }

    if(v_persistenceTypeHasBeenSet){
        rb.withQuery(chain + "PersistenceType", v_persistenceType);

    }

    if(v_proxyProtocolTypeHasBeenSet){
        rb.withQuery(chain + "ProxyProtocolType", v_proxyProtocolType);

    }

    if(v_schedulerHasBeenSet){
        rb.withQuery(chain + "Scheduler", v_scheduler);

    }

    if(v_serverGroupIdHasBeenSet){
        rb.withQuery(chain + "ServerGroupId", v_serverGroupId);

    }

    return rb;
}


