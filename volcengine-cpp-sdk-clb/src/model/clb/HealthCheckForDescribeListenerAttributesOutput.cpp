/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include "volcengine/clb/model/HealthCheckForDescribeListenerAttributesOutput.h"

using namespace volcengine;
using namespace volcengine::clb;
using namespace nlohmann;

void HealthCheckForDescribeListenerAttributesOutput::fromJsonString(const std::string &input) {
    auto j = json::parse(input);
    if (j.contains("Domain")) j.at("Domain").get_to(v_domain);
    if (j.contains("Enabled")) j.at("Enabled").get_to(v_enabled);
    if (j.contains("HealthyThreshold")) j.at("HealthyThreshold").get_to(v_healthyThreshold);
    if (j.contains("HttpCode")) j.at("HttpCode").get_to(v_httpCode);
    if (j.contains("Interval")) j.at("Interval").get_to(v_interval);
    if (j.contains("Method")) j.at("Method").get_to(v_method);
    if (j.contains("Timeout")) j.at("Timeout").get_to(v_timeout);
    if (j.contains("UdpExpect")) j.at("UdpExpect").get_to(v_udpExpect);
    if (j.contains("UdpRequest")) j.at("UdpRequest").get_to(v_udpRequest);
    if (j.contains("UnHealthyThreshold")) j.at("UnHealthyThreshold").get_to(v_unHealthyThreshold);
    if (j.contains("Uri")) j.at("Uri").get_to(v_uri);
}
