/*
* Code generated by Beijing Volcanoengine Technology.Do NOT EDIT.
* Copyright Beijing Volcanoengine Technology Ltd All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
#include <sstream>
#include <volcengine/core/RequestBuilder.h>
#include <volcengine/core/utils/StringUtils.h>
#include "volcengine/clb/model/HealthCheckForModifyListenerAttributesInput.h"

using namespace volcengine;
using namespace volcengine::clb;
HealthCheckForModifyListenerAttributesInput::HealthCheckForModifyListenerAttributesInput(){
    v_healthyThreshold = 0;
    v_healthyThresholdHasBeenSet = false;
    v_interval = 0;
    v_intervalHasBeenSet = false;
    v_timeout = 0;
    v_timeoutHasBeenSet = false;
    v_unhealthyThreshold = 0;
    v_unhealthyThresholdHasBeenSet = false;
}

RequestBuilder HealthCheckForModifyListenerAttributesInput::withRequestBuilder(RequestBuilder rb, const std::string &chain) const {

    if(v_domainHasBeenSet){
        rb.withQuery(chain + "Domain", v_domain);

    }

    if(v_enabledHasBeenSet){
        rb.withQuery(chain + "Enabled", v_enabled);

    }

    if(v_healthyThresholdHasBeenSet){
        rb.withQuery(chain + "HealthyThreshold", std::to_string(v_healthyThreshold));

    }

    if(v_httpCodeHasBeenSet){
        rb.withQuery(chain + "HttpCode", v_httpCode);

    }

    if(v_intervalHasBeenSet){
        rb.withQuery(chain + "Interval", std::to_string(v_interval));

    }

    if(v_methodHasBeenSet){
        rb.withQuery(chain + "Method", v_method);

    }

    if(v_timeoutHasBeenSet){
        rb.withQuery(chain + "Timeout", std::to_string(v_timeout));

    }

    if(v_uRIHasBeenSet){
        rb.withQuery(chain + "URI", v_uRI);

    }

    if(v_unhealthyThresholdHasBeenSet){
        rb.withQuery(chain + "UnhealthyThreshold", std::to_string(v_unhealthyThreshold));

    }

    return rb;
}


